{
  "paths": {
    "/identification/session": {
      "get": {
        "tags": [
          "Identification Session"
        ],
        "summary": "Retrieve session response",
        "description": "Retrieves the response of a single identifaction session.\r\nREMARK: Only authenticate users when the identitication status is equal to SUCCESS.",
        "operationId": "RetrieveSessionResponse",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "description": "The unique identifier returned in the creation of the session",
            "required": true,
            "type": "string"
          },
          {
            "name": "metaData",
            "in": "query",
            "description": "Whether metadata should be included in the response, only set to true if needed (addons and user ceritifcate)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IdentificationResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "identify"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Identification Session"
        ],
        "summary": "Create session",
        "description": "Creates a new identification session",
        "operationId": "CreateSession",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIdentificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateIdentificationResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "identify"
            ]
          }
        ]
      }
    },
    "/identification/session/status": {
      "get": {
        "tags": [
          "Identification Session"
        ],
        "summary": "Retrieve session status",
        "description": "Retrieves the status of a single identification session.",
        "operationId": "RetrieveSessionStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "description": "The requestId returned in the creation of the request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IdentificationCompleteResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "identify"
            ]
          }
        ]
      }
    },
    "/identification/session/invalidate": {
      "put": {
        "tags": [
          "Identification Session"
        ],
        "summary": "Invalidate session",
        "description": "Invalidates an identification session to avoid using the same request twice. Remark: if the session has status ERROR it will not be invalidated.",
        "operationId": "InvalidateSession",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "A request object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvalidateIdentificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "identify"
            ]
          }
        ]
      }
    },
    "/identification/log/requestId/{requestId}": {
      "get": {
        "tags": [
          "Log"
        ],
        "summary": "Retrieve a log entry",
        "description": "Gets an historic identification session (older than 14 days)\r\nRemark: Log entries are updated with a little delay (min 5 minutes max 25 minutes).",
        "operationId": "RetrieveALogEntry",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "A request object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IdentificationLogItem"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "identify"
            ]
          }
        ]
      }
    },
    "/identification/log/filter/{year}": {
      "get": {
        "tags": [
          "Log"
        ],
        "summary": "List log entries",
        "description": "Gets an  list of historic identification sessions (older than 14 days) by the filter below fetched the last 1000 with a link to next page. \r\nRemark: Log entries are updated with a little delay (min 5 minutes max 25 minutes).",
        "operationId": "ListLogEntries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "The year to fetch the sessions from",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Optional: Filter on month",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "query",
            "description": "Optional: Filter on day",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional: Filter on status",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESS",
              "ERROR",
              "USERABORTED",
              "INVALIDATED",
              "TIMEOUT",
              "CREATED",
              "USERINITIATED"
            ]
          },
          {
            "name": "identityProviderType",
            "in": "query",
            "description": "Optional: Filter on identity provider",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "NO_BANKID_MOBILE",
              "NO_BANKID_WEB",
              "SWE_BANKID",
              "SWE_BANKID_MOBILE",
              "NO_BUYPASS",
              "DA_NEMID",
              "FI_TUPAS"
            ]
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "The merchants reference to the identification process",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional: Filter on the name of the user",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of pages to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results in each page (max 1000)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResult[IdentificationLogItem]"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "identify"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/attachments": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "List attachments",
        "description": "Returns a list of all attachments for the specified document.",
        "operationId": "Attachments_List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttachmentListItem"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "64a25f7c-7f01-4285-8742-0afe3a11c855",
                  "title": "Attachment 1 - Type description",
                  "description": "This attachment describes bla bla bla...",
                  "type": "show_accept",
                  "fileName": "Attachment1.pdf"
                },
                {
                  "id": "e9a6aedd-6e2f-4bdb-a5a5-83c0cbd64545",
                  "title": "Attachment 2 - Building sketches",
                  "description": "This attachment includes sketches of the build at...",
                  "type": "show_accept",
                  "fileName": "Attachment2.pdf"
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Attachments"
        ],
        "summary": "Create attachment",
        "description": "Adds an attachments to the specified document. You can choose between different ways to make the user accept the attachment.\r\n             <span style=\"color:red;\">The attachment will be deleted when the signature job is completed or has expired</span>",
        "operationId": "Attachments_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachmentRequestWrapper"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            },
            "examples": {
              "application/json": {
                "id": "754d1e49-1c32-48b9-8e50-fb1b841b92bd",
                "fileName": "Attachment1.pdf",
                "title": "Attachment 1 - Type description",
                "data": "Base 64 encoded pdf",
                "convertToPdf": false,
                "description": "This attachment describes bla bla bla...",
                "type": "show_accept"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Retrieve attachment",
        "description": "Retrieves the details of a single attachment.",
        "operationId": "Attachments_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            },
            "examples": {
              "application/json": {
                "id": "3752f7a9-bbcc-4a28-a848-9c562973fe97",
                "fileName": "Attachment1.pdf",
                "title": "Attachment 1 - Type description",
                "data": "Base 64 encoded pdf",
                "convertToPdf": false,
                "description": "This attachment describes bla bla bla...",
                "type": "show_accept"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Attachments"
        ],
        "summary": "Delete attachment",
        "description": "Deletes the specified attachment (Will only take affect if no one has signed the document yet)",
        "operationId": "Attachments_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Attachments"
        ],
        "summary": "Update attachment",
        "description": "Updates the specified attachment (Will only take affect if no one has signed the document yet)",
        "operationId": "Attachments_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAttachmentRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            },
            "examples": {
              "application/json": {
                "id": "e7c2398b-183a-4161-bb6b-37e2baaf5aff",
                "fileName": "Attachment1.pdf",
                "title": "Attachment 1 - Type description",
                "data": "Base 64 encoded pdf",
                "convertToPdf": false,
                "description": "This attachment describes bla bla bla...",
                "type": "show_accept"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create document",
        "description": "Creates a new document. In the response you will receive a document ID to retrieve info about the document at a later time. \r\nYou also receive a URL and unique identifier per signer.",
        "operationId": "Documents_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDocumentRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateDocumentResponse"
            },
            "examples": {
              "application/json": {
                "documentId": "94865b6f-2aa9-436d-8b3c-a85e00efd034",
                "signers": [
                  {
                    "id": "e6b7e854-dc4b-4134-99a2-a9a5008bdeeb",
                    "links": [],
                    "externalSignerId": "uoiahsd321982983jhrmnec2wsadm32",
                    "redirectSettings": {
                      "redirectMode": "donot_redirect"
                    },
                    "signatureType": {
                      "mechanism": "pkisignature",
                      "onEacceptUseHandWrittenSignature": false
                    },
                    "ui": {
                      "language": "EN",
                      "dialogs": {
                        "before": {
                          "useCheckBox": false,
                          "title": "Info",
                          "message": "Please read the contract on the next pages carefully. Pay some extra attention to paragraph 5."
                        }
                      },
                      "styling": {
                        "colorTheme": "Pink",
                        "spinner": "Cubes",
                        "hideTopBar": false
                      }
                    },
                    "tags": [],
                    "order": 0,
                    "required": false
                  }
                ],
                "status": {
                  "documentStatus": "unsigned",
                  "completedPackages": [],
                  "attachmentPackages": {}
                },
                "links": [],
                "title": "Test document",
                "description": "This is an important document",
                "externalId": "ae7b9ca7-3839-4e0d-a070-9f14bffbbf55",
                "dataToSign": {
                  "base64Content": "VGhpcyB0ZXh0IGNhbiBzYWZlbHkgYmUgc2lnbmVk",
                  "fileName": "sample.txt",
                  "convertToPDF": false
                },
                "contactDetails": {
                  "email": "test@test.com",
                  "url": "https://idfy.io"
                },
                "advanced": {
                  "tags": [
                    "develop",
                    "fun_with_documents"
                  ],
                  "attachments": 0,
                  "requiredSignatures": 0,
                  "getSocialSecurityNumber": false,
                  "timeToLive": {
                    "deadline": "2018-11-28T08:29:15.1681728Z",
                    "deleteAfterHours": 1
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieve document",
        "description": "Retrieves details of a single document.",
        "operationId": "Documents_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateDocumentResponse"
            },
            "examples": {
              "application/json": {
                "documentId": "94865b6f-2aa9-436d-8b3c-a85e00efd034",
                "signers": [
                  {
                    "id": "8b860ba5-27f5-412d-8561-a9a5008bdef4",
                    "links": [],
                    "externalSignerId": "uoiahsd321982983jhrmnec2wsadm32",
                    "redirectSettings": {
                      "redirectMode": "donot_redirect"
                    },
                    "signatureType": {
                      "mechanism": "pkisignature",
                      "onEacceptUseHandWrittenSignature": false
                    },
                    "ui": {
                      "language": "EN",
                      "dialogs": {
                        "before": {
                          "useCheckBox": false,
                          "title": "Info",
                          "message": "Please read the contract on the next pages carefully. Pay some extra attention to paragraph 5."
                        }
                      },
                      "styling": {
                        "colorTheme": "Pink",
                        "spinner": "Cubes",
                        "hideTopBar": false
                      }
                    },
                    "tags": [],
                    "order": 0,
                    "required": false
                  }
                ],
                "status": {
                  "documentStatus": "unsigned",
                  "completedPackages": [],
                  "attachmentPackages": {}
                },
                "links": [],
                "title": "Test document",
                "description": "This is an important document",
                "externalId": "ae7b9ca7-3839-4e0d-a070-9f14bffbbf55",
                "dataToSign": {
                  "base64Content": "VGhpcyB0ZXh0IGNhbiBzYWZlbHkgYmUgc2lnbmVk",
                  "fileName": "sample.txt",
                  "convertToPDF": false
                },
                "contactDetails": {
                  "email": "test@test.com",
                  "url": "https://idfy.io"
                },
                "advanced": {
                  "tags": [
                    "develop",
                    "fun_with_documents"
                  ],
                  "attachments": 0,
                  "requiredSignatures": 0,
                  "getSocialSecurityNumber": false,
                  "timeToLive": {
                    "deadline": "2018-11-28T08:29:15.2645894Z",
                    "deleteAfterHours": 1
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Documents"
        ],
        "summary": "Update document",
        "operationId": "Documents_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateDocumentRequest"
            },
            "examples": {
              "application/json": {
                "title": "Updated title",
                "description": "This is an updated description",
                "contactDetails": {
                  "email": "test@test.com",
                  "url": "https://idfy.io"
                },
                "advanced": {
                  "tags": [
                    "develop",
                    "fun_with_documents"
                  ],
                  "attachments": 0,
                  "requiredSignatures": 0,
                  "getSocialSecurityNumber": false,
                  "timeToLive": {
                    "deadline": "2018-11-28T08:29:15.2779625Z",
                    "deleteAfterHours": 1
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/cancel": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Cancel document",
        "operationId": "Documents_Cancel",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/status": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieve document status",
        "description": "Get the status of a document",
        "operationId": "Documents_Status",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            },
            "examples": {
              "application/json": {
                "documentStatus": "signed",
                "completedPackages": [
                  "standard_packaging",
                  "pades"
                ],
                "attachmentPackages": {}
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/summary": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieve document summary",
        "description": "Get information about a document",
        "operationId": "Documents_GetSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentSummary"
            },
            "examples": {
              "application/json": {
                "documentId": "9e1655c1-11d8-4a3e-91a7-8ca7f65cb0bb",
                "accountId": "ae73763d-444c-4b2e-ba7f-524eea4e9c5e",
                "title": "House contract",
                "description": "Sample avenue 42",
                "lastUpdated": "2018-11-25T21:29:15.3104253Z",
                "deadline": "2018-12-01T08:29:15.3104253Z",
                "status": {
                  "documentStatus": "partialsigned"
                },
                "externalId": "ipoqj9r8232j54rmno2i3lmfrå2q034frlk",
                "documentSignatures": [
                  {
                    "signerId": "636aaa36-0021-4625-93fc-376350b163f8",
                    "externalSignerId": "oiuhw2n97483hr3w9oiufn2wi3",
                    "signatureMethod": "no_bankid_netcentric",
                    "fullName": "Superhero, Awesome",
                    "firstName": "Awesome",
                    "lastName": "Superhero",
                    "signedTime": "2018-11-27T03:29:15.2931724Z",
                    "dateOfBirth": "1984-10-21",
                    "signatureMethodUniqueId": "",
                    "socialSecurityNumber": {
                      "value": "21108412345",
                      "countryCode": "NO"
                    },
                    "clientIp": "69.89.31.226"
                  }
                ],
                "requiredSignatures": 2,
                "currentSignatures": 1,
                "tags": [
                  "departement4"
                ],
                "attachments": [
                  "914bbfcb-0fe4-4f2a-a1ef-3090d751d8b8"
                ],
                "signers": [
                  "636aaa36-0021-4625-93fc-376350b163f8",
                  "347d4efd-a18c-4aac-9140-6f2003aed08e"
                ],
                "created": "2018-11-25T21:29:15.3104253Z"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      }
    },
    "/signature/documents/summary": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "List document summaries",
        "description": "Queries your documents using the provided parameters.",
        "operationId": "Documents_GetCollection",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "externalId",
            "in": "query",
            "description": "Documents external id",
            "required": false,
            "type": "string"
          },
          {
            "name": "signerId",
            "in": "query",
            "description": "Signer Id",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "externalSignerId",
            "in": "query",
            "description": "External signer Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Documents created from date (ticks)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Documents created to date (ticks)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lastUpdated",
            "in": "query",
            "description": "Documents updated after this date (ticks)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "signedDate",
            "in": "query",
            "description": "Documents signed after this date (ticks)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "nameOfSigner",
            "in": "query",
            "description": "Name of signer",
            "required": false,
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Document status",
            "required": false,
            "type": "string",
            "enum": [
              "unsigned",
              "waiting_for_attachments",
              "partialsigned",
              "signed",
              "canceled",
              "expired"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Document tags",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Used for paging (will be automatically set in response links)",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Set how many results you want per page (max/default 100)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CollectionWithPaging[DocumentSummary]"
            },
            "examples": {
              "application/json": {
                "offset": 0,
                "limit": 2,
                "size": 45,
                "links": {
                  "next": "https://api.idfy.io/signature/documents/summary?limit=2&offset=2",
                  "first": "https://api.idfy.io/signature/documents/summary?limit=2"
                },
                "data": [
                  {
                    "documentId": "1ed6d583-9502-4047-9009-2a710c4e9295",
                    "accountId": "abd9bc70-77fe-4236-9fd4-65bbfb0bd114",
                    "title": "House contract",
                    "description": "Sample avenue 42",
                    "lastUpdated": "2018-11-25T21:29:15.3401784Z",
                    "deadline": "2018-12-01T08:29:15.3401784Z",
                    "status": {
                      "documentStatus": "partialsigned"
                    },
                    "externalId": "ipoqj9r8232j54rmno2i3lmfrå2q034frlk",
                    "documentSignatures": [
                      {
                        "signerId": "1cacd4ea-037d-4507-8ea6-5131029f8c69",
                        "externalSignerId": "oiuhw2n97483hr3w9oiufn2wi3",
                        "signatureMethod": "no_bankid_netcentric",
                        "fullName": "Superhero, Awesome",
                        "firstName": "Awesome",
                        "lastName": "Superhero",
                        "signedTime": "2018-11-27T03:29:15.3401784Z",
                        "dateOfBirth": "1984-10-21",
                        "signatureMethodUniqueId": "",
                        "socialSecurityNumber": {
                          "value": "21108412345",
                          "countryCode": "NO"
                        },
                        "clientIp": "69.89.31.226"
                      }
                    ],
                    "requiredSignatures": 2,
                    "currentSignatures": 1,
                    "tags": [
                      "departement4"
                    ],
                    "attachments": [
                      "4ddf075b-96c4-4175-abdd-e338ba9e71d6"
                    ],
                    "signers": [
                      "1cacd4ea-037d-4507-8ea6-5131029f8c69",
                      "5b076b48-670a-4fa0-9a9f-cb002bde981b"
                    ],
                    "created": "2018-11-25T21:29:15.3401784Z"
                  },
                  {
                    "documentId": "60f6e4bd-c6f5-4f84-b971-6ea1bd3bdf05",
                    "accountId": "f4124e54-1a08-45bf-89ea-218e49e69186",
                    "title": "House contract",
                    "description": "Sample avenue 51",
                    "lastUpdated": "2018-11-25T21:29:15.3401784Z",
                    "deadline": "2018-12-01T08:29:15.3401784Z",
                    "status": {
                      "documentStatus": "unsigned"
                    },
                    "externalId": "9w87eht3984inf3wo0mf43p0owke",
                    "requiredSignatures": 2,
                    "currentSignatures": 0,
                    "tags": [
                      "departement4"
                    ],
                    "signers": [
                      "013b9e90-74b2-438c-ba25-c1aaf0fcf5bd",
                      "e49ecf58-dc60-434f-8bda-099e05ad055c"
                    ],
                    "created": "2018-11-25T21:29:15.3401784Z"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve file",
        "description": "Retrieves the signed document file.",
        "operationId": "Files_Get",
        "consumes": [],
        "produces": [
          "application/pdf",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "unsigned",
              "native",
              "standard_packaging",
              "pades",
              "xades"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "file"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_file"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/files/signers/{signerId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve file for signer",
        "description": "Retrieves the signed document file for the specified signer.",
        "operationId": "Files_GetSigner",
        "consumes": [],
        "produces": [
          "application/pdf",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "signerId",
            "in": "path",
            "description": "The signers Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "native",
              "packaged"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "file"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_file"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/files/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve attachment file",
        "description": "Retrieves the attachment file.",
        "operationId": "Files_GetAttachment",
        "consumes": [],
        "produces": [
          "application/pdf",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "unsigned",
              "native",
              "standard_packaging",
              "pades",
              "xades"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "file"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_file"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/files/attachments/{attachmentId}/signers/{signerId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve attachment for signer",
        "description": "Retrieves the attachment file for the specified signer.",
        "operationId": "Files_GetSignerAttachment",
        "consumes": [],
        "produces": [
          "application/pdf",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "signerId",
            "in": "path",
            "description": "The signers Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "native",
              "packaged"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "type": "file"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_file"
            ]
          }
        ]
      }
    },
    "/signature/jwt": {
      "post": {
        "tags": [
          "Jwt"
        ],
        "summary": "Validate JWT",
        "operationId": "Jwt_Validate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JwtValidationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JwtValidationResponse"
            },
            "examples": {
              "application/json": {
                "jwtValid": true,
                "expired": false,
                "jwtPayload": {
                  "accountId": "a1cbaea4-df9c-45f7-b6b0-aad39e6640ef",
                  "documentId": "439dc310-3c35-452d-a747-0e8b1efb0faa",
                  "externalId": "soidjnmg984wmnf3osfasdcw",
                  "signerId": "92989763-d1e4-4056-8d7d-32fc1fa6a019",
                  "externalSignerId": "ws97uh7uh7uh7uh7uh7uh7uhjm4fc4",
                  "signSuccess": {
                    "signatureMethodUniqueId": "8412125434",
                    "firstName": "Evil",
                    "lastName": "Villain",
                    "fullName": "Evil Villain",
                    "dateOfBirth": "121284",
                    "signatureMethod": "se_bankid",
                    "signedTime": "2018-11-27T08:29:15.4041078Z"
                  },
                  "expires": "2018-11-27T08:39:15.4041078Z",
                  "aborted": false
                }
              }
            }
          }
        }
      }
    },
    "/signature/documents/{documentId}/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List notifications",
        "description": "Returns a list of all notifications that has been sent / attempted sent for a document",
        "operationId": "Notifications_List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationLogItem"
              }
            },
            "examples": {
              "application/json": [
                {
                  "sentTimeStamp": "1/8/2018 10:58 AM",
                  "title": "Sample email",
                  "text": "email text",
                  "messageType": "EMAIL",
                  "status": "DELIVERED",
                  "receiver": "test@test.com"
                },
                {
                  "sentTimeStamp": "1/8/2018 10:58 AM",
                  "title": "Sample sms",
                  "text": "sms text",
                  "messageType": "SMS",
                  "status": "DELIVERED",
                  "receiver": "test@test.com"
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/notifications/reminder": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send reminders",
        "description": "If you want to send out reminders to all/some of the signers manually you can do it here.",
        "operationId": "Notifications_SendManualReminder",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "manualReminder",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualReminder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ManualReminder"
            },
            "examples": {
              "application/json": {
                "notificationSetting": "sendEmail",
                "signers": {
                  "11787f88-ef74-4241-bac2-69115991fa29": null,
                  "3dcf76a3-7185-404e-8783-8eb50e709c58": {
                    "emailOverride": "overrideemail@test.com"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/signers/{signerId}": {
      "get": {
        "tags": [
          "Signers"
        ],
        "summary": "Retrieve signer",
        "description": "Retrieves the details of a single signer.",
        "operationId": "Signers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "signerId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SignerResponse"
            },
            "examples": {
              "application/json": {
                "id": "d9dfce85-2b26-4351-81f7-ca6a08a8590b",
                "url": "https://sign-test.idfy.io/init?jwt=...",
                "externalSignerId": "aoijfnmo032q223",
                "redirectSettings": {
                  "redirectMode": "redirect",
                  "error": "https://idfy.io#error",
                  "cancel": "https://idfy.io#cancel",
                  "success": "https://idfy.io#success"
                },
                "signatureType": {
                  "mechanism": "pkisignature",
                  "onEacceptUseHandWrittenSignature": false
                },
                "order": 0,
                "required": false,
                "signUrlExpires": "2018-11-30T08:29:15.4354841Z"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Signers"
        ],
        "summary": "Delete signer",
        "operationId": "Signers_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "signerId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Signers"
        ],
        "summary": "Update signer",
        "operationId": "Signers_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "signerId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSignerRequestWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateSignerRequest"
            },
            "examples": {
              "application/json": {
                "signerInfo": {
                  "firstName": "Updated",
                  "lastName": "Name"
                },
                "order": 0,
                "required": false,
                "signUrlExpires": "2018-11-29T08:29:15.4650456Z"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/documents/{documentId}/signers": {
      "get": {
        "tags": [
          "Signers"
        ],
        "summary": "List signers",
        "operationId": "Signers_List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignerResponse"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "025e52db-e19c-49c4-bf4e-a4606444af21",
                  "url": "https://sign-test.idfy.io/init?jwt=...",
                  "externalSignerId": "aoijfnmo032q223",
                  "redirectSettings": {
                    "redirectMode": "redirect",
                    "error": "https://idfy.io#error",
                    "cancel": "https://idfy.io#cancel",
                    "success": "https://idfy.io#success"
                  },
                  "signatureType": {
                    "mechanism": "pkisignature",
                    "onEacceptUseHandWrittenSignature": false
                  },
                  "order": 0,
                  "required": false,
                  "signUrlExpires": "2018-11-30T08:29:15.4650456Z"
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Signers"
        ],
        "summary": "Create signer",
        "operationId": "Signers_Add",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "signer",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignerWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SignerResponse"
            },
            "examples": {
              "application/json": {
                "id": "a44c40b5-6fb3-4e43-8326-7099ab625a8a",
                "url": "https://sign-test.idfy.io/init?jwt=...",
                "externalSignerId": "aoijfnmo032q223",
                "redirectSettings": {
                  "redirectMode": "redirect",
                  "error": "https://idfy.io#error",
                  "cancel": "https://idfy.io#cancel",
                  "success": "https://idfy.io#success"
                },
                "signatureType": {
                  "mechanism": "pkisignature",
                  "onEacceptUseHandWrittenSignature": false
                },
                "order": 0,
                "required": false,
                "signUrlExpires": "2018-11-30T08:29:15.4650456Z"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "document_write"
            ]
          }
        ]
      }
    },
    "/signature/status/ping": {
      "get": {
        "tags": [
          "Status"
        ],
        "operationId": "Status_Ping",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/signature/themes/list/themes": {
      "get": {
        "tags": [
          "Themes"
        ],
        "summary": "List themes",
        "description": "This endpoint lists all the color themes you can use in our sign application",
        "operationId": "Themes_ListThemes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Default",
                  "Black",
                  "Blue",
                  "Cyan",
                  "Dark",
                  "Lime",
                  "Neutral",
                  "Pink",
                  "Purple",
                  "Red",
                  "Teal",
                  "Indigo",
                  "LightBlue",
                  "DeepPurple",
                  "Green",
                  "LightGreen",
                  "Yellow",
                  "Amber",
                  "Orange",
                  "DeepOrange",
                  "Brown",
                  "Gray",
                  "BlueGray"
                ],
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/signature/themes/list/spinners": {
      "get": {
        "tags": [
          "Themes"
        ],
        "summary": "List spinners",
        "description": "This endpoint lists all the spinners you can use in our sign application",
        "operationId": "Themes_ListSpinners",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Document",
                  "Classic",
                  "Cubes",
                  "Bounce"
                ],
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/notification/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List unhandled events",
        "description": "Retrieve up to 100 unhandled events for your account. After you retrieve this list the\r\n             events will be \"locked\" for 10 minutes to give you time to handle them. Please handle the events using one of the endpoints in this API to avoid retrieving the same events multiple times.",
        "operationId": "Events_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "description": "Filter by event type",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter the events by tags that was added to the document when you created it (comma-separated list)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventDto"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "c4b7d99f-5a05-45ad-9361-1b9a393ed10b",
                  "type": "document_created",
                  "payload": {
                    "documentId": "6102b4d9-253b-4497-b974-93861f2dda85",
                    "externalDocumentId": "8515000032"
                  },
                  "timestamp": "2018-06-12T11:20:22.4424805Z",
                  "accountId": "82d488ab-c48a-4b33-9921-049bb7f679d9"
                },
                {
                  "id": "1b09de25-abbc-4e53-ba69-4989117b2985",
                  "type": "document_created",
                  "payload": {
                    "documentId": "d1422195-3482-4cb7-838c-f08cf5148753",
                    "externalDocumentId": "8515000033"
                  },
                  "timestamp": "2018-06-12T11:20:22.4424805Z",
                  "accountId": "420d952b-0872-46fa-9071-4ca04ae2dfa5"
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/events/{eventId}/handle": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Handle event",
        "description": "Mark the status of an event as handled to make sure you dont retrieve this event again.",
        "operationId": "Events_Handle",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/events/handle": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Handle multiple events",
        "description": "Mark the status of a batch of events as handled to make sure you dont retrieve these events again.",
        "operationId": "Events_HandleMany",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "eventIds",
            "in": "body",
            "description": "List of event IDs to handle.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string",
                "example": "00000000-0000-0000-0000-000000000000"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/events/peek": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Peek events",
        "description": "Peek top 100 unhandled events regardless if they are locked or not. Don't use this endpoint to handle events.",
        "operationId": "Events_Peek",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "description": "Filter by event type",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter the events by tags that was added to the document when you created it (comma-separated list)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventDto"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "f784a37c-462b-4fe8-b07b-d7b7ace9cb34",
                  "type": "document_created",
                  "payload": {
                    "documentId": "dee849fe-4e30-4f2c-a79f-1301649e098c",
                    "externalDocumentId": "8515000032"
                  },
                  "timestamp": "2018-06-12T11:20:22.5049754Z",
                  "accountId": "b7a8229d-ec15-49ac-b8cc-ac8c302d6471"
                },
                {
                  "id": "da00ef25-e22f-4e83-8786-4fdbbed14fa4",
                  "type": "document_created",
                  "payload": {
                    "documentId": "93791443-b9f4-4368-b138-1b57766ffaaf",
                    "externalDocumentId": "8515000033"
                  },
                  "timestamp": "2018-06-12T11:20:22.5049754Z",
                  "accountId": "3c512a2a-1277-4bad-80ce-6e3823e3aeeb"
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/events/clear": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Clear all events",
        "description": "Clear all events for your account",
        "operationId": "Events_Clear",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/events/types": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List event types",
        "description": "Returns a list of all available event types.",
        "operationId": "Events_GetEventTypes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventTypeInfo"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "document_created",
                  "name": "Document created",
                  "description": "When a new document is created."
                },
                {
                  "id": "document_signed",
                  "name": "Document signed",
                  "description": "When a document is signed by all required signers."
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/events/mock": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Mock event",
        "description": "Creates a mock event with a sample payload. Can be used to test your event handling code.",
        "operationId": "Events_MockEvent",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MockEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventDto"
            },
            "examples": {
              "application/json": {
                "id": "15e10170-e8d7-4aac-b562-c6589c2c687f",
                "type": "document_created",
                "payload": {
                  "documentId": "3cf2c0b1-0385-4df9-9d66-cc2699db3a04",
                  "externalDocumentId": "8515000032"
                },
                "timestamp": "2018-06-12T11:20:22.5362278Z",
                "accountId": "b5bcb5b7-3cb0-4349-ad26-ed2fffe1e2b0",
                "tags": [
                  "mock"
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhook",
        "description": "Retrieves the details of a single webhook.",
        "operationId": "Webhooks_GetSingleWebhook",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            },
            "examples": {
              "application/json": {
                "id": 1,
                "name": "My webhook",
                "active": true,
                "events": [
                  "document_created",
                  "document_signed"
                ],
                "config": {
                  "url": "https://example.com/webhook-endpoint",
                  "secret": "********",
                  "deliveryLogging": "failed"
                },
                "createdAt": "2018-06-12T10:20:22.5518503Z",
                "updatedAt": "2018-06-12T11:20:22.5518503Z",
                "lastResponse": {
                  "code": 200,
                  "message": "OK",
                  "timestamp": "2018-06-12T10:50:22.5518503+00:00"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete webhook",
        "description": "Deletes the specified webhook.",
        "operationId": "Webhooks_DeleteWebhook",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook",
        "description": "Updates the specified webhook with the parameters passed.\r\nAny parameters not provided will be left unchanged.",
        "operationId": "Webhooks_UpdateWebhook",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updatedWebhook",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhooks",
        "description": "Returns a list of all your webhooks.",
        "operationId": "Webhooks_ListWebhooks",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebhookDto"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "My webhook",
                  "active": true,
                  "events": [
                    "document_created",
                    "document_signed"
                  ],
                  "config": {
                    "url": "https://example.com/webhook-endpoint",
                    "secret": "********",
                    "deliveryLogging": "failed"
                  },
                  "createdAt": "2018-06-12T10:20:22.5689956Z",
                  "updatedAt": "2018-06-12T11:20:22.5689956Z",
                  "lastResponse": {
                    "code": 200,
                    "message": "OK",
                    "timestamp": "2018-06-12T10:50:22.5689956+00:00"
                  }
                },
                {
                  "id": 2,
                  "name": "Hook for all events",
                  "active": false,
                  "events": [
                    "*"
                  ],
                  "config": {
                    "url": "https://example.com/another-webhook-endpoint",
                    "secret": "********",
                    "deliveryLogging": "never"
                  },
                  "createdAt": "2018-06-12T10:20:22.5689956Z",
                  "updatedAt": "2018-06-12T11:20:22.5689956Z",
                  "lastResponse": {
                    "code": 404,
                    "message": "Not Found",
                    "timestamp": "2018-06-12T10:50:22.5689956+00:00"
                  }
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "description": "Creates a new webhook.",
        "operationId": "Webhooks_CreateWebhook",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "newWebhook",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookCreateDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            },
            "examples": {
              "application/json": {
                "id": 1,
                "name": "My webhook",
                "active": true,
                "events": [
                  "document_created",
                  "document_signed"
                ],
                "config": {
                  "url": "https://example.com/webhook-endpoint",
                  "secret": "********",
                  "deliveryLogging": "failed"
                },
                "createdAt": "2018-06-12T10:20:22.8018498Z",
                "updatedAt": "2018-06-12T11:20:22.8018498Z",
                "lastResponse": {
                  "code": 200,
                  "message": "OK",
                  "timestamp": "2018-06-12T10:50:22.8018498+00:00"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/webhooks/{id}/ping": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Ping webhook",
        "description": "Triggers a ping event to be sent to the webhook.",
        "operationId": "Webhooks_PingWebhook",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/notification/webhooks/{id}/deliveries": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhook deliveries",
        "description": "Returns the 10 most recent delivery attempts for a single webhook.",
        "operationId": "Webhooks_GetWebhookDeliveries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookDeliveryDto"
            },
            "examples": {
              "application/json": {
                "id": "463d2f50-0795-4cfa-814d-b0face6ec312",
                "webhookId": 14,
                "eventId": "76035779-b244-482f-bc15-0eafeb54e052",
                "timestamp": "2018-06-12T11:20:22.8174754Z",
                "url": "https://example.com/webhook-endpoint",
                "elapsedMs": 190,
                "requestHeaders": {
                  "Content-Type": "application/json",
                  "X-Idfy-Signature": "def564b8df06ae55c788493cb414068b2cf017385d96ecb39aa3e844fdbbcdea"
                },
                "requestBody": {
                  "id": "244b8cef-1221-41c2-b64e-7b98ed31c94b",
                  "type": "document_created",
                  "payload": {
                    "documentId": "398826b4-e9ed-454f-a52d-b4d89157248b",
                    "externalDocumentId": "8436324"
                  },
                  "timestamp": "2018-06-12T11:20:22.8174754Z",
                  "accountId": "8377402f-3b72-48ed-bde4-c04734523c02",
                  "tags": null
                },
                "responseHeaders": {
                  "Cache-Control": "no-store, no-cache, max-age=0, private",
                  "Content-Length": "16"
                },
                "responseBody": {
                  "success": true
                },
                "responseStatusCode": 200,
                "responseMessage": "OK"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "event"
            ]
          }
        ]
      }
    },
    "/information/aml/b2c": {
      "get": {
        "tags": [
          "Aml"
        ],
        "summary": "B2C Identify and Screening Request",
        "description": "Person screening with data enhancement enabled for nationalities where data enhancement is provided. For other nationalities the data enhancement will be skipped\r\n**Required fields**: Name with either birthDate or ssn.",
        "operationId": "B2CIdentifyAndScreeningRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Complete name of person.  (Order of first and last names is not significant.)",
            "required": true,
            "type": "string"
          },
          {
            "name": "ssn",
            "in": "query",
            "description": "National Identification number. SSN or Birthdate are REQUIRED (Se NationalId format)",
            "required": false,
            "type": "string"
          },
          {
            "name": "birthDate",
            "in": "query",
            "description": "Date of birth. SSN or Birthdate are REQUIRED (format: yyyyMMdd)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nationality",
            "in": "query",
            "description": "Nationality of person (two letters ISO 3166 )",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language to use in response where applicable, optional. (two letters ISO 3166 )",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeReport",
            "in": "query",
            "description": "Create a PDF report with the data timestamp and sealed as future proof for the process.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "mode",
            "in": "query",
            "description": "What mode to use. When using identify and screening data enhancement is enabled for nationalities where data enhancement is provided.",
            "required": false,
            "type": "string",
            "enum": [
              "screen",
              "identify_and_screen"
            ]
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error (Miscellaneous)"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PersonAmlResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/aml/b2b": {
      "get": {
        "tags": [
          "Aml"
        ],
        "summary": "B2B Identify and Screening Request",
        "description": "Person screening with data enhancement enabled for nationalities where data enhancement is provided. For other nationalities the data enhancement will be skipped\r\n**Required fields**: Name with either birthDate or ssn.",
        "operationId": "B2BIdentifyAndScreeningRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Complete name of person.  (Order of first and last names is not significant.)",
            "required": true,
            "type": "string"
          },
          {
            "name": "regNo",
            "in": "query",
            "description": "Business registration number",
            "required": false,
            "type": "string"
          },
          {
            "name": "dunsNo",
            "in": "query",
            "description": "D-U-N-S number",
            "required": false,
            "type": "string"
          },
          {
            "name": "nationality",
            "in": "query",
            "description": "Nationality of person (two letters ISO 3166 )",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language to use in response where applicable, optional. (two letters ISO 3166 )",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeReport",
            "in": "query",
            "description": "Create a PDF report with the data timestamp and sealed as future proof for the process.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "mode",
            "in": "query",
            "description": "What mode to use. When using identify and screening data enhancement is enabled for nationalities where data enhancement is provided.",
            "required": false,
            "type": "string",
            "enum": [
              "screen",
              "identify_and_screen"
            ]
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error (Miscellaneous)"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyAmlResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/business/info/difi": {
      "get": {
        "tags": [
          "Business"
        ],
        "summary": "Retrieve information from Difi",
        "description": "Query company information from difi datahotell (official data from bronnoysund), supports query by name and/or orgnumber",
        "operationId": "RetrieveInformationFromDifi",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "orgnumber",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyname",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DifiResponse"
            }
          },
          "500": {
            "description": "Internal Server Error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/business/info/matchit": {
      "get": {
        "tags": [
          "Business"
        ],
        "summary": "Retrieve information from Matchit",
        "description": "Query company information from Matchit, Matchit uses existing information to build up their database. Supports query by name and/or orgnumber",
        "operationId": "RetrieveInformationFromMatchit",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "companyname",
            "in": "query",
            "description": "query param",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgnumber",
            "in": "query",
            "description": "query param",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error (Miscellaneous)"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompanyInformationResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/business/creditcheck": {
      "get": {
        "tags": [
          "Business"
        ],
        "summary": "Perform credit check",
        "description": "Run a credit check on a specified company, this check will not produce any duplicate letters.\r\n             A pdf report will be awailable to download the first 48 hours.",
        "operationId": "PerformCreditCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "orgnumber",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Override bisnode user Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Override bisnode password",
            "required": false,
            "type": "string"
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Default = \"NO\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeReport",
            "in": "query",
            "description": "Specify if you want a pdf report (defaults to false)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreditCheckCompanyResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/businessregistry": {
      "get": {
        "tags": [
          "BusinessRegistry"
        ],
        "summary": "List registration authorities",
        "description": "Retrieves a list of business registration authorities globally",
        "operationId": "ListRegistrationAuthorities",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/businessregistry/{authorityCode}": {
      "get": {
        "tags": [
          "BusinessRegistry"
        ],
        "summary": "Retrieve registration authority",
        "description": "Retrieves detailed information about a specific registration authority",
        "operationId": "RetrieveRegistrationAuthority",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "authorityCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/geodata/countries": {
      "get": {
        "tags": [
          "GeoData"
        ],
        "summary": "List countries",
        "description": "Lists all countries in the world with English name and ISO 3166-1 country code",
        "operationId": "ListCountries",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "Language for result. Defaults to English",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/geodata/countries/{countryCode}": {
      "get": {
        "tags": [
          "GeoData"
        ],
        "summary": "Retrieve country info",
        "description": "Retrieves basic geographical information about a country",
        "operationId": "RetrieveCountryInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "description": "ISO 3166-1 country code to look up",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for result. Defaults to English",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/geodata/countries/{countryCode}/subdivisions": {
      "get": {
        "tags": [
          "GeoData"
        ],
        "summary": "List country subdivisions",
        "description": "Retrieves a list over top level administrative subdivisions for a country with name and ISO 3166-2 region code",
        "operationId": "ListCountrySubdivisions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "description": "ISO 3166-1 country code to look up",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Language for result. Defaults to English",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/lei/{lei}/lookup": {
      "get": {
        "tags": [
          "Lei"
        ],
        "summary": "Retrieve LEI record",
        "description": "Retrieve the entity record for a given LEI",
        "operationId": "RetrieveLEIRecord",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "lei",
            "in": "path",
            "description": "LEI to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Not found"
          },
          "401": {
            "description": "Not authorized"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LeiRecord"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/lei/search": {
      "get": {
        "tags": [
          "Lei"
        ],
        "summary": "Query LEI records",
        "description": "QueryLeiRecords for LEI-registered entities with filters",
        "operationId": "QueryLEIRecords",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "countryCode",
            "in": "query",
            "description": "ISO 3166-1 alpha-2 country code for country entity is registered in",
            "required": false,
            "type": "string"
          },
          {
            "name": "lei",
            "in": "query",
            "description": "LEI of entity",
            "required": false,
            "type": "string"
          },
          {
            "name": "legalNameContains",
            "in": "query",
            "description": "Words included in entity's legal name",
            "required": false,
            "type": "string"
          },
          {
            "name": "legalNameEquals",
            "in": "query",
            "description": "Exact phrase included in entity's legal name",
            "required": false,
            "type": "string"
          },
          {
            "name": "registrationAuthorityEntityId",
            "in": "query",
            "description": "Entity Id provided by local business registry authority. For Norway this is the 'organisasjonsnummer' or tax identification number of the business",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Size of result set per request. Defaults to 25",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page number for result set. Defaults to 0",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "Not authorized"
          },
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResult"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/mobileinfo/authorize": {
      "post": {
        "tags": [
          "MobileInfo"
        ],
        "summary": "Mobile info",
        "description": "With this enpoints a user can fill out a form with one click. Per now the user have to be a telenor customer to retrieve information from this endpoint.\r\n           The url received here can be used in an iframe or a popupwindow, we will then deliever the user information with webmessageing.\r\n           <br /><br />\r\n           Flow:<br />\r\n           1) Get url from this endpoint<br />\r\n           2) Open a popup window or an iframe with this url as src<br />\r\n           3) User authenticates and gives you permission to retrieve user information<br />\r\n           4) User is redirected to the callback endpoint, we connect to the serviceprovider API and retrieves the information about the user<br />\r\n           5) We use webmessaging so you can collect the information",
        "operationId": "MobileInfo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "serviceProvider",
            "in": "query",
            "description": "The name of the mobile service provider (telenor)",
            "required": true,
            "type": "string",
            "enum": [
              "telenor"
            ]
          },
          {
            "name": "responseMode",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "popup",
              "iframe"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/person/creditcheck": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Run credit check",
        "description": "Credit check of a single person. The use of this will produce a duplicate letter to the person that is checked.\r\n             A pdf report will be awailable to download the first 48 hours.",
        "operationId": "RunCreditCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "socialSecurityNumber",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Override bisnode user Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Override bisnode password",
            "required": false,
            "type": "string"
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "Specify this to use electronic duplicate letters",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Specify this to use electronic duplicate letters",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeReport",
            "in": "query",
            "description": "Specify if you want a pdf report (defaults to false)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Person.CreditCheckPersonResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/person/info/matchit": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve person info through MatchIt",
        "description": "Returns (unofficial) person information, this method returns the best match from the query parameters served. The information is delievered by Matchit. \r\nValid query parameter combinations: name + dateOfBirth, name + socialSec, name + address, phonenumber",
        "operationId": "RetrievePersonInfoThroughMatchit",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "socialSec",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "phonenumber",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Person.PersonInformation"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/person/info/matchit/query": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "List person info through MatchIt by query",
        "description": "Returns (unofficial) person information, this method returns the 5 best matches from the query parameters served (freetext). The information is delievered by Matchit.",
        "operationId": "ListPersonInfoThroughMatchitByQuery",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "queryString",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person.PersonInformation"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/person/info/infotorget": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve person info through Infotorget",
        "description": "Run a query using social security number as parameter. The use of this requires username and password for Infortorget with the required permissions.\r\nValid query parameter combinations: \r\nsocialSecurityNumber, \r\nsocialSecurityNumber + firstName + lastName, \r\ndateOfBirth + firstName + lastName, \r\nfirstName + lastName + address + postalCode",
        "operationId": "RetrievePersonInfoThroughInfotorget",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Infotorget username",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Infotorget password",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Reason for request",
            "required": true,
            "type": "string"
          },
          {
            "name": "system",
            "in": "query",
            "description": "Your system name (Cannot contain any special characters or numbers)",
            "required": true,
            "type": "string"
          },
          {
            "name": "socialSecurityNumber",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateofbirth",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "address",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "postalcode",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Person.OfficialPersonRegistryResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/report/{reportId}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Retrive report",
        "description": "The pdf report will be awailable to download the first 48 hours.",
        "operationId": "RetriveReport",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "The reportId returned from the Get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PDF file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          },
          "404": {
            "description": "Data not found"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/signroles/rights": {
      "get": {
        "tags": [
          "SignatureRolesCheck"
        ],
        "summary": "Get rights",
        "description": "Check which person(s) that has the right to sign documents in an organization. You will receive lists with names and date of birth for the persons allowed for signing / prokura.",
        "operationId": "GetRights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "orgnumber",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "countrycode",
            "in": "query",
            "description": "Default value is \"NO\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SignatureRights"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          },
          "404": {
            "description": "Organization data not found"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/information/signroles/signature/check": {
      "post": {
        "tags": [
          "SignatureRolesCheck"
        ],
        "summary": "Check signatures / prokura",
        "description": "Check if received signatures and/or prokura are valid. This call allows you to do this check for multiple organizations simulataneously.\r\nA valid date of birth in this format [ddMMyy] is required. The persons last name plus minimum one other part of the signees name (first, (middle) and last name has to be separated by whitespace, comma or ;). \r\nA report that explains the validity of the signatures can be included.",
        "operationId": "CheckSignatures/Prokura",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "An array including all the organizations you want to check",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignatureCheckRequest"
            }
          },
          {
            "name": "includereport",
            "in": "query",
            "description": "Returns a pdf report explaining the validity of the checked signatures, default value is true",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "countrycode",
            "in": "query",
            "description": "Default value is \"NO\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SignatureStatusResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error (Miscellaneous)"
          },
          "404": {
            "description": "Organization data not found"
          }
        },
        "security": [
          {
            "oauth2": [
              "addons"
            ]
          }
        ]
      }
    },
    "/admin/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve account",
        "description": "Requires one of the following scopes: [root, account-read, dealer]",
        "operationId": "RetrieveAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "account_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update account",
        "description": "Requires one of the following scopes: [root, account-write, dealer]",
        "operationId": "UpdateAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountDetails",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "account_write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create account",
        "description": "Requires one of the following scopes: [dealer]",
        "operationId": "CreateAccount",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountDetails",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/account/logo": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update account logo",
        "description": "Upload / Update and resize account logo. Returns a url with your uploaded / resized logo. Requires one of the following scopes: [root, account-write, dealer]",
        "operationId": "UpdateAccountLogo",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accountLogo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountLogo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "account_write"
            ]
          }
        ]
      }
    },
    "/admin/account/styling": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update account styling",
        "description": "Upload / Update custom account css. Returns a url with your uploaded css. Requires one of the following scopes: [root, account-write, dealer]",
        "operationId": "UpdateAccountStyling",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "styling",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminStyling"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "account_write"
            ]
          }
        ]
      }
    },
    "/admin/account/disable": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Disable account",
        "description": "Set the account as incative / disabled. Requires one of the following scopes: [root, account-write, dealer]",
        "operationId": "DisableAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "account_write"
            ]
          }
        ]
      }
    },
    "/admin/account/list": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List accounts",
        "description": "List accounts you have access to",
        "operationId": "ListAccounts",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "filter.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.orgNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.uniCustomerNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.createdBefore",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.createdAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.lastModifiedBefore",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.lastModifiedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.dealerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.dealerReference",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.tags",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountListItem"
              }
            }
          }
        }
      }
    },
    "/admin/account/list/names": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List account names",
        "description": "List names of accounts you have access to",
        "operationId": "ListAccountNames",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountNameItem"
              }
            }
          }
        }
      }
    },
    "/admin/dealer/{dealerId}": {
      "get": {
        "tags": [
          "Dealer"
        ],
        "summary": "Retrieve dealer",
        "description": "Requires the following scope: [dealer]",
        "operationId": "RetrieveDealer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerId",
            "in": "path",
            "description": "Your Idfy dealer ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Dealer"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Dealer"
        ],
        "summary": "Update dealer",
        "description": "Update dealer credentials. Requires the following scope: [dealer]",
        "operationId": "UpdateDealer",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerId",
            "in": "path",
            "description": "Your Idfy dealer ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "dealer",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dealer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Dealer"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/dealer/{dealerId}/accounts": {
      "get": {
        "tags": [
          "Dealer"
        ],
        "summary": "List accounts for dealer",
        "description": "Requires the following scope: [dealer-read]",
        "operationId": "ListAccountsForDealer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerId",
            "in": "path",
            "description": "Your Idfy dealer ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountListItem"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/dealer/logo/{dealerId}": {
      "post": {
        "tags": [
          "Dealer"
        ],
        "summary": "Update dealer logo",
        "description": "Set dealer Logo. Requires the following scope: [dealer]",
        "operationId": "UpdateDealerLogo",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "dealerId",
            "in": "path",
            "description": "Your Idfy dealer ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "dealerLogo",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DealerLogo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "List account transactions",
        "description": "Returns a list of transactions for the requested account. Requires on of the following scopes: [dealer, account-read, root]",
        "operationId": "ListAccountTransactions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Define a year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Define a month (0 - 12), not required",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "getAsCsv",
            "in": "query",
            "description": "If this is set to true a csv file is returned insted of transactionlist",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "account_read"
            ]
          }
        ]
      }
    },
    "/admin/oauthclient/{clientId}": {
      "get": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "Retrieve OAuth client",
        "description": "Returns the requested oauth client with settings. Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "RetrieveOauthClient",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/OauthAPIClientResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "Delete OAuth client",
        "description": "Delete oauth API client.  Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "DeleteOauthClient",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      }
    },
    "/admin/oauthclient/list": {
      "get": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "List OAuth clients",
        "description": "Returns a list of all oauth clients registered on requested account. Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "ListOauthClients",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OauthClientListItemResponse"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      }
    },
    "/admin/oauthclient/enable": {
      "put": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "Enable OAuth client",
        "description": "Activates the requested oauth client. Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "EnableOauthClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OauthClientId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      }
    },
    "/admin/oauthclient/disable": {
      "put": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "Disable OAuth client",
        "description": "Deactivates the requested oauth client. Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "DisableOauthClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OauthClientId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      }
    },
    "/admin/oauthclient": {
      "put": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "Update OAuth client",
        "description": "Updates the requested oauth client on the requested account. Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "UpdateOauthClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "apiClient",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOauthAPIClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/OauthAPIClientResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OAuthAPIClient"
        ],
        "summary": "Create OAuth client",
        "description": "Create a new oauth api client for the requested account. Requires on of the following scopes: [dealer,  oauth-token, root]",
        "operationId": "CreateOauthClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "apiClient",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOauthAPIClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/OauthAPIClientResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "oauth_write"
            ]
          }
        ]
      }
    },
    "/admin/openid/{clientId}": {
      "get": {
        "tags": [
          "OpenID"
        ],
        "summary": "Retrieve OpenId client",
        "description": "Returns the requested oauth client with settings. Requires on of the following scopes: [dealer,  openid-client, root]",
        "operationId": "RetrieveOpenidClient",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/OpenIdClientResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "OpenID"
        ],
        "summary": "Delete OpenId client",
        "description": "Requires on of the following scopes: [dealer,  openid-client, root]",
        "operationId": "DeleteOpenidClient",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      }
    },
    "/admin/openid/list": {
      "get": {
        "tags": [
          "OpenID"
        ],
        "summary": "List OpenId clients for account",
        "description": "Returns a list of all oauth clients registered on requested account. Requires on of the following scopes: [dealer,  openid-client, root]",
        "operationId": "ListOpenidClientsForAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OauthClientListItemResponse"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      }
    },
    "/admin/openid/enable": {
      "put": {
        "tags": [
          "OpenID"
        ],
        "summary": "Enable OpenId client",
        "description": "Requires on of the following scopes: [dealer,  openid-client, root]",
        "operationId": "EnableOpenidClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OauthClientId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      }
    },
    "/admin/openid/disable": {
      "put": {
        "tags": [
          "OpenID"
        ],
        "summary": "Disable OpenId client",
        "description": "Deactivates the requested oauth client. Requires on of the following scopes: [dealer,  openid-client, root]",
        "operationId": "DisableOpenidClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OauthClientId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      }
    },
    "/admin/openid": {
      "put": {
        "tags": [
          "OpenID"
        ],
        "summary": "Update OpenId client",
        "description": "Updates the requested openid client on the requested account. Requires on of the following scopes: [dealer,  openid-client, root]",
        "operationId": "UpdateOpenidClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOpenIdClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/OpenIdClientResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "OpenID"
        ],
        "summary": "Create OpenId client",
        "description": "Create a new openId client for the requested account. Requires on of the following scopes: [root]",
        "operationId": "CreateOpenidClient",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpenIdClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/OpenIdClientResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth2": [
              "openid_write"
            ]
          }
        ]
      }
    },
    "/admin/template": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "List templates for account",
        "description": "Lists all the PDF template for the account",
        "operationId": "ListTemplatesForAccount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PdfTemplateListItem"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Create template",
        "description": "Creates a new PDF template",
        "operationId": "CreateTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Create PDF template body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePdfTemplate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PdfTemplate"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/template/{id}": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Retrieve template",
        "description": "Gets a PDF template",
        "operationId": "RetrieveTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The template ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/PdfTemplate"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Template"
        ],
        "summary": "Update template",
        "description": "Updates the given PDF template",
        "operationId": "UpdateTemplate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The template ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "model",
            "in": "body",
            "description": "The template body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePdfTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/PdfTemplate"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Template"
        ],
        "summary": "Delete template",
        "description": "Deletes the PDF template",
        "operationId": "DeleteTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The template ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/template/defaults/details": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Retrieve default details template",
        "description": "Gets the HTML used as a template for the details page if not overridden by user",
        "operationId": "RetrieveDefaultDetailsTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "Language of the details page",
            "required": true,
            "type": "string",
            "enum": [
              "en",
              "no",
              "sv",
              "da",
              "fi"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/template/defaults/coverpage": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Retrieve default coverpage template",
        "description": "Gets the HTML used as a template for the details page if not overridden by user",
        "operationId": "RetrieveDefaultCoverpageTemplate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/PdfTemplate"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/template/timezones": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Retrieve Timezone list",
        "description": "Lists all valid time zone",
        "operationId": "RetrieveTimezoneList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden (Access denied)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/template/preview/{id}": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Preview template from id",
        "description": "Preview your PAdES template use your own signature file or choose the xmlTemplate prefilled",
        "operationId": "PreviewTemplateFromId",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Preview model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateWithIdPreview"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Template Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "xmlTemplate",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SINGEL_BANKID_NO",
              "SINGEL_BANKID_SV",
              "SINGEL_NEMID",
              "MULTI_3_SIGNERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/template/preview": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Preview template from model",
        "description": "Preview your PAdES template use your own signature file or choose the xmlTemplate prefilled",
        "operationId": "PreviewTemplateFromModel",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Preview model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplatePreview"
            }
          },
          {
            "name": "xmlTemplate",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SINGEL_BANKID_NO",
              "SINGEL_BANKID_SV",
              "SINGEL_NEMID",
              "MULTI_3_SIGNERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/template/datasource": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Retrieve data source",
        "description": "Preview the underlaying template datasource",
        "operationId": "RetrieveDataSource",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "Preview model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplatePreview"
            }
          },
          {
            "name": "xmlTempalte",
            "in": "query",
            "description": "Prefilled XmlSignature templates",
            "required": false,
            "type": "string",
            "enum": [
              "SINGEL_BANKID_NO",
              "SINGEL_BANKID_SV",
              "SINGEL_NEMID",
              "MULTI_3_SIGNERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "x-nullable": true
            }
          }
        }
      }
    },
    "//jwt/validate": {
      "post": {
        "tags": [
          "Jwt"
        ],
        "summary": "Validate JWT",
        "operationId": "JwtValidatePost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ValidateJwtDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtValidationResultDto"
            }
          }
        }
      }
    },
    "/text/language-sets/{id}": {
      "get": {
        "tags": [
          "Language Sets"
        ],
        "summary": "Retrieve language set",
        "description": "Retrieves the details of a single language set.",
        "operationId": "RetrieveLanguageSet",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LanguageSetDTO"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Language Sets"
        ],
        "summary": "Delete language set",
        "description": "Deletes the specified language set.",
        "operationId": "DeleteLanguageSet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Language Sets"
        ],
        "summary": "Update language set",
        "description": "Updates the specified language set with the parameters passed.",
        "operationId": "UpdateLanguageSet",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "languageSetUpdate",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LanguageSetUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LanguageSetDTO"
            }
          }
        }
      }
    },
    "/text/languages/{id}": {
      "get": {
        "tags": [
          "Languages"
        ],
        "summary": "Retrieve language",
        "operationId": "RetrieveLanguage",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LanguageDTO"
            }
          }
        }
      }
    },
    "/text/languages": {
      "get": {
        "tags": [
          "Languages"
        ],
        "summary": "List all languages",
        "description": "Returns a list of all supported languages.",
        "operationId": "ListAllLanguages",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LanguageDTO"
            }
          }
        }
      }
    },
    "/text/language-sets": {
      "get": {
        "tags": [
          "Language Sets"
        ],
        "summary": "List language sets",
        "description": "Returns a list of all your language sets.",
        "operationId": "ListLanguageSets",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LanguageSetDTO"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Language Sets"
        ],
        "summary": "Create language set",
        "description": "Creates a new language set.",
        "operationId": "CreateLanguageSet",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "newLanguageSet",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LanguageSetCreateDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LanguageSetDTO"
            }
          }
        }
      }
    },
    "/text/language-sets/{languageSetId}/translations/{subjectId}/{languageCode}": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Retrieve translation",
        "description": "Retrieves the details of a single translation.",
        "operationId": "RetrieveTranslation",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "languageSetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subjectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "languageCode",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TranslationDTO"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Translations"
        ],
        "summary": "Update translation",
        "description": "Updates the specified translation with the parameters passed.",
        "operationId": "UpdateTranslation",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "languageSetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subjectId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "languageCode",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "translationUpdate",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TranslationUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/text/language-sets/{languageSetId}/translations": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "List translations",
        "description": "Returns a list of all your translations for the given language set.",
        "operationId": "ListTranslations",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "languageSetId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "translationKeyGroupId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Normal",
              "Minimal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TranslationDTO"
              }
            }
          }
        }
      }
    },
    "/merchant/signature": {
      "post": {
        "tags": [
          "Signature"
        ],
        "summary": "Create merchant signature",
        "operationId": "Signature_Sign",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/merchantSignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SignResponse"
            },
            "examples": {
              "application/json": {
                "signedData": "Base 64 encoded signed data",
                "auditLogReference": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                "signingFormat": "no_bankid_seid_sdo",
                "signCertificateBase64String": "Base 64 encoded certificate used to sign data",
                "transactionId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "merchantsign"
            ]
          }
        ]
      }
    },
    "/merchant/signature/{transactionId}": {
      "get": {
        "tags": [
          "Signature"
        ],
        "summary": "Retrieve transaction",
        "description": "Retrieves a single transaction.",
        "operationId": "Signature_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MerchantSignTransaction"
            },
            "examples": {
              "application/json": {
                "id": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
                "accountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                "auditLogReference": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                "externalReference": "Some external reference",
                "oauthClientId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
                "ipAddress": "192.168.0.1",
                "xslt": "Hashed xslt (if exists, sha256)",
                "dataToSign": "Hashed result (sha256)",
                "result": "Hashed result (sha256)",
                "certificate": "Base 64 encoded certificate used to sign data",
                "timeStamp": "2016-05-02T12:34:42+00:00"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "merchantsign"
            ]
          }
        ]
      }
    },
    "/merchant/signature/list": {
      "get": {
        "tags": [
          "Signature"
        ],
        "summary": "List transactions",
        "description": "Returns a list of transactions.",
        "operationId": "Signature_List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "oauthClientId",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date in ticks",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date in ticks",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MerchantSignTransaction"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
                  "accountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                  "auditLogReference": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                  "externalReference": "Some external reference",
                  "oauthClientId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
                  "ipAddress": "192.168.0.1",
                  "xslt": "Hashed xslt (if exists, sha256)",
                  "dataToSign": "Hashed result (sha256)",
                  "result": "Hashed result (sha256)",
                  "certificate": "Base 64 encoded certificate used to sign data",
                  "timeStamp": "2016-05-02T12:34:42+00:00"
                },
                {
                  "id": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
                  "accountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                  "auditLogReference": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                  "externalReference": "Some external reference",
                  "oauthClientId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
                  "ipAddress": "192.168.0.1",
                  "xslt": "Hashed xslt (if exists, sha256)",
                  "dataToSign": "Hashed result (sha256)",
                  "result": "Hashed result (sha256)",
                  "certificate": "Base 64 encoded certificate used to sign data",
                  "timeStamp": "2016-05-01T12:34:42+00:00"
                }
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "merchantsign"
            ]
          }
        ]
      }
    },
    "/merchant/signature/pades/{signedDocumentId}": {
      "get": {
        "tags": [
          "Signature"
        ],
        "summary": "Retrieve pades",
        "description": "Retrieve pades of signed pdf file. This endpoint will only work on the api.idfy.no endpoint",
        "operationId": "Signature_RetrievePades",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "signedDocumentId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "merchantsign"
            ]
          }
        ]
      }
    },
    "/validation/no/bankid/validate": {
      "post": {
        "tags": [
          "Norwegian BankID"
        ],
        "summary": "Validate SDO",
        "description": "This service validates the signatures on the SDOdata, to validate the SDO we use the validation component from BankID Norway. \r\nIn this endpoint you can also include the data from the original document to validate that they matches the SDO data, the same goes for the signatures. (Ssn is only available if you have an account and validate-ssn scope)",
        "operationId": "NoBankIDValidation_ValidateSDO",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateSDORequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateSDOResponse"
            },
            "examples": {
              "application/json": {
                "valid": true,
                "seal": {
                  "sealedBy": "Idfy Norge AS",
                  "sealedTimestamp": "2018-02-05T19:51:04.5516513+00:00",
                  "certificate": {
                    "issuerName": "CN=BankID Bankenes ID-tjeneste Bank CA 2,OU=988477052,O=Bankenes ID-tjeneste AS,C=NO",
                    "subjectName": "CN=Testin\\C3\\A5g\\, Test,O=BankID - Bankenes ID-tjeneste,C=NO,serialNumber=9238-1234-4-1665443",
                    "validFromDate": "2016-03-28T19:10:24",
                    "validToDate": "2018-03-28T19:10:24",
                    "versionNumber": "3",
                    "serialNumber": "4660808",
                    "keyAlgorithm": "RSA",
                    "keySize": "2048",
                    "uniqueId": "2352-1453-1-1634543",
                    "originator": "3625",
                    "bankName": "Sparebanken Vest",
                    "dateOfBirth": "1987-12-01T00:00:00",
                    "policyOid": "2.16.578.1.16.1.12.1.1",
                    "commonName": "Testesen, Test",
                    "signingCertficate": "MIIFkTCCA3mgAwIBAAEWFAEDSFgIDRx5IMA0GCSqGSIsdfwetwefrsaBAYTAptHOvOFsnrVRVC09bBzw",
                    "x509Certificate": {
                      "rawData": "worsgnh4w9oj430OÅIUNEAFOIUEANOdhgfIUHBIUYngfw9oersnmsdmpoålaewdrq=="
                    },
                    "keyUsage": "signing",
                    "signingTime": "2017-02-06T08:23:18",
                    "phoneNumber": "",
                    "certificateType": "NETCENTRIC_QUALIFIED_PERSONAL_CERTIFICATE"
                  },
                  "sealValid": true
                },
                "signers": [
                  {
                    "identificator": "12345678911",
                    "identificatorType": "SSN",
                    "valid": true,
                    "name": "Musk, Elon"
                  }
                ],
                "summary": "Summary text of the validation",
                "validationError": {},
                "auditId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609"
              }
            }
          }
        }
      }
    },
    "/validation/no/bankid/parse": {
      "post": {
        "tags": [
          "Norwegian BankID"
        ],
        "summary": "Parse and validate sdo",
        "description": "This service validates and parses the signatures on the SDOdata, to validate/parse the SDO we use the validation component from bankID norway. \r\nThis endpoint parses the SDO to readable data and provides you with information about the signatures and document.",
        "operationId": "NoBankIDValidation_ParseSDO",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParseSDORequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ParseSDOResponse"
            },
            "examples": {
              "application/json": {
                "auditId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
                "signersValid": true,
                "seal": {
                  "sealedBy": "Idfy Norge AS",
                  "sealedTimestamp": "2018-02-05T19:51:04.5829095+00:00",
                  "certificate": {
                    "issuerName": "CN=BankID Bankenes ID-tjeneste Bank CA 2,OU=988477052,O=Bankenes ID-tjeneste AS,C=NO",
                    "subjectName": "CN=Testin\\C3\\A5g\\, Test,O=BankID - Bankenes ID-tjeneste,C=NO,serialNumber=9238-1234-4-1665443",
                    "validFromDate": "2016-03-28T19:10:24",
                    "validToDate": "2018-03-28T19:10:24",
                    "versionNumber": "3",
                    "serialNumber": "4660808",
                    "keyAlgorithm": "RSA",
                    "keySize": "2048",
                    "uniqueId": "2352-1453-1-1634543",
                    "originator": "3625",
                    "bankName": "Sparebanken Vest",
                    "dateOfBirth": "1987-12-01T00:00:00",
                    "policyOid": "2.16.578.1.16.1.12.1.1",
                    "commonName": "Idfy Norge AS",
                    "signingCertficate": "MIIFkTCCA3mgAwIBAAEWFAEDSFgIDRx5IMA0GCSqGSIsdfwetwefrsaBAYTAptHOvOFsnrVRVC09bBzw",
                    "x509Certificate": {
                      "rawData": "worsgnh4w9oj430OÅIUNEAFOIUEANOdhgfIUHBIUYngfw9oersnmsdmpoålaewdrq=="
                    },
                    "keyUsage": "signing",
                    "signingTime": "2017-02-06T08:23:18",
                    "phoneNumber": "",
                    "certificateType": "NETCENTRIC_QUALIFIED_PERSONAL_CERTIFICATE"
                  },
                  "sealValid": true
                },
                "signers": [
                  {
                    "certificate": {
                      "issuerName": "CN=BankID Bankenes ID-tjeneste Bank CA 2,OU=988477052,O=Bankenes ID-tjeneste AS,C=NO",
                      "subjectName": "CN=Testin\\C3\\A5g\\, Test,O=BankID - Bankenes ID-tjeneste,C=NO,serialNumber=9238-1234-4-1665443",
                      "validFromDate": "2016-03-28T19:10:24",
                      "validToDate": "2018-03-28T19:10:24",
                      "versionNumber": "3",
                      "serialNumber": "4660808",
                      "keyAlgorithm": "RSA",
                      "keySize": "2048",
                      "uniqueId": "2352-1453-1-1634543",
                      "originator": "3625",
                      "bankName": "Sparebanken Vest",
                      "dateOfBirth": "1987-12-01T00:00:00",
                      "policyOid": "2.16.578.1.16.1.12.1.1",
                      "commonName": "Testesen, Test",
                      "signingCertficate": "MIIFkTCCA3mgAwIBAAEWFAEDSFgIDRx5IMA0GCSqGSIsdfwetwefrsaBAYTAptHOvOFsnrVRVC09bBzw",
                      "x509Certificate": {
                        "rawData": "worsgnh4w9oj430OÅIUNEAFOIUEANOdhgfIUHBIUYngfw9oersnmsdmpoålaewdrq=="
                      },
                      "keyUsage": "signing",
                      "signingTime": "2017-02-06T08:23:18",
                      "phoneNumber": "",
                      "certificateType": "NETCENTRIC_QUALIFIED_PERSONAL_CERTIFICATE"
                    },
                    "name": "Testesen, Test",
                    "dateOfBirth": "1987-12-01T00:00:00",
                    "pid": "2352-1453-1-1634543",
                    "ssn": "12345678911",
                    "signedTimestamp": "2017-02-06T08:23:18",
                    "valid": true,
                    "ocsp": "IUNBAUJNDSA23425IYBDSAFIUYBI...",
                    "environment": "production"
                  }
                ],
                "summary": "Validating summary",
                "validationError": {},
                "signedData": "P1RoaXMgdGV4dCBjYW4gYmUgc2lnbmVk"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "IdentificationResponse": {
      "description": "The reponse for the identity process. Contains users name, id number etc",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The fullname of the user as reported back from the IdentityProvider",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name of the user",
          "type": "string"
        },
        "MiddleName": {
          "description": "The middle name of the user (not always available)",
          "type": "string"
        },
        "LastName": {
          "description": "The last name of the user",
          "type": "string"
        },
        "DateOfBirth": {
          "description": "The users date of birth (not always available)",
          "type": "string"
        },
        "Status": {
          "description": "The status of the identification process. If not success the identification process is not completed.",
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "ERROR",
            "USERABORTED",
            "INVALIDATED",
            "TIMEOUT",
            "CREATED",
            "USERINITIATED"
          ],
          "type": "string"
        },
        "SocialSecurityNumber": {
          "description": "The social security number for the user (if allowed and if the GetSocialSecurityNumber is set to true in the request)",
          "type": "string"
        },
        "IdentityProviderUniqueId": {
          "description": "The uniqueID from the e-ID, this ID is unique for the user and is the same every time the user logs on. This is not a sensitiv ID and you could store this to identify the user in you database.\r\nRemark: The Swedish BankID do not have an unique ID.",
          "type": "string"
        },
        "IdentityProvider": {
          "description": "The identityprovider type (Norwegian BanKID, SwedishBankID, Nemid, etc)",
          "enum": [
            "UNKNOWN",
            "NO_BANKID_MOBILE",
            "NO_BANKID_WEB",
            "SWE_BANKID",
            "SWE_BANKID_MOBILE",
            "NO_BUYPASS",
            "DA_NEMID",
            "FI_TUPAS"
          ],
          "type": "string"
        },
        "Error": {
          "$ref": "#/definitions/Error",
          "description": "Information about error if the identification process failed. (Only set if an error occured, if not is null)"
        },
        "EnvironmentInfo": {
          "$ref": "#/definitions/EnvironmentInfo",
          "description": "Information about the users environment as seen by IdentiSign, can be used to compare with own data."
        },
        "MetaData": {
          "description": "A dicitonary with extra information from each identityprovider, and extra services. See developer documentation for more information",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true
        },
        "RequestId": {
          "description": "The RequestId",
          "type": "string"
        }
      },
      "example": {
        "Name": "Wayne, Bruce Thomas",
        "FirstName": "Bruce",
        "MiddleName": "Thomas",
        "LastName": "Wayne",
        "DateOfBirth": "311271",
        "Status": "SUCCESS",
        "SocialSecurityNumber": "23071212345",
        "IdentityProviderUniqueId": "9578-6000-4-48855",
        "IdentityProvider": "NO_BANKID_WEB",
        "EnvironmentInfo": {
          "UserAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Mobile/14A456",
          "IPAddress": "192.168.1.0"
        },
        "MetaData": {
          "no.personal.info": "JSON data"
        },
        "RequestId": "25191832985138881678wuuPNTgWL4Aq7RsIemzU8umZSsYNWcEFH1PbCVkdfHZjb6tfnyeTo4mDcvOoEP0z4zvvpcx0zoriRdYbETGLLwHJPkFXRjlRs0kpgeKvANFKkHA0CJGGFYQpbTfht08riaJcpKoRY4vHRJjANxfITbS7bYlFTFR37PEAqcsArnVrcuNyjnvp"
      },
      "x-nullable": true
    },
    "Error": {
      "description": "Error details information",
      "type": "object",
      "properties": {
        "NativeErrorCode": {
          "description": "The error code from the Identity provider",
          "type": "string"
        },
        "ErrorCode": {
          "description": "The error code for the error",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Error message",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "EnvironmentInfo": {
      "description": "Information aboute users enviroment",
      "type": "object",
      "properties": {
        "UserAgent": {
          "description": "The users user-agent (browser/device)",
          "type": "string"
        },
        "IPAddress": {
          "description": "The IP-address of the user",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "CreateIdentificationRequest": {
      "description": "Creates a Identity request",
      "required": [
        "ReturnUrls"
      ],
      "type": "object",
      "properties": {
        "IdentityProvider": {
          "description": "The identityprovider to use for the identification, if not set the user will get a list of all the e-ID assosiated with your account to choose from.",
          "enum": [
            "UNKNOWN",
            "NO_BANKID_MOBILE",
            "NO_BANKID_WEB",
            "SWE_BANKID",
            "SWE_BANKID_MOBILE",
            "NO_BUYPASS",
            "DA_NEMID",
            "FI_TUPAS"
          ],
          "type": "string"
        },
        "ReturnUrls": {
          "$ref": "#/definitions/ReturnUrls",
          "description": "The return urls to be redirected to after the identification process is done"
        },
        "iFrame": {
          "$ref": "#/definitions/iFrameSettings",
          "description": "If the identity process should be done in an iframe this settings object would have to set. The redirect is then done in javascript."
        },
        "Language": {
          "description": "The language to be used for the identification process, if not set the language of the users browser will be used.",
          "enum": [
            "NO",
            "EN",
            "SV",
            "DA",
            "FI"
          ],
          "type": "string"
        },
        "GetSocialSecurityNumber": {
          "description": "Should the socialsecuritynumber be fetched from the identityprovider? Beware that there is an extra cost of doing this every time and one need permission to do it.",
          "type": "boolean"
        },
        "PreFilledSocialSecurityNumber": {
          "description": "If this is specified then the client will be prefilled with this value. (supported by Norwegian BankID, NemID and Tupas)",
          "type": "string"
        },
        "PageTitle": {
          "description": "Title of the identification page (Used when redirecting on larger devices). Not used in iFrame mode",
          "type": "string"
        },
        "ExternalReference": {
          "description": "The merchants reference to the identification process, this will also be used to identify an identification in a detailed invoice. It is an advantage if this is unique for each API call.",
          "type": "string"
        },
        "Addonservices": {
          "description": "List of addon data that can be orderd. The result will be in MetaData list of the reponse",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true
        }
      },
      "example": {
        "IdentityProvider": "NO_BANKID_WEB",
        "ReturnUrls": {
          "Error": "https://secure.wayneenterprises.com/auth/error.aspx?status=[0]",
          "Abort": "https://secure.wayneenterprises.com/auth/abort.aspx?requestid=[1]&externalid=[2]",
          "Success": "https://secure.wayneenterprises.com/auth/success.aspx?requestid=[1]&externalid=[2]"
        },
        "iFrame": {
          "Domain": "secure.wayneenterprises.com",
          "WebMessaging": true
        },
        "Language": "NO",
        "GetSocialSecurityNumber": true,
        "ExternalReference": "765a7ed2d95c4000b14d7a48eb267546",
        "Addonservices": {
          "no.personal.info": ""
        }
      },
      "x-nullable": true
    },
    "ReturnUrls": {
      "description": "Return urls for the identity request",
      "required": [
        "Error",
        "Abort",
        "Success"
      ],
      "type": "object",
      "properties": {
        "Error": {
          "description": "The url to be redirected to if the identification process fails. This url supports the following placeholders: [0] statuscode, [1] requestId, [2] ExternalReference (your unique id).",
          "type": "string"
        },
        "Abort": {
          "description": "The url to be redirected to if the user aborts the identification process. This url supports the following placeholders: [1] requestId, [2] ExternalReference (your unique id).",
          "type": "string"
        },
        "Success": {
          "description": "The return urls to be redirected to after the identification process is a success. This url supports the following placeholders: [1] requestId, [2] ExternalReference (your unique id).",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "iFrameSettings": {
      "description": "iFrame settings\r\nREMARK! If using iframe the parent site have to be on https",
      "required": [
        "Domain"
      ],
      "type": "object",
      "properties": {
        "Domain": {
          "description": "The domain of the site hosting the iFrame, this is used for the CSP policy and must be correct.",
          "type": "string"
        },
        "WebMessaging": {
          "description": "Should WebMessaging be used for redirect of the iFrame parent, modern browsers have some issues with childs redirecting parents without the same origin. To use this include this script: https://signerecommon.blob.core.windows.net/files/signereid_webmessaging.js",
          "type": "boolean"
        },
        "Height": {
          "format": "int32",
          "description": "Height of the frame when used in iFrame.",
          "type": "integer"
        }
      },
      "x-nullable": true
    },
    "CreateIdentificationResponse": {
      "description": "The response of the Create Identitiy request",
      "type": "object",
      "properties": {
        "Url": {
          "description": "The url to use as src for iframe or to redirect the user to",
          "type": "string"
        },
        "RequestId": {
          "description": "Requestid used to get the reponse form server afterwards",
          "type": "string"
        }
      },
      "example": {
        "Url": "https://id-test.idfy.io/NoBankIDMobile/Start?sessionid=3HtyxmFpQ5zXQ5o7aBvTYpbq630jvpNlZe1TNwzSi81v2&providerId=c4ab63ae-81b6-49d2-b75c-a17301071188&iframe=False&webmessaging=False&language=NO&errorUrl=aHR0cHM6Ly9pZHRlc3Quc2lnbmVyZS5uby90ZXN0L2Vycm9yP3N0YXR1cz1bMF0%3D&",
        "RequestId": "25191832985138881678wuuPNTgWL4Aq7RsIemzU8umZSsYNWcEFH1PbCVkdfHZjb6tfnyeTo4mDcvOoEP0z4zvvpcx0zoriRdYbETGLLwHJPkFXRjlRs0kpgeKvANFKkHA0CJGGFYQpbTfht08riaJcpKoRY4vHRJjANxfITbS7bYlFTFR37PEAqcsArnVrcuNyjnvp"
      },
      "x-nullable": true
    },
    "IdentificationCompleteResponse": {
      "type": "object",
      "properties": {
        "Done": {
          "description": "Is the idenfication process done?",
          "type": "boolean"
        }
      },
      "x-nullable": true
    },
    "InvalidateIdentificationRequest": {
      "description": "Invalidates a identifyrequest so that it cannot be used twice.",
      "required": [
        "RequestId"
      ],
      "type": "object",
      "properties": {
        "RequestId": {
          "description": "The requestid of the identification process",
          "type": "string"
        }
      },
      "example": {
        "RequestId": "25191832985138881678wuuPNTgWL4Aq7RsIemzU8umZSsYNWcEFH1PbCVkdfHZjb6tfnyeTo4mDcvOoEP0z4zvvpcx0zoriRdYbETGLLwHJPkFXRjlRs0kpgeKvANFKkHA0CJGGFYQpbTfht08riaJcpKoRY4vHRJjANxfITbS7bYlFTFR37PEAqcsArnVrcuNyjnvp"
      },
      "x-nullable": true
    },
    "IdentificationLogItem": {
      "description": "An identification historic item",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The sessionID for the identitication",
          "type": "string"
        },
        "Name": {
          "description": "The fullname of the user as reported back from the IdentityProvider if the identification was a success",
          "type": "string"
        },
        "Status": {
          "description": "The status of the identification process. If not success the identification process is not completed.",
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "ERROR",
            "USERABORTED",
            "INVALIDATED",
            "TIMEOUT",
            "CREATED",
            "USERINITIATED"
          ],
          "type": "string"
        },
        "ClientIp": {
          "description": "The IP-address of the user",
          "type": "string"
        },
        "UserAgent": {
          "description": "The users user-agent (browser/device)",
          "type": "string"
        },
        "IdentityProviderType": {
          "description": "The identityprovider type (Norwegian BanKID, SwedishBankID, Nemid, etc)",
          "type": "string"
        },
        "Language": {
          "description": "The language  used for the identification process",
          "type": "string"
        },
        "Externalid": {
          "description": "The merchants reference to the identification process, this will also be used to identify an identification in a detailed invoice.",
          "type": "string"
        },
        "Errorcode": {
          "description": "The error code for the error",
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "description": "The timestamp for the creation of the identification process",
          "type": "string"
        },
        "iFrame": {
          "description": "Was an iFrame used",
          "type": "boolean"
        },
        "SocialSecurityNumber": {
          "description": "Was social securitynumber fetched",
          "type": "boolean"
        },
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "example": {
        "Id": "2519011552909132317BrJ6VqOrcBYfwmgQ2eypM5XP7DEbCm8",
        "Name": "Bruce Wayne",
        "Status": "SUCCESS",
        "ClientIp": "192.168.1.1",
        "UserAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
        "IdentityProviderType": "NO_BANKID_WEB",
        "Language": "NO",
        "Externalid": "gtWEH8euBHeSWPTcjwB0Bg5o1mjsH106wmjTDMxoFnadzvNSsnSSY0zbJTpy",
        "Timestamp": "2018-11-01T13:13:45.1346116Z",
        "iFrame": false,
        "SocialSecurityNumber": false,
        "AccountId": "00000000-0000-0000-0000-000000000000"
      },
      "x-nullable": true
    },
    "ListResult[IdentificationLogItem]": {
      "type": "object",
      "properties": {
        "NextLink": {
          "description": "Link to the next results if not set there are less then the return limit of 1000",
          "type": "string"
        },
        "TotalLinks": {
          "format": "int32",
          "description": "The total amount of links (pages) for the list",
          "type": "integer"
        },
        "List": {
          "description": "List of results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentificationLogItem"
          }
        }
      },
      "example": {
        "NextLink": "https://id.signere.no/history/1dd0f6f9-4221-4604-8516-a30f00aef4e5/filter?year=2017&month=0&day=0&skip=1",
        "TotalLinks": 5,
        "List": [
          {
            "Id": "2519011552909132317BrJ6VqOrcBYfwmgQ2eypM5XP7DEbCm8",
            "Name": "Bruce Wayne",
            "Status": "SUCCESS",
            "ClientIp": "192.168.1.1",
            "UserAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
            "IdentityProviderType": "NO_BANKID_WEB",
            "Language": "NO",
            "Externalid": "gtWEH8euBHeSWPTcjwB0Bg5o1mjsH106wmjTDMxoFnadzvNSsnSSY0zbJTpy",
            "Timestamp": "2018-11-01T13:13:45.1501963Z",
            "iFrame": false,
            "SocialSecurityNumber": false,
            "AccountId": "00000000-0000-0000-0000-000000000000"
          },
          {
            "Id": "2519011552909132317BrJ6VqOrcBYfwmgQ2eypM5XP7DEbCm8",
            "Name": "Joker",
            "Status": "ERROR",
            "ClientIp": "192.168.1.1",
            "UserAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
            "IdentityProviderType": "FI_TUPAS",
            "Language": "NO",
            "Externalid": "gtWEH8euBHeSWPTcjwB0Bg5o1mjsH106wmjTDMxoFnadzvNSsnSSY0zbJTpy",
            "Errorcode": "TIMEOUT",
            "Timestamp": "2018-11-01T13:13:45.1501963Z",
            "iFrame": false,
            "SocialSecurityNumber": false,
            "AccountId": "00000000-0000-0000-0000-000000000000"
          }
        ]
      },
      "x-nullable": true
    },
    "AttachmentRequestWrapper": {
      "required": [
        "fileName",
        "title",
        "data"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "description": "Filename with file extension. <span style=\"color:red;\">We only support PDF for attachments, set `convertToPdf` to `true` if you have a convertible file type.</span>",
          "type": "string"
        },
        "title": {
          "description": "The title of the attachment which will be presented to the user.",
          "type": "string"
        },
        "data": {
          "description": "Base64-encoded attachment (UTF-8-encoded)",
          "type": "string"
        },
        "convertToPdf": {
          "description": "Determines if the attachment should be converted to PDF. See our documentation for supported file types.",
          "type": "boolean"
        },
        "signers": {
          "description": "An optional list of signers that should be able to see / sign the attachment.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "description": {
          "description": "An optional description of the attachment.",
          "type": "string"
        },
        "type": {
          "description": "The type of attachment. Choose between the following:\r\n* <b>show_accept:</b> The signer will see the attachment before signing the main document (is default now)\r\n* <b>read_accept:</b> The signer have to see the entire document before they can continue, \r\n* <b>sign:</b> The signer has to sign the attachment (extra cost per signature)",
          "enum": [
            "show_accept",
            "read_accept",
            "sign"
          ],
          "type": "string"
        }
      },
      "example": {
        "fileName": "Attachment1.pdf",
        "title": "Attachment 1 - Type description",
        "data": "Base 64 encoded pdf",
        "convertToPdf": false,
        "description": "This attachment describes bla bla bla...",
        "type": "show_accept"
      }
    },
    "AttachmentResponse": {
      "required": [
        "fileName",
        "title",
        "data"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The attachment's unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "fileName": {
          "description": "Filename with file extension. <span style=\"color:red;\">We only support PDF for attachments, set `convertToPdf` to `true` if you have a convertible file type.</span>",
          "type": "string"
        },
        "title": {
          "description": "The title of the attachment which will be presented to the user.",
          "type": "string"
        },
        "data": {
          "description": "Base64-encoded attachment (UTF-8-encoded)",
          "type": "string"
        },
        "convertToPdf": {
          "description": "Determines if the attachment should be converted to PDF. See our documentation for supported file types.",
          "type": "boolean"
        },
        "signers": {
          "description": "An optional list of signers that should be able to see / sign the attachment.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "description": {
          "description": "An optional description of the attachment.",
          "type": "string"
        },
        "type": {
          "description": "The type of attachment. Choose between the following:\r\n* <b>show_accept:</b> The signer will see the attachment before signing the main document (is default now)\r\n* <b>read_accept:</b> The signer have to see the entire document before they can continue, \r\n* <b>sign:</b> The signer has to sign the attachment (extra cost per signature)",
          "enum": [
            "show_accept",
            "read_accept",
            "sign"
          ],
          "type": "string"
        }
      }
    },
    "AttachmentListItem": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The attachment's unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "title": {
          "description": "The title of the attachment which will be presented to the user.",
          "type": "string"
        },
        "description": {
          "description": "An optional description of the attachment.",
          "type": "string"
        },
        "type": {
          "description": "The type of attachment.",
          "enum": [
            "show_accept",
            "read_accept",
            "sign"
          ],
          "type": "string"
        },
        "fileName": {
          "description": "Filename with file extension. <span style=\"color:red;\">We only support PDF for attachments, set `convertToPdf` to `true` if you have a convertible file type.</span>",
          "type": "string"
        }
      }
    },
    "UpdateAttachmentRequestWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of attachment. Choose between the following:\r\n* <b>show_accept:</b> The signer will see the attachment before signing the main document (is default now)\r\n* <b>read_accept:</b> The signer have to see the entire document before they can continue, \r\n* <b>sign:</b> The signer has to sign the attachment (extra cost per signature)",
          "enum": [
            "show_accept",
            "read_accept",
            "sign"
          ],
          "type": "string"
        },
        "fileName": {
          "description": "Filename with file extension. <span style=\"color:red;\">We only support PDF for attachments, set `convertToPdf` to `true` if you have a convertible file type.</span>",
          "type": "string"
        },
        "title": {
          "description": "The title of the attachment which will be presented to the user.",
          "type": "string"
        },
        "data": {
          "description": "Base64-encoded attachment (UTF-8-encoded)",
          "type": "string"
        },
        "convertToPdf": {
          "description": "Determines if the attachment should be converted to PDF. See our documentation for supported file types.",
          "type": "boolean"
        },
        "signers": {
          "description": "An optional list of signers that should be able to see / sign the attachment.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "description": {
          "description": "An optional description of the attachment.",
          "type": "string"
        }
      },
      "example": {
        "type": "show_accept",
        "fileName": "Attachment1.pdf",
        "title": "Attachment 1 - Type description",
        "data": "Base 64 encoded pdf",
        "convertToPdf": false,
        "description": "This attachment describes bla bla bla..."
      }
    },
    "CreateDocumentRequestWrapper": {
      "required": [
        "signers",
        "title",
        "externalId",
        "dataToSign",
        "contactDetails"
      ],
      "type": "object",
      "properties": {
        "signers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignerWrapper"
          }
        },
        "title": {
          "description": "The title of the document which will be presented to the user.",
          "maxLength": 300,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "The description of the document.",
          "type": "string"
        },
        "externalId": {
          "description": "Your reference to this document.",
          "maxLength": 255,
          "minLength": 4,
          "type": "string"
        },
        "dataToSign": {
          "$ref": "#/definitions/DataToSign"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetails"
        },
        "notification": {
          "$ref": "#/definitions/Notification"
        },
        "advanced": {
          "$ref": "#/definitions/Advanced"
        }
      },
      "example": {
        "signers": [
          {
            "externalSignerId": "uoiahsd321982983jhrmnec2wsadm32",
            "redirectSettings": {
              "redirectMode": "donot_redirect"
            },
            "signatureType": {
              "mechanism": "pkisignature",
              "onEacceptUseHandWrittenSignature": false
            },
            "ui": {
              "language": "EN",
              "dialogs": {
                "before": {
                  "useCheckBox": false,
                  "title": "Info",
                  "message": "Please read the contract on the next pages carefully. Pay some extra attention to paragraph 5."
                }
              },
              "styling": {
                "colorTheme": "Pink",
                "spinner": "Cubes",
                "hideTopBar": false
              }
            },
            "order": 0,
            "required": false
          }
        ],
        "title": "Test document",
        "description": "This is an important document",
        "externalId": "ae7b9ca7-3839-4e0d-a070-9f14bffbbf55",
        "dataToSign": {
          "base64Content": "VGhpcyB0ZXh0IGNhbiBzYWZlbHkgYmUgc2lnbmVk",
          "fileName": "sample.txt",
          "convertToPDF": false
        },
        "contactDetails": {
          "email": "test@test.com",
          "url": "https://idfy.io"
        },
        "advanced": {
          "tags": [
            "develop",
            "fun_with_documents"
          ],
          "attachments": 0,
          "requiredSignatures": 0,
          "getSocialSecurityNumber": false,
          "timeToLive": {
            "deadline": "2018-11-28T08:29:15.2645894Z",
            "deleteAfterHours": 1
          }
        }
      }
    },
    "SignerWrapper": {
      "required": [
        "externalSignerId",
        "redirectSettings",
        "signatureType"
      ],
      "type": "object",
      "properties": {
        "externalSignerId": {
          "description": "Your reference for the signer.",
          "maxLength": 255,
          "minLength": 4,
          "type": "string"
        },
        "redirectSettings": {
          "$ref": "#/definitions/RedirectSettings",
          "description": "Return URLs and domain settings"
        },
        "signatureType": {
          "$ref": "#/definitions/SignatureType"
        },
        "signerInfo": {
          "$ref": "#/definitions/SignerInfo",
          "description": "Define the signers name, mobile and email if you are using notifications"
        },
        "authentication": {
          "$ref": "#/definitions/Authentication",
          "description": "Do you want the signer to authenticate before they can see the document?"
        },
        "extraInfo": {
          "$ref": "#/definitions/ExtraInfoSignerRequest",
          "description": "Coming soon: Do you want to collect extra info about this specific signer? (for example personal information)"
        },
        "ui": {
          "$ref": "#/definitions/UI"
        },
        "notifications": {
          "$ref": "#/definitions/Notifications"
        },
        "tags": {
          "description": "Coming soon.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "description": "Optional order of signing for the signer.",
          "type": "integer"
        },
        "required": {
          "description": "Determines if the signer is required to sign the document before other signers. Any other signers will not be allowed to sign before all required signers have signed the document.",
          "type": "boolean"
        },
        "signUrlExpires": {
          "format": "date-time",
          "description": "The time at which the signature URL expires (ISO 8601). Specify this if you want a limited time-to-live for the URL. Defaults to the lifetime of the document.",
          "type": "string"
        }
      },
      "example": {
        "externalSignerId": "uoiahsd321982983jhrmnec2wsadm32",
        "redirectSettings": {
          "redirectMode": "donot_redirect"
        },
        "signatureType": {
          "mechanism": "pkisignature",
          "onEacceptUseHandWrittenSignature": false
        },
        "ui": {
          "language": "EN",
          "dialogs": {
            "before": {
              "useCheckBox": false,
              "title": "Info",
              "message": "Please read the contract on the next pages carefully. Pay some extra attention to paragraph 5."
            }
          },
          "styling": {
            "colorTheme": "Pink",
            "spinner": "Cubes",
            "hideTopBar": false
          }
        },
        "order": 0,
        "required": false
      }
    },
    "DataToSign": {
      "description": "The data that will be signed.",
      "required": [
        "base64Content",
        "fileName"
      ],
      "type": "object",
      "properties": {
        "base64Content": {
          "description": "Base64-encoded string of the document, UTF-8-encoded.",
          "type": "string"
        },
        "base64ContentStyleSheet": {
          "description": "Stylesheet to be included if you are uploading XML.",
          "type": "string"
        },
        "fileName": {
          "description": "The document file name. Must include a valid file extension (.pdf, .xml, .txt, .doc, .docx, .rtf, .ott, odt).",
          "maxLength": 100,
          "minLength": 3,
          "type": "string"
        },
        "convertToPDF": {
          "description": "Determines if the document should be converted to PDF. Supported formats are word documents, rich text format, and OpenOffice (.doc, .docx, .rtf, .odt, .ott).\r\nRemark: When using this, the converted document (and not the original) is the one that will be signed.",
          "type": "boolean"
        },
        "packaging": {
          "$ref": "#/definitions/Packaging"
        }
      }
    },
    "ContactDetails": {
      "description": "The company's contact information.",
      "required": [
        "email"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the company.",
          "type": "string"
        },
        "phone": {
          "description": "The phone number of the company.",
          "type": "string"
        },
        "email": {
          "description": "The email address of the company.",
          "type": "string"
        },
        "url": {
          "description": "The URL to the company's website.",
          "type": "string"
        }
      }
    },
    "Notification": {
      "description": "Settings for custom notification texts. Remark: Also requires you to setup notifications for each signer you want to notify.",
      "type": "object",
      "properties": {
        "signRequest": {
          "$ref": "#/definitions/SignRequest"
        },
        "reminder": {
          "$ref": "#/definitions/Reminder"
        },
        "signatureReceipt": {
          "$ref": "#/definitions/SignatureReceipt"
        },
        "finalReceipt": {
          "$ref": "#/definitions/FinalReceipt"
        },
        "canceledReceipt": {
          "$ref": "#/definitions/CanceledReceipt"
        },
        "expiredReceipt": {
          "$ref": "#/definitions/ExpiredReceipt"
        }
      }
    },
    "Advanced": {
      "description": "Optional settings for advanced configuration.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "A list of tags to add to the document. These tags can be used to query for document data and will also be added to all events that are triggered for the document.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attachments": {
          "format": "int32",
          "description": "The number of attachments this document will have. Attachments can be added [here](#operation/Attachment_Create) after the document is created.\r\n<span style=\"color: red\">If you set this value to 3, you MUST upload 3 attachments before anyone can sign the document.</span>",
          "type": "integer"
        },
        "requiredSignatures": {
          "format": "int32",
          "description": "The number of signatures required before the document can be sealed and marked as completed.",
          "type": "integer"
        },
        "createdByApplication": {
          "description": "The name of the application that created the document. Used for Idfy statistics.",
          "type": "string"
        },
        "getSocialSecurityNumber": {
          "description": "Determines if the social security number of the signers should be retrieved after a successful signature.\r\nRequires a certificate with permission to retrieve SSN.",
          "type": "boolean"
        },
        "extraInfo": {
          "$ref": "#/definitions/ExtraInfoDocumentRequest"
        },
        "security": {
          "$ref": "#/definitions/Security"
        },
        "timeToLive": {
          "$ref": "#/definitions/TimeToLive"
        },
        "departmentId": {
          "description": "The department ID to mark the invoice with.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "RedirectSettings": {
      "description": "Settings for redirect.",
      "required": [
        "redirectMode"
      ],
      "type": "object",
      "properties": {
        "redirectMode": {
          "description": "Defines the redirect mode to use for the signer.",
          "enum": [
            "donot_redirect",
            "redirect",
            "iframe_with_webmessaging",
            "iframe_with_redirect",
            "iframe_with_redirect_and_webmessaging"
          ],
          "type": "string"
        },
        "domain": {
          "description": "The domain your website is hosted on.  <span style=\"color: red;\">Required if you specify one of the iframe redirect modes for the signer.</span>",
          "type": "string"
        },
        "error": {
          "description": "The URL that the signer is redirected to if something goes wrong. <span style=\"color: red;\">Required if you use redirect for the signer.</span>",
          "type": "string"
        },
        "cancel": {
          "description": "The URL that the signer is redirected to if the signing is cancelled. <span style=\"color: red;\">Required if you use redirect for the signer.</span>",
          "type": "string"
        },
        "success": {
          "description": "The URL that the signer is redirected to after a successful signing. <span style=\"color: red;\">Required if you use redirect for the signer.</span>",
          "type": "string"
        }
      }
    },
    "SignatureType": {
      "description": "Settings for the allowed signature methods.",
      "required": [
        "mechanism"
      ],
      "type": "object",
      "properties": {
        "signatureMethods": {
          "description": "A list of signature methods that the signer is allowed to use when signing the document.\r\nIf not specified, all available signature methods for your Idfy account will be displayed to the signer.",
          "type": "array",
          "items": {
            "enum": [
              "no_bankid",
              "no_bankid_mobile",
              "no_bankid_netcentric",
              "no_buypass",
              "no_commfides",
              "se_bankid",
              "dk_nemid",
              "fi_tupas",
              "fi_mobiilivarmenne",
              "nl_digid",
              "es_dni",
              "ee_esteid",
              "mobile_connect",
              "sms_otp",
              "identification_papers",
              "social",
              "unknown"
            ],
            "type": "string"
          }
        },
        "mechanism": {
          "enum": [
            "pkisignature",
            "eaccept"
          ],
          "type": "string"
        },
        "onEacceptUseHandWrittenSignature": {
          "type": "boolean"
        }
      }
    },
    "SignerInfo": {
      "description": "Information about the signer.",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "The signer's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "The signer's last name.",
          "type": "string"
        },
        "email": {
          "description": "The signer's email adress. Define this if you are using notifications.",
          "type": "string"
        },
        "socialSecurityNumber": {
          "description": "Prefilled social security number.",
          "type": "string"
        },
        "mobile": {
          "$ref": "#/definitions/Mobile"
        },
        "organizationInfo": {
          "$ref": "#/definitions/OrganizationInfo"
        }
      }
    },
    "Authentication": {
      "description": "Authentication settings for the signer.",
      "type": "object",
      "properties": {
        "mechanism": {
          "description": "Set the type of authentication you want before the user is allowed to view the document(s), sms otp will use the mobile number specified in signerinfo",
          "enum": [
            "off",
            "eid",
            "smsOtp",
            "eidAndSmsOtp"
          ],
          "type": "string"
        },
        "socialSecurityNumber": {
          "description": "The signer's social security number.",
          "type": "string"
        },
        "signatureMethodUniqueId": {
          "description": "The signer's unique ID for a signature method (for example the Norwegian BankID PID).",
          "type": "string"
        }
      }
    },
    "ExtraInfoSignerRequest": {
      "description": "Settings for extra information to collect about the signer.",
      "type": "object",
      "properties": {
        "types": {
          "description": "A list of the extra information you want to order. Certain types require special properties, see documentation for more information. Additional cost will incur (with the exception of Difi company info).",
          "type": "array",
          "items": {
            "enum": [
              "personalInfo",
              "companyInfo",
              "companyInfoAutoComplete",
              "personalCreditCheck",
              "businessCreditCheck",
              "officialPersonalInfo",
              "bankIDApisAmlPersonSanctionPep",
              "bankIDApisAmlCurrentAddress"
            ],
            "type": "string"
          }
        },
        "specialProperties": {
          "description": "A set of key-value pairs with special properties, see documentation for more information.",
          "type": "object",
          "properties": {
            "bisnodeUsername": {
              "type": "string"
            },
            "bisnodePassword": {
              "type": "string"
            },
            "includePdfReports": {
              "type": "string"
            },
            "officialUsername": {
              "type": "string"
            },
            "officialPassword": {
              "type": "string"
            },
            "officialReason": {
              "type": "string"
            },
            "officialSystem": {
              "type": "string"
            },
            "amlNationality": {
              "type": "string"
            },
            "amlLanguage": {
              "type": "string"
            },
            "amlMode": {
              "type": "string"
            }
          }
        }
      }
    },
    "UI": {
      "description": "UI settings for the signature process.",
      "type": "object",
      "properties": {
        "language": {
          "description": "The signer's preferred language. This language will be used when signing the document and in email/SMS notifications.\r\n///",
          "enum": [
            "EN",
            "NO",
            "DA",
            "SV",
            "FI"
          ],
          "type": "string"
        },
        "dialogs": {
          "$ref": "#/definitions/Dialogs"
        },
        "styling": {
          "$ref": "#/definitions/Styling"
        }
      }
    },
    "Notifications": {
      "description": "Email/SMS notification settings for the signer.",
      "type": "object",
      "properties": {
        "setup": {
          "description": "Notification setup for the signer. All notifications defaults to `\"off\"`.",
          "type": "object",
          "properties": {
            "request": {
              "enum": [
                "off",
                "sendSms",
                "sendEmail",
                "sendBoth"
              ],
              "type": "string"
            },
            "reminder": {
              "enum": [
                "off",
                "sendSms",
                "sendEmail",
                "sendBoth"
              ],
              "type": "string"
            },
            "signatureReceipt": {
              "enum": [
                "off",
                "sendSms",
                "sendEmail",
                "sendBoth"
              ],
              "type": "string"
            },
            "finalReceipt": {
              "enum": [
                "off",
                "sendSms",
                "sendEmail",
                "sendBoth"
              ],
              "type": "string"
            },
            "canceled": {
              "enum": [
                "off",
                "sendSms",
                "sendEmail",
                "sendBoth"
              ],
              "type": "string"
            },
            "expired": {
              "enum": [
                "off",
                "sendSms",
                "sendEmail",
                "sendBoth"
              ],
              "type": "string"
            }
          }
        },
        "mergeFields": {
          "description": "If you create your own notifications texts (See the root object -&gt; Notification), you can create your own merge fields with your own keys. \r\nYou can then specify the text you want to insert in these fields per signer in this dictionary. Set the dictionary key to the same value as the merge field value in your notification text, and the value to the text you want us to merge in.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Packaging": {
      "description": "Settings for packaging of the signed document.",
      "type": "object",
      "properties": {
        "signaturePackageFormats": {
          "description": "A list of signature formats that will be created and made available for download after the document is signed.\r\nSee our documentation for more information about these formats. The native package format is included automatically (i.e. BankID SDO).",
          "type": "array",
          "items": {
            "enum": [
              "xades",
              "pades",
              "no_bankid_pades"
            ],
            "type": "string"
          }
        },
        "padesSettings": {
          "$ref": "#/definitions/PadesSettings"
        }
      }
    },
    "SignRequest": {
      "description": "Email/SMS notifications reminding the signers that they have received a new document to sign.",
      "type": "object",
      "properties": {
        "includeOriginalFile": {
          "description": "Determines if you want to include the unsigned main document as an attachment to the email notification.",
          "type": "boolean"
        },
        "email": {
          "description": "A list of custom email texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "sms": {
          "description": "A list of custom SMS texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMS"
          }
        }
      }
    },
    "Reminder": {
      "description": "Email/SMS notifications reminding the signers that they have an unsigned document.",
      "required": [
        "chronSchedule"
      ],
      "type": "object",
      "properties": {
        "chronSchedule": {
          "description": "Defines a chron expression that control the interval of the reminders (Use UTC time). We use Quartz cron expressions, read more about it here: http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html.",
          "type": "string"
        },
        "maxReminders": {
          "format": "int32",
          "description": "The maximum number of reminders to be sent for each signer.",
          "type": "integer"
        },
        "email": {
          "description": "A list of custom email texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "sms": {
          "description": "A list of custom SMS texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMS"
          }
        }
      }
    },
    "SignatureReceipt": {
      "description": "Email/SMS notifications as a receipt for a successful signature.",
      "type": "object",
      "properties": {
        "email": {
          "description": "A list of custom email texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "sms": {
          "description": "A list of custom SMS texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMS"
          }
        }
      }
    },
    "FinalReceipt": {
      "description": "Email/SMS notifications as a receipt when a document has received all required signatures.",
      "type": "object",
      "properties": {
        "includeSignedFile": {
          "description": "Determines if you want to include the signed main document as an attachment to the email notification. Not recommended for sensitive documents.",
          "type": "boolean"
        },
        "email": {
          "description": "A list of custom email texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "sms": {
          "description": "A list of custom SMS texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMS"
          }
        }
      }
    },
    "CanceledReceipt": {
      "description": "Email/SMS notifications when a document has been cancelled and can no longer be signed.",
      "type": "object",
      "properties": {
        "email": {
          "description": "A list of custom email texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "sms": {
          "description": "A list of custom SMS texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMS"
          }
        }
      }
    },
    "ExpiredReceipt": {
      "description": "Email/SMS notifications when a document has expired and can no longer be signed.",
      "type": "object",
      "properties": {
        "email": {
          "description": "A list of custom email texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "sms": {
          "description": "A list of custom SMS texts to use for the notification. Default texts will be used if not specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SMS"
          }
        }
      }
    },
    "ExtraInfoDocumentRequest": {
      "description": "Settings for extra information to collect about the document (e.g. prokura information).",
      "type": "object",
      "properties": {
        "types": {
          "description": "A list of the extra information you want to order. Certain types require special properties, see documentation for more information. Additional cost will incur (with the exception of Difi company info).",
          "type": "array",
          "items": {
            "enum": [
              "rightsAndProkura"
            ],
            "type": "string"
          }
        },
        "specialProperties": {
          "description": "A set of key-value pairs with special properties, see documentation for more information.",
          "type": "object",
          "properties": {
            "bisnodeUsername": {
              "type": "string"
            },
            "bisnodePassword": {
              "type": "string"
            },
            "includePdfReports": {
              "type": "string"
            },
            "officialUsername": {
              "type": "string"
            },
            "officialPassword": {
              "type": "string"
            },
            "officialReason": {
              "type": "string"
            },
            "officialSystem": {
              "type": "string"
            },
            "amlNationality": {
              "type": "string"
            },
            "amlLanguage": {
              "type": "string"
            },
            "amlMode": {
              "type": "string"
            }
          }
        }
      }
    },
    "Security": {
      "description": "Security settings.",
      "type": "object",
      "properties": {
        "oneTimeUse": {
          "description": "(Coming soon) Determines if the link is one-time use.",
          "type": "boolean"
        },
        "ipWhiteList": {
          "description": "(Coming soon) A list of IP addresses that are allowed to see / sign the document.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TimeToLive": {
      "description": "Time-to-live settings for the document.",
      "type": "object",
      "properties": {
        "deadline": {
          "format": "date-time",
          "description": "Time at which the document will expire (ISO 8601). The document can not be signed after this time. Default/maximum 45 days.",
          "type": "string"
        },
        "deleteAfterHours": {
          "format": "int32",
          "description": "How many hours we will keep the document after it is signed or expired (deadline). Default/ maximum 7 days (168 hours). After this timespan the document and files will be permanently deleted on our side.",
          "type": "integer"
        }
      }
    },
    "Mobile": {
      "description": "The signer's mobile number. Define this if you are using notifications.",
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "The country code.",
          "type": "string"
        },
        "number": {
          "description": "The mobile number.",
          "type": "string"
        }
      }
    },
    "OrganizationInfo": {
      "description": "The signer's organization info.",
      "type": "object",
      "properties": {
        "orgNo": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        }
      }
    },
    "Dialogs": {
      "description": "Dialogs that will be prestented to the signer in the signature process.",
      "type": "object",
      "properties": {
        "before": {
          "$ref": "#/definitions/DialogBefore"
        },
        "after": {
          "$ref": "#/definitions/DialogAfter"
        }
      }
    },
    "Styling": {
      "description": "Customize styling to make the the signature application look perfect in combination with your own application.",
      "type": "object",
      "properties": {
        "colorTheme": {
          "description": "The color theme for the application.",
          "enum": [
            "Default",
            "Black",
            "Blue",
            "Cyan",
            "Dark",
            "Lime",
            "Neutral",
            "Pink",
            "Purple",
            "Red",
            "Teal",
            "Indigo",
            "LightBlue",
            "DeepPurple",
            "Green",
            "LightGreen",
            "Yellow",
            "Amber",
            "Orange",
            "DeepOrange",
            "Brown",
            "Gray",
            "BlueGray"
          ],
          "type": "string"
        },
        "themeMode": {
          "description": "The theme color mode, specify if you want it dark or light themed. Defaults to light",
          "enum": [
            "Default",
            "Light",
            "Dark"
          ],
          "type": "string"
        },
        "spinner": {
          "description": "The type of spinner to show in loading screens.",
          "enum": [
            "Document",
            "Classic",
            "Cubes",
            "Bounce"
          ],
          "type": "string"
        },
        "hideTopBar": {
          "description": "If you want to hide the top bar, set this property to true (can be a good choice in iframe mode)",
          "type": "boolean"
        },
        "backgroundColor": {
          "description": "Override the application background color (use hexadecimal value)",
          "type": "string"
        }
      }
    },
    "PadesSettings": {
      "description": "PAdES settings that can be defined if the `\"pades\"` package format is selected.",
      "type": "object",
      "properties": {
        "primaryLanguage": {
          "description": "The primary language of the PAdES explanatory page. Defaults to english.",
          "enum": [
            "EN",
            "NO",
            "DA",
            "SV",
            "FI"
          ],
          "type": "string"
        },
        "secondaryLanguage": {
          "description": "The secondary language of the PAdES explanatory page.",
          "enum": [
            "EN",
            "NO",
            "DA",
            "SV",
            "FI"
          ],
          "type": "string"
        },
        "padesTemplateId": {
          "description": "The unique ID of PAdES template to use. Can be used if you have previously created your own custom template.",
          "type": "string"
        }
      }
    },
    "Email": {
      "required": [
        "language"
      ],
      "type": "object",
      "properties": {
        "language": {
          "description": "The language of the email notification.",
          "enum": [
            "EN",
            "NO",
            "DA",
            "SV",
            "FI"
          ],
          "type": "string"
        },
        "subject": {
          "description": "The email subject.",
          "type": "string"
        },
        "text": {
          "description": "The email notification body. Plain text and markdown is supported.",
          "type": "string"
        },
        "senderName": {
          "description": "The name to use as email sender.",
          "type": "string"
        }
      }
    },
    "SMS": {
      "required": [
        "language"
      ],
      "type": "object",
      "properties": {
        "language": {
          "description": "The language of the SMS notification.",
          "enum": [
            "EN",
            "NO",
            "DA",
            "SV",
            "FI"
          ],
          "type": "string"
        },
        "text": {
          "description": "The SMS notification text.",
          "type": "string"
        },
        "sender": {
          "description": "The name to use as SMS sender.",
          "type": "string"
        }
      }
    },
    "DialogBefore": {
      "description": "A dialog that will be presented before the document is signed.",
      "type": "object",
      "properties": {
        "useCheckBox": {
          "description": "Determines if a the user must confirm that the dialog message has been read before they can continue.",
          "type": "boolean"
        },
        "title": {
          "description": "The title of the dialog.",
          "type": "string"
        },
        "message": {
          "description": "The message body of the dialog.",
          "type": "string"
        }
      }
    },
    "DialogAfter": {
      "description": "A dialog that will be presented after the document is signed.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the dialog.",
          "type": "string"
        },
        "message": {
          "description": "The message body of the dialog.",
          "type": "string"
        }
      }
    },
    "CreateDocumentResponse": {
      "required": [
        "title",
        "externalId",
        "dataToSign",
        "contactDetails"
      ],
      "type": "object",
      "properties": {
        "documentId": {
          "format": "uuid",
          "description": "The document's unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "signers": {
          "description": "List of signers for the document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignerResponse"
          }
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "links": {
          "description": "HATEOAS extra info links retrieved for the document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "title": {
          "description": "The title of the document which will be presented to the user.",
          "maxLength": 300,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "The description of the document.",
          "type": "string"
        },
        "externalId": {
          "description": "Your reference to this document.",
          "maxLength": 255,
          "minLength": 4,
          "type": "string"
        },
        "dataToSign": {
          "$ref": "#/definitions/DataToSign"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetails"
        },
        "notification": {
          "$ref": "#/definitions/Notification"
        },
        "advanced": {
          "$ref": "#/definitions/Advanced"
        }
      }
    },
    "SignerResponse": {
      "required": [
        "externalSignerId",
        "redirectSettings",
        "signatureType"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The signer's unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "url": {
          "description": "The URL that the signer must use to sign the document.",
          "type": "string"
        },
        "documentSignature": {
          "$ref": "#/definitions/DocumentSignature"
        },
        "links": {
          "description": "HATEOAS extrainfo links retrieved for signer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "externalSignerId": {
          "description": "Your reference for the signer.",
          "maxLength": 255,
          "minLength": 4,
          "type": "string"
        },
        "redirectSettings": {
          "$ref": "#/definitions/RedirectSettings",
          "description": "Return URLs and domain settings"
        },
        "signatureType": {
          "$ref": "#/definitions/SignatureType"
        },
        "signerInfo": {
          "$ref": "#/definitions/SignerInfo",
          "description": "Define the signers name, mobile and email if you are using notifications"
        },
        "authentication": {
          "$ref": "#/definitions/Authentication",
          "description": "Do you want the signer to authenticate before they can see the document?"
        },
        "extraInfo": {
          "$ref": "#/definitions/ExtraInfoSignerRequest",
          "description": "Coming soon: Do you want to collect extra info about this specific signer? (for example personal information)"
        },
        "ui": {
          "$ref": "#/definitions/UI"
        },
        "notifications": {
          "$ref": "#/definitions/Notifications"
        },
        "tags": {
          "description": "Coming soon.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "description": "Optional order of signing for the signer.",
          "type": "integer"
        },
        "required": {
          "description": "Determines if the signer is required to sign the document before other signers. Any other signers will not be allowed to sign before all required signers have signed the document.",
          "type": "boolean"
        },
        "signUrlExpires": {
          "format": "date-time",
          "description": "The time at which the signature URL expires (ISO 8601). Specify this if you want a limited time-to-live for the URL. Defaults to the lifetime of the document.",
          "type": "string"
        }
      }
    },
    "Status": {
      "description": "The status of the document.",
      "type": "object",
      "properties": {
        "documentStatus": {
          "description": "The overall status of the document.",
          "enum": [
            "unsigned",
            "waiting_for_attachments",
            "partialsigned",
            "signed",
            "canceled",
            "expired"
          ],
          "type": "string"
        },
        "completedPackages": {
          "description": "A list of all the completed files/packages for the main document.",
          "type": "array",
          "items": {
            "enum": [
              "unsigned",
              "native",
              "standard_packaging",
              "pades",
              "xades"
            ],
            "type": "string"
          }
        },
        "attachmentPackages": {
          "description": "A set of key-value pairs with all the completed packages for the signable attachments, where the key is equal to the attachment's ID.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "enum": [
                "unsigned",
                "native",
                "standard_packaging",
                "pades",
                "xades"
              ],
              "type": "string"
            }
          }
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "resourceStatus": {
          "enum": [
            "Unknown",
            "NotReady",
            "Success",
            "signatureError",
            "NotFound",
            "BadInput",
            "ServiceUnavailable",
            "Unauthorized",
            "TimeOut"
          ],
          "type": "string"
        }
      }
    },
    "DocumentSignature": {
      "description": "The document signature.",
      "type": "object",
      "properties": {
        "signatureMethod": {
          "description": "The signature method used to sign the document.",
          "enum": [
            "no_bankid",
            "no_bankid_mobile",
            "no_bankid_netcentric",
            "no_buypass",
            "no_commfides",
            "se_bankid",
            "dk_nemid",
            "fi_tupas",
            "fi_mobiilivarmenne",
            "nl_digid",
            "es_dni",
            "ee_esteid",
            "mobile_connect",
            "sms_otp",
            "identification_papers",
            "social",
            "unknown"
          ],
          "type": "string"
        },
        "fullName": {
          "description": "The signer's full name, retrieved from the signature-method provider.",
          "type": "string"
        },
        "firstName": {
          "description": "The signer's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "The signer's last name.",
          "type": "string"
        },
        "middleName": {
          "description": "The signer's middle name.",
          "type": "string"
        },
        "signedTime": {
          "format": "date-time",
          "description": "Time at which the signature was registered (ISO 8601).",
          "type": "string"
        },
        "dateOfBirth": {
          "description": "The signer's date of birth (ddMMyy).",
          "type": "string"
        },
        "signatureMethodUniqueId": {
          "description": "The signature method unique ID.",
          "type": "string"
        },
        "socialSecurityNumber": {
          "$ref": "#/definitions/SocialSecurityNumber"
        },
        "clientIp": {
          "description": "The IP address of the signer.",
          "type": "string"
        }
      }
    },
    "SocialSecurityNumber": {
      "description": "The signer's social security number. Will be retrieved only when `getSocialSecurityNumber` is specified when creating the document.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The social security number.",
          "type": "string"
        },
        "countryCode": {
          "description": "ISO 3166-1 Alfa-2 (2 letters) country code.",
          "type": "string"
        }
      }
    },
    "UpdateDocumentRequestWrapper": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "notification": {
          "$ref": "#/definitions/Notification"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetails"
        },
        "advanced": {
          "$ref": "#/definitions/Advanced"
        }
      },
      "example": {
        "title": "Updated title",
        "description": "This is an updated description",
        "contactDetails": {
          "email": "test@test.com",
          "url": "https://idfy.io"
        },
        "advanced": {
          "tags": [
            "develop",
            "fun_with_documents"
          ],
          "attachments": 0,
          "requiredSignatures": 0,
          "getSocialSecurityNumber": false,
          "timeToLive": {
            "deadline": "2018-11-28T08:29:15.2779625Z",
            "deleteAfterHours": 1
          }
        }
      }
    },
    "UpdateDocumentRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "notification": {
          "$ref": "#/definitions/Notification"
        },
        "contactDetails": {
          "$ref": "#/definitions/ContactDetails"
        },
        "advanced": {
          "$ref": "#/definitions/Advanced"
        }
      }
    },
    "DocumentSummary": {
      "description": "A summary containing core information about a document",
      "type": "object",
      "properties": {
        "documentId": {
          "format": "uuid",
          "description": "Document id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "accountId": {
          "format": "uuid",
          "description": "Account id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "title": {
          "description": "Document title",
          "type": "string"
        },
        "description": {
          "description": "Document description",
          "type": "string"
        },
        "lastUpdated": {
          "format": "date-time",
          "description": "When was the document last updated (ISO8601)",
          "type": "string"
        },
        "deadline": {
          "format": "date-time",
          "description": "The sign deadline for the document (ISO8601)",
          "type": "string"
        },
        "signedDate": {
          "format": "date-time",
          "description": "When was all the signatures processed (ISO8601)",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "Document status"
        },
        "externalId": {
          "description": "External document Id (your Id)",
          "type": "string"
        },
        "documentSignatures": {
          "description": "All the signatures received on this document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedDocumentSignature"
          }
        },
        "requiredSignatures": {
          "format": "int32",
          "description": "The number of required signatures on the document",
          "type": "integer"
        },
        "currentSignatures": {
          "format": "int32",
          "description": "How many signatures is completed right now",
          "type": "integer"
        },
        "tags": {
          "description": "Document tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attachments": {
          "description": "A list of attachment Id's",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "signers": {
          "description": "A list of all the signers on the document",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "created": {
          "format": "date-time",
          "description": "When the document was created (ISO 8601)",
          "type": "string"
        }
      }
    },
    "ExtendedDocumentSignature": {
      "type": "object",
      "properties": {
        "signerId": {
          "format": "uuid",
          "description": "The signer's unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "externalSignerId": {
          "description": "Your reference for the signer.",
          "type": "string"
        },
        "signatureMethod": {
          "description": "The signature method used to sign the document.",
          "enum": [
            "no_bankid",
            "no_bankid_mobile",
            "no_bankid_netcentric",
            "no_buypass",
            "no_commfides",
            "se_bankid",
            "dk_nemid",
            "fi_tupas",
            "fi_mobiilivarmenne",
            "nl_digid",
            "es_dni",
            "ee_esteid",
            "mobile_connect",
            "sms_otp",
            "identification_papers",
            "social",
            "unknown"
          ],
          "type": "string"
        },
        "fullName": {
          "description": "The signer's full name, retrieved from the signature-method provider.",
          "type": "string"
        },
        "firstName": {
          "description": "The signer's first name.",
          "type": "string"
        },
        "lastName": {
          "description": "The signer's last name.",
          "type": "string"
        },
        "middleName": {
          "description": "The signer's middle name.",
          "type": "string"
        },
        "signedTime": {
          "format": "date-time",
          "description": "Time at which the signature was registered (ISO 8601).",
          "type": "string"
        },
        "dateOfBirth": {
          "description": "The signer's date of birth (ddMMyy).",
          "type": "string"
        },
        "signatureMethodUniqueId": {
          "description": "The signature method unique ID.",
          "type": "string"
        },
        "socialSecurityNumber": {
          "$ref": "#/definitions/SocialSecurityNumber"
        },
        "clientIp": {
          "description": "The IP address of the signer.",
          "type": "string"
        }
      }
    },
    "CollectionWithPaging[DocumentSummary]": {
      "type": "object",
      "properties": {
        "offset": {
          "format": "int32",
          "description": "The offset of the current page.",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "description": "The limit of the current paging options.",
          "type": "integer"
        },
        "size": {
          "format": "int64",
          "description": "The total size of the collection (irrespective of any paging options).",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentSummary"
          }
        }
      }
    },
    "Links": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string"
        },
        "previous": {
          "type": "string"
        },
        "first": {
          "type": "string"
        }
      }
    },
    "JwtValidationRequest": {
      "description": "Jwt validation request",
      "required": [
        "jwt"
      ],
      "type": "object",
      "properties": {
        "jwt": {
          "description": "The JWT to be validated as an string",
          "type": "string"
        }
      }
    },
    "JwtValidationResponse": {
      "type": "object",
      "properties": {
        "jwtValid": {
          "description": "True if jwt is valid",
          "type": "boolean"
        },
        "expired": {
          "description": "True if expired",
          "type": "boolean"
        },
        "jwtPayload": {
          "$ref": "#/definitions/JwtPayload",
          "description": "Payload (valid data if jwt is valid)"
        },
        "error": {
          "description": "Error message if not valid jwt",
          "type": "string"
        }
      }
    },
    "JwtPayload": {
      "type": "object",
      "properties": {
        "accountId": {
          "format": "uuid",
          "description": "Account Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "documentId": {
          "format": "uuid",
          "description": "Document Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "externalId": {
          "description": "External document Id",
          "type": "string"
        },
        "signerId": {
          "format": "uuid",
          "description": "Signer Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "externalSignerId": {
          "description": "External signer Id",
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/signatureError",
          "description": "Error object, will be included on error"
        },
        "signSuccess": {
          "$ref": "#/definitions/SignSuccess",
          "description": "Success object, will be included on sign success"
        },
        "expires": {
          "format": "date-time",
          "description": "When the jwt expires (ISO 8601)",
          "type": "string"
        },
        "aborted": {
          "description": "Set to true if user aborted",
          "type": "boolean"
        }
      }
    },
    "signatureError": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "Idfy error message",
          "type": "string"
        },
        "errorCode": {
          "description": "Idfy error code",
          "type": "string"
        },
        "eidErrorMessage": {
          "description": "Eid provider error message",
          "type": "string"
        },
        "eidErrorCode": {
          "description": "Eid provider error code",
          "type": "string"
        }
      }
    },
    "SignSuccess": {
      "type": "object",
      "properties": {
        "signatureMethodUniqueId": {
          "description": "The unique id retrieved from the signature method provider",
          "type": "string"
        },
        "firstName": {
          "description": "The signers first name",
          "type": "string"
        },
        "middleName": {
          "description": "The signers middle name",
          "type": "string"
        },
        "lastName": {
          "description": "The signers last name",
          "type": "string"
        },
        "fullName": {
          "description": "The signers full name",
          "type": "string"
        },
        "dateOfBirth": {
          "description": "The signers date of birth",
          "type": "string"
        },
        "signatureMethod": {
          "description": "The signaturemethod used to sign the document",
          "enum": [
            "no_bankid",
            "no_bankid_mobile",
            "no_bankid_netcentric",
            "no_buypass",
            "no_commfides",
            "se_bankid",
            "dk_nemid",
            "fi_tupas",
            "fi_mobiilivarmenne",
            "nl_digid",
            "es_dni",
            "ee_esteid",
            "mobile_connect",
            "sms_otp",
            "identification_papers",
            "social",
            "unknown"
          ],
          "type": "string"
        },
        "signedTime": {
          "format": "date-time",
          "description": "Signed time (ISO 8601)",
          "type": "string"
        }
      }
    },
    "NotificationLogItem": {
      "type": "object",
      "properties": {
        "sentTimeStamp": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "fromAddress": {
          "type": "string"
        },
        "receiver": {
          "type": "string"
        }
      }
    },
    "ManualReminder": {
      "required": [
        "notificationSetting"
      ],
      "type": "object",
      "properties": {
        "notificationSetting": {
          "description": "Set what kind of reminders to send",
          "enum": [
            "off",
            "sendSms",
            "sendEmail",
            "sendBoth"
          ],
          "type": "string"
        },
        "signers": {
          "description": "Optional: Define the signers that should receive this reminder (if not signed). Dictionary with signer id as key, you can ovveride the signer email/phone as value",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SignerOverrides"
          }
        }
      },
      "example": {
        "notificationSetting": "sendEmail",
        "signers": {
          "edc38b09-e306-457e-853e-a979103386b4": null,
          "cedcd66c-c2fc-499e-9de7-1a67f9d64dcf": {
            "emailOverride": "overrideemail@test.com"
          }
        }
      }
    },
    "SignerOverrides": {
      "type": "object",
      "properties": {
        "emailOverride": {
          "description": "Set a new email address on the signer (all fututre notifications to this specific signer will be sent to this email)",
          "type": "string"
        },
        "mobileOverride": {
          "$ref": "#/definitions/Mobile"
        }
      }
    },
    "UpdateSignerRequestWrapper": {
      "type": "object",
      "properties": {
        "externalSignerId": {
          "description": "Your reference for the signer.",
          "maxLength": 255,
          "minLength": 4,
          "type": "string"
        },
        "redirectSettings": {
          "$ref": "#/definitions/RedirectSettings",
          "description": "Return URLs and domain settings"
        },
        "signatureType": {
          "$ref": "#/definitions/SignatureType"
        },
        "signerInfo": {
          "$ref": "#/definitions/SignerInfo",
          "description": "Define the signers name, mobile and email if you are using notifications"
        },
        "authentication": {
          "$ref": "#/definitions/Authentication",
          "description": "Do you want the signer to authenticate before they can see the document?"
        },
        "extraInfo": {
          "$ref": "#/definitions/ExtraInfoSignerRequest",
          "description": "Coming soon: Do you want to collect extra info about this specific signer? (for example personal information)"
        },
        "ui": {
          "$ref": "#/definitions/UI"
        },
        "notifications": {
          "$ref": "#/definitions/Notifications"
        },
        "tags": {
          "description": "Coming soon.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "description": "Optional order of signing for the signer.",
          "type": "integer"
        },
        "required": {
          "description": "Determines if the signer is required to sign the document before other signers. Any other signers will not be allowed to sign before all required signers have signed the document.",
          "type": "boolean"
        },
        "signUrlExpires": {
          "format": "date-time",
          "description": "The time at which the signature URL expires (ISO 8601). Specify this if you want a limited time-to-live for the URL. Defaults to the lifetime of the document.",
          "type": "string"
        }
      },
      "example": {
        "signerInfo": {
          "firstName": "Updated",
          "lastName": "Name"
        },
        "order": 0,
        "required": false,
        "signUrlExpires": "2018-11-29T08:29:15.4650456Z"
      }
    },
    "UpdateSignerRequest": {
      "type": "object",
      "properties": {
        "externalSignerId": {
          "description": "Your reference for the signer.",
          "maxLength": 255,
          "minLength": 4,
          "type": "string"
        },
        "redirectSettings": {
          "$ref": "#/definitions/RedirectSettings",
          "description": "Return URLs and domain settings"
        },
        "signatureType": {
          "$ref": "#/definitions/SignatureType"
        },
        "signerInfo": {
          "$ref": "#/definitions/SignerInfo",
          "description": "Define the signers name, mobile and email if you are using notifications"
        },
        "authentication": {
          "$ref": "#/definitions/Authentication",
          "description": "Do you want the signer to authenticate before they can see the document?"
        },
        "extraInfo": {
          "$ref": "#/definitions/ExtraInfoSignerRequest",
          "description": "Coming soon: Do you want to collect extra info about this specific signer? (for example personal information)"
        },
        "ui": {
          "$ref": "#/definitions/UI"
        },
        "notifications": {
          "$ref": "#/definitions/Notifications"
        },
        "tags": {
          "description": "Coming soon.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "format": "int32",
          "description": "Optional order of signing for the signer.",
          "type": "integer"
        },
        "required": {
          "description": "Determines if the signer is required to sign the document before other signers. Any other signers will not be allowed to sign before all required signers have signed the document.",
          "type": "boolean"
        },
        "signUrlExpires": {
          "format": "date-time",
          "description": "The time at which the signature URL expires (ISO 8601). Specify this if you want a limited time-to-live for the URL. Defaults to the lifetime of the document.",
          "type": "string"
        }
      }
    },
    "EventDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "type": "string"
        },
        "payload": {
          "type": "object"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "accountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventTypeInfo": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Event type",
          "enum": [
            "document_before_deleted",
            "document_canceled",
            "document_created",
            "document_deleted",
            "document_expired",
            "document_email_opened",
            "document_form_partially_signed",
            "document_form_signed",
            "document_link_opened",
            "document_packaged",
            "document_partially_signed",
            "document_read",
            "document_signed"
          ],
          "type": "string"
        },
        "name": {
          "description": "Display name of the event",
          "type": "string"
        },
        "description": {
          "description": "Description of the event",
          "type": "string"
        }
      }
    },
    "MockEventRequest": {
      "required": [
        "eventType"
      ],
      "type": "object",
      "properties": {
        "eventType": {
          "description": "Event type to mock",
          "type": "string"
        }
      }
    },
    "WebhookDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The webhooks unique identifier.",
          "type": "integer"
        },
        "name": {
          "description": "Display name of the webhook.",
          "type": "string"
        },
        "active": {
          "description": "Determines if the webhook is active.",
          "type": "boolean"
        },
        "events": {
          "description": "A list of events that the webhook triggers for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "$ref": "#/definitions/WebhookConfig"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Time at which the webhook was created.",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "Time at which the webhook was last updated.",
          "type": "string"
        },
        "lastResponse": {
          "$ref": "#/definitions/WebhookResponse"
        },
        "tags": {
          "description": "A list of event tags that the webhook triggers for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WebhookConfig": {
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": "string"
        },
        "secret": {
          "description": "Optional secret used to compute a HMAC hex digest of the payload, \r\nwhich is passed with the HTTP request as an ``X-Idfy-Signature`` header.",
          "type": "string"
        },
        "deliveryLogging": {
          "description": "Determines whether to log webhook delivery attempts. Defaults to `never`.",
          "enum": [
            "never",
            "failed",
            "always"
          ],
          "type": "string"
        }
      }
    },
    "WebhookResponse": {
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The status code returned by the webhook endpoint on last delivery attempt.",
          "type": "integer"
        },
        "message": {
          "description": "The message returned by the webhook endpoint on last delivery attempt.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Time at which the last delivery attempt was made.",
          "type": "string"
        }
      }
    },
    "WebhookUpdateDto": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Display name of the webhook.",
          "type": "string"
        },
        "active": {
          "description": "Determines whether the webhook is active or not.",
          "type": "boolean"
        },
        "events": {
          "description": "A list of events that the webhook triggers for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "$ref": "#/definitions/WebhookConfig"
        },
        "tags": {
          "description": "An optional list of event tags that the webhook triggers for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WebhookCreateDto": {
      "required": [
        "name",
        "active",
        "events",
        "config"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Display name of the webhook.",
          "type": "string"
        },
        "active": {
          "description": "Determines whether the webhook is active or not.",
          "type": "boolean"
        },
        "events": {
          "description": "A list of events that the webhook triggers for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "$ref": "#/definitions/WebhookCreateConfig"
        },
        "tags": {
          "description": "An optional list of event tags that the webhook triggers for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "name": "My webhook",
        "active": true,
        "events": [
          "document_created",
          "document_signed"
        ],
        "config": {
          "url": "https://example.com/webhook-endpoint",
          "secret": "secret",
          "deliveryLogging": "failed"
        }
      }
    },
    "WebhookCreateConfig": {
      "required": [
        "url"
      ],
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": "string"
        },
        "secret": {
          "description": "Optional secret used to compute a HMAC hex digest of the payload, \r\nwhich is passed with the HTTP request as an ``X-Idfy-Signature`` header.",
          "type": "string"
        },
        "deliveryLogging": {
          "description": "Determines whether to log webhook delivery attempts. Defaults to `never`.",
          "enum": [
            "never",
            "failed",
            "always"
          ],
          "type": "string"
        }
      }
    },
    "WebhookDeliveryDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The webhooks unique identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "webhookId": {
          "format": "int32",
          "type": "integer"
        },
        "eventId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "elapsedMs": {
          "format": "int64",
          "type": "integer"
        },
        "requestHeaders": {
          "type": "object"
        },
        "requestBody": {
          "type": "object"
        },
        "responseHeaders": {
          "type": "object"
        },
        "responseBody": {
          "type": "object"
        },
        "responseStatusCode": {
          "format": "int32",
          "type": "integer"
        },
        "responseMessage": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "PersonAmlResponse": {
      "type": "object",
      "properties": {
        "bisnodeReference": {
          "description": "Reference identifying the current request. May be used for tracing",
          "type": "string"
        },
        "sanctionResults": {
          "description": "List of all Sanction items with match for the input request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonSanctionResult"
          }
        },
        "pepResults": {
          "description": "List of all PEP items with match for the input request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PepResult"
          }
        },
        "verifiedPerson": {
          "$ref": "#/definitions/VerifiedPerson",
          "description": "Data retrieved before the actual screening (data enhancement)."
        },
        "message": {
          "description": "Response message could for example be: No result from PEP and/or SANCTION screening.",
          "type": "string"
        },
        "Report": {
          "description": "Reference to downloadable PDF report (if includeReport is set to true in request)",
          "type": "string"
        }
      },
      "example": {
        "sanctionResults": [
          {
            "matchIndicator": 325,
            "comment": "(Mother’s name: Masouma Abd al-Rahman. Photo available for inclusion in the INTERPOL-UN Security Council Special Notice)",
            "aliasList": [
              "Najmuddin Faraj Ahmad",
              "Mullah Krekar",
              "Fateh Najm Eddine Farraj",
              "Faraj Ahmad Najmuddin"
            ],
            "addressList": [
              {
                "countryName": "Iraq",
                "countryCode": "IQ"
              },
              {
                "countryName": "Norway",
                "countryCode": "NO",
                "street": "10 Testesensgate",
                "postCode": "0101",
                "city": "Oslo"
              }
            ],
            "urlList": [
              "http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=OJ:L:2006:351:0009:0010:EN:PDF"
            ],
            "provider": "TRAPETS",
            "source": "EU_GLOBAL",
            "externalId": "3641",
            "lastUpdate": "2016-12-15T00:00:00",
            "firstUpdate": "2016-01-19T00:00:00",
            "name": "Najmuddin Faraj Ahmad",
            "gender": "UNKNOWN",
            "birthDate": "1956-07-07"
          },
          {
            "matchIndicator": 325,
            "comment": "Mother’s name: Masouma Abd al-Rahman. Photo available for inclusion in the INTERPOL-UN Security Council Special Notice. Review pursuant to Security Council resolution 1822 (2008) was concluded on 20 May 2010.",
            "aliasList": [
              "Mullah Krekar",
              "Fateh Najm Eddine Farraj",
              "Faraj Ahmad Najmuddin",
              "NAJMUDDIN FARAJ AHMAD "
            ],
            "addressList": [
              {
                "countryName": "Iraq",
                "countryCode": "IQ"
              },
              {
                "countryName": "Iraq",
                "countryCode": "IQ",
                "street": "Olaqloo Sharbajer"
              },
              {
                "countryName": "Norway",
                "countryCode": "NO",
                "street": "Testesensgate 1",
                "postCode": "0101",
                "city": "Oslo"
              }
            ],
            "provider": "TRAPETS",
            "source": "UN_CONSOLIDATED_1",
            "externalId": "2762998",
            "lastUpdate": "2016-12-15T00:00:00",
            "firstUpdate": "2006-12-07T00:00:00",
            "name": "Mullah Krekar",
            "gender": "UNKNOWN",
            "birthDate": "1956-07-07"
          }
        ],
        "pepResults": [
          {
            "matchIndicator": 500,
            "title": "Minister for Infrastructure",
            "aliasList": [
              "Anna Frida Wiktoria Johansson"
            ],
            "addressList": [
              {
                "countryName": "Sweden",
                "countryCode": "SE"
              }
            ],
            "urlList": [
              "http://www.government.se/government-of-sweden/ministry-of-enterprise-and-innovation/anna-johansson/",
              "https://sv.wikipedia.org/wiki/Anna_Johansson_(socialdemokrat)"
            ],
            "provider": "TRAPETS",
            "source": "PEP_Edge",
            "externalId": "SE.Government-372",
            "lastUpdate": "2016-12-15T00:00:00",
            "name": "Anna Frida Wiktoria Johansson",
            "gender": "UNKNOWN",
            "birthDate": "1971-05-29"
          }
        ],
        "verifiedPerson": {
          "provider": "BISNODE",
          "name": "Anna Frida Wiktoria Johansson",
          "gender": "FEMALE",
          "natIdNo": "195001011234",
          "nationality": "NO",
          "birthDate": "1971-05-29"
        },
        "message": "NO MESSAGE",
        "Report": "reference to PDF report, sealed and timestamped."
      }
    },
    "PersonSanctionResult": {
      "description": "List of all Sanction items with match for the input request.",
      "type": "object",
      "properties": {
        "matchIndicator": {
          "format": "int32",
          "description": "Quality indicator of match. Higher number means better match.",
          "type": "integer"
        },
        "title": {
          "description": "May be a text string denoting title of position, job title, etc",
          "type": "string"
        },
        "function": {
          "description": "Additional details about what the person does",
          "type": "string"
        },
        "comment": {
          "description": "A comment of some kind may be present in some lists",
          "type": "string"
        },
        "aliasList": {
          "description": "Name aliases for the person. May be none, one or more.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addressList": {
          "description": "List of addresses found in the lists",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressList"
          }
        },
        "urlList": {
          "description": "URLs to source documents (May be used for further investigations)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "provider": {
          "description": "Name of data provider",
          "type": "string"
        },
        "source": {
          "description": "The name of the source list, e.g. 'EU_GLOBAL', 'PEP_Edge', 'UN_CONSOLIDATED'",
          "type": "string"
        },
        "externalId": {
          "description": "External identification",
          "type": "string"
        },
        "lastUpdate": {
          "format": "date-time",
          "description": "Date of last update",
          "type": "string"
        },
        "firstUpdate": {
          "format": "date-time",
          "description": "Date of first update",
          "type": "string"
        },
        "name": {
          "description": "Name of person",
          "type": "string"
        },
        "gender": {
          "description": "Gender of person",
          "enum": [
            "MALE",
            "FEMALE",
            "UNKNOWN"
          ],
          "type": "string"
        },
        "natIdNo": {
          "description": "National Identification Number",
          "type": "string"
        },
        "nationality": {
          "description": "Two-letter code as specified in the ISO 3166 standard",
          "type": "string"
        },
        "birthDate": {
          "description": "Date of birth for the person",
          "type": "string"
        }
      }
    },
    "PepResult": {
      "description": "List of all PEP items with match for the input request.",
      "type": "object",
      "properties": {
        "matchIndicator": {
          "format": "int32",
          "description": "Quality indicator of match. Higher number means better match.",
          "type": "integer"
        },
        "title": {
          "description": "May be a text string denoting title of position, job title, etc",
          "type": "string"
        },
        "function": {
          "description": "Additional details about what the person does",
          "type": "string"
        },
        "comment": {
          "description": "A comment of some kind may be present in some lists",
          "type": "string"
        },
        "aliasList": {
          "description": "Name aliases for the person. May be none, one or more.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addressList": {
          "description": "List of addresses found in the lists",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressList"
          }
        },
        "urlList": {
          "description": "URLs to source documents (May be used for further investigations)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "provider": {
          "description": "Name of data provider",
          "type": "string"
        },
        "source": {
          "description": "The name of the source list, e.g. 'EU_GLOBAL', 'PEP_Edge', 'UN_CONSOLIDATED'",
          "type": "string"
        },
        "externalId": {
          "description": "External identification",
          "type": "string"
        },
        "lastUpdate": {
          "format": "date-time",
          "description": "Date of last update",
          "type": "string"
        },
        "firstUpdate": {
          "format": "date-time",
          "description": "Date of first update",
          "type": "string"
        },
        "name": {
          "description": "Name of person",
          "type": "string"
        },
        "gender": {
          "description": "Gender of person",
          "enum": [
            "MALE",
            "FEMALE",
            "UNKNOWN"
          ],
          "type": "string"
        },
        "natIdNo": {
          "description": "National Identification Number",
          "type": "string"
        },
        "nationality": {
          "description": "Two-letter code as specified in the ISO 3166 standard",
          "type": "string"
        },
        "birthDate": {
          "description": "Date of birth for the person",
          "type": "string"
        }
      }
    },
    "VerifiedPerson": {
      "description": "Data retrieved before the actual screening (data enhancement).",
      "type": "object",
      "properties": {
        "status": {
          "description": "Person status code, e.g. DECEASED, EMIGRATED",
          "type": "array",
          "items": {
            "enum": [
              "UNKNOWN",
              "EMIGRATED",
              "BANKRUPT",
              "PROTECTED",
              "NO_ADDRESS",
              "DECEASED",
              "GUARDIANSHIP"
            ],
            "type": "string"
          }
        },
        "deceasedDate": {
          "format": "date-time",
          "description": "Date of death",
          "type": "string"
        },
        "emigratedDate": {
          "format": "date-time",
          "description": "Date of emigration",
          "type": "string"
        },
        "roles": {
          "description": "Role in company",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "provider": {
          "description": "Name of data provider",
          "type": "string"
        },
        "name": {
          "description": "Name of person",
          "type": "string"
        },
        "gender": {
          "description": "Gender of person",
          "enum": [
            "MALE",
            "FEMALE",
            "UNKNOWN"
          ],
          "type": "string"
        },
        "natIdNo": {
          "description": "National Identification Number",
          "type": "string"
        },
        "nationality": {
          "description": "Two-letter code as specified in the ISO 3166 standard",
          "type": "string"
        },
        "birthDate": {
          "description": "Date of birth for the person",
          "type": "string"
        }
      }
    },
    "AddressList": {
      "type": "object",
      "properties": {
        "countryName": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "postCode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "code": {
          "enum": [
            "Unknown",
            "CHAIRMAN_OF_THE_BOARD",
            "DEPUTY_CHAIRMAN_OF_THE_BOARD",
            "BOARD_MEMBER",
            "EMPLOYEES_REPRESENTATIVE",
            "DEPUTY_BOARD_MEMBER",
            "OBSERVER",
            "REPRESENTATIVE_FOREIGN_ENTITY",
            "LIABLE_PARTNER",
            "CEO",
            "COMPANY_SECRETARY",
            "AUDITOR",
            "AUDIT_EXEMPTION",
            "CERTIFIED_ACCOUNTANT",
            "CONTACT"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CompanyAmlResponse": {
      "type": "object",
      "properties": {
        "bisnodeReference": {
          "description": "Reference identifying the current request. May be used for tracing",
          "type": "string"
        },
        "verifiedCompany": {
          "$ref": "#/definitions/VerifiedCompany",
          "description": "Data retrieved before the actual screening (data enhancement)."
        },
        "sanctionResults": {
          "description": "List of all Sanction items with match for the input request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanySanctionResult"
          }
        },
        "message": {
          "description": "Response message could for example be: No result from PEP and/or SANCTION screening.",
          "type": "string"
        },
        "ownersAndBoardMembers": {
          "$ref": "#/definitions/OwnersAndBoardMembers",
          "description": "Results for owners and board members"
        },
        "Report": {
          "description": "Reference to downloadable PDF report (if includeReport is set to true in request)",
          "type": "string"
        }
      }
    },
    "VerifiedCompany": {
      "description": "Data retrieved before the actual screening (data enhancement).",
      "type": "object",
      "properties": {
        "regNo": {
          "description": "Business registration number",
          "type": "string"
        },
        "dunsNo": {
          "description": "D-U-N-S number",
          "type": "string"
        },
        "status": {
          "description": "Status code",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of company",
          "type": "string"
        },
        "nationality": {
          "description": "Two-letter code as specified in the ISO 3166 standard",
          "type": "string"
        },
        "provider": {
          "description": "Name of data provider",
          "type": "string"
        }
      }
    },
    "CompanySanctionResult": {
      "description": "List of all Sanction items with match for the input request.",
      "type": "object",
      "properties": {
        "matchIndicator": {
          "format": "int32",
          "description": "Quality indicator of match. Higher number means better match.",
          "type": "integer"
        },
        "title": {
          "description": "May be a text string denoting title of position, job title, etc",
          "type": "string"
        },
        "function": {
          "description": "Additional details about what the company does",
          "type": "string"
        },
        "comment": {
          "description": "A comment of some kind may be present in some lists",
          "type": "string"
        },
        "aliasList": {
          "description": "Name aliases for the company. May be none, one or more.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addressList": {
          "description": "List of addresses found in the lists",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressList"
          }
        },
        "urlList": {
          "description": "URLs to source documents (May be used for further investigations)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "description": "The name of the source list, e.g. 'EU_GLOBAL', 'PEP_Edge', 'UN_CONSOLIDATED'",
          "type": "string"
        },
        "externalId": {
          "description": "External identification",
          "type": "string"
        },
        "lastUpdate": {
          "format": "date-time",
          "description": "Date of last update",
          "type": "string"
        },
        "firstUpdate": {
          "format": "date-time",
          "description": "Date of first update",
          "type": "string"
        },
        "name": {
          "description": "Name of company",
          "type": "string"
        },
        "nationality": {
          "description": "Two-letter code as specified in the ISO 3166 standard",
          "type": "string"
        },
        "provider": {
          "description": "Name of data provider",
          "type": "string"
        }
      }
    },
    "OwnersAndBoardMembers": {
      "type": "object",
      "properties": {
        "persons": {
          "description": "List of person results, same structure as documented in chapter 5.4 B2C Response, exluding “bisnodeReference”",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonAmlResponse"
          }
        },
        "companies": {
          "description": "List of company results, same structure as current table, excluding “bisnodeReference” and “ownersAndBoardMembers”",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyAmlResponse"
          }
        }
      }
    },
    "DifiResponse": {
      "type": "object",
      "properties": {
        "Organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyInfoDifiResponse"
          }
        },
        "RawData": {
          "type": "string"
        },
        "RequestId": {
          "type": "string"
        }
      },
      "example": {
        "Organizations": [
          {
            "OrgNr": "911111111",
            "OrgName": "Klokkeservice AS",
            "Address": "Testveien 4",
            "PostalCode": "5050",
            "City": "Bergen",
            "Website": "www.somepage.no",
            "Country": "Norge"
          }
        ],
        "RawData": "This Json-string contains all the data received from difi",
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3"
      }
    },
    "CompanyInfoDifiResponse": {
      "type": "object",
      "properties": {
        "OrgNr": {
          "type": "string"
        },
        "OrgName": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        }
      }
    },
    "CompanyInformationResponse": {
      "type": "object",
      "properties": {
        "OrgNr": {
          "type": "string"
        },
        "OrgName": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "RawJson": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "RequestId": {
          "type": "string"
        }
      },
      "example": {
        "OrgNr": "911111111",
        "OrgName": "Klokkeservice AS",
        "Address": "Testveien 4",
        "PostalCode": "5050",
        "City": "Bergen",
        "Country": "Norge",
        "RawJson": "This Json-string contains all the data received from matchit",
        "Phone": "12345678",
        "Mobile": "87654321",
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3"
      }
    },
    "CreditCheckCompanyResponse": {
      "type": "object",
      "properties": {
        "OrgNumber": {
          "format": "int32",
          "type": "integer"
        },
        "OrgName": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "IncorporationDate": {
          "format": "date-time",
          "type": "string"
        },
        "ChairMan": {
          "type": "string"
        },
        "CEO": {
          "type": "string"
        },
        "Economy": {
          "$ref": "#/definitions/Economy"
        },
        "BisnodeRatingCode": {
          "type": "string"
        },
        "BisnodeRatingDescription": {
          "type": "string"
        },
        "CreditLimit": {
          "format": "double",
          "type": "number"
        },
        "PaymentDefaults": {
          "type": "string"
        },
        "RequestId": {
          "type": "string"
        },
        "Report": {
          "type": "string"
        },
        "DetailedInformation": {
          "$ref": "#/definitions/HentForetakResponse"
        },
        "NumberOfPaymentDefaults": {
          "format": "int32",
          "type": "integer"
        }
      },
      "example": {
        "OrgNumber": 911111111,
        "OrgName": "Klokkeservice AS",
        "Address": "Testveien 4",
        "PostalCode": "5050",
        "City": "Bergen",
        "IncorporationDate": "2001-02-22T00:00:00",
        "ChairMan": "Ole Brumm",
        "CEO": "Max Mekker",
        "Economy": {
          "Year": 2015,
          "Turnover": 2134325,
          "OperatingProfit": 142345,
          "Equity": 548451.0,
          "Employees": 32
        },
        "BisnodeRatingCode": "AAA",
        "BisnodeRatingDescription": "Høyeste kredittverdighet",
        "CreditLimit": 154000.0,
        "PaymentDefaults": "Ingen betalingsanmerkninger er registrert",
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
        "Report": "Uri to pdf report",
        "DetailedInformation": {},
        "NumberOfPaymentDefaults": 0
      }
    },
    "Economy": {
      "type": "object",
      "properties": {
        "Year": {
          "format": "int32",
          "type": "integer"
        },
        "Turnover": {
          "format": "int64",
          "type": "integer"
        },
        "OperatingProfit": {
          "format": "int64",
          "type": "integer"
        },
        "Equity": {
          "format": "double",
          "type": "number"
        },
        "Employees": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "HentForetakResponse": {
      "type": "object",
      "properties": {
        "identifikasjonField": {
          "$ref": "#/definitions/Identifikasjon"
        },
        "navnAdresseField": {
          "$ref": "#/definitions/NavnAdresse"
        },
        "ratingField": {
          "$ref": "#/definitions/Rating"
        },
        "histRatingField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoriskRating"
          }
        },
        "grunnfaktaField": {
          "$ref": "#/definitions/Grunnfakta"
        },
        "juridiskField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Juridisk"
          }
        },
        "vervField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Verv"
          }
        },
        "aksjonarField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aksjonar"
          }
        },
        "datterselskapField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Datterselskap"
          }
        },
        "okonomiEnkField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OkonomiEnk"
          }
        },
        "nokkeltallForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NokkeltallForetak"
          }
        },
        "nokkeltallBransjeField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NokkeltallBransje"
          }
        },
        "nokkeltallKonsernField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NokkeltallKonsern"
          }
        },
        "betaSammendragField": {
          "$ref": "#/definitions/BetaSammendrag"
        },
        "betaDetaljerField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BetaDetaljer"
          }
        },
        "losoreField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Losore"
          }
        },
        "eiendomNorgeField": {
          "$ref": "#/definitions/EiendomNorge"
        },
        "konsernLinkField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KonsernLink"
          }
        },
        "scoringField": {
          "$ref": "#/definitions/Scoring"
        },
        "okonomiSammendragForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OkonomiSammendragForetak"
          }
        },
        "okonomiSammendragKonsernField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OkonomiSammendragKonsern"
          }
        },
        "okonomiDetaljerForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OkonomiDetaljerForetak"
          }
        },
        "okonomiDetaljerKonsernField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OkonomiDetaljerKonsern"
          }
        },
        "eiendelerForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EiendelerForetak"
          }
        },
        "eiendelerKonsernField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EiendelerKonsern"
          }
        },
        "gjeldEgenkapitalForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GjeldEgenkapitalForetak"
          }
        },
        "gjeldEgenkapitalKonsernField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GjeldEgenkapitalKonsern"
          }
        },
        "avdelingDataField": {
          "$ref": "#/definitions/AvdelingData"
        },
        "rettighetshavereField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rettighetshavere"
          }
        },
        "eiendomNorgeListeField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EiendomNorgeListe"
          }
        },
        "fullmaktForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FullmaktForetak"
          }
        },
        "meldingerField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Meldinger"
          }
        }
      }
    },
    "Identifikasjon": {
      "type": "object",
      "properties": {
        "orgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "dunsnrField": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "NavnAdresse": {
      "type": "object",
      "properties": {
        "kodeTypeField": {
          "type": "string"
        },
        "kodeTekstField": {
          "type": "string"
        },
        "navnField": {
          "type": "string"
        },
        "gateAdresseField": {
          "type": "string"
        },
        "gatePostboksField": {
          "format": "int32",
          "type": "integer"
        },
        "gatePostnrField": {
          "format": "int32",
          "type": "integer"
        },
        "gatePoststedField": {
          "type": "string"
        },
        "postAdresseField": {
          "type": "string"
        },
        "postPostboksField": {
          "format": "int32",
          "type": "integer"
        },
        "postPostnrField": {
          "format": "int32",
          "type": "integer"
        },
        "postPoststedField": {
          "type": "string"
        }
      }
    },
    "Rating": {
      "type": "object",
      "properties": {
        "rating1Field": {
          "type": "string"
        },
        "ratingBeskrivelseField": {
          "type": "string"
        },
        "limitField": {
          "format": "int32",
          "type": "integer"
        },
        "aktuellHendelseField": {
          "type": "string"
        },
        "delbGrunnfaktaField": {
          "type": "string"
        },
        "delbEierJurdiskField": {
          "type": "string"
        },
        "delbOkonomiField": {
          "type": "string"
        },
        "delbBetalingserfaringField": {
          "type": "string"
        }
      }
    },
    "HistoriskRating": {
      "type": "object",
      "properties": {
        "endrArField": {
          "format": "int32",
          "type": "integer"
        },
        "endrMndField": {
          "format": "int32",
          "type": "integer"
        },
        "ratingField": {
          "type": "string"
        },
        "limitField": {
          "format": "int32",
          "type": "integer"
        },
        "aktuellHendelseField": {
          "type": "string"
        },
        "regnArField": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Grunnfakta": {
      "type": "object",
      "properties": {
        "selskFormKodeField": {
          "type": "string"
        },
        "selskFormTekstField": {
          "type": "string"
        },
        "etablertArField": {
          "format": "int32",
          "type": "integer"
        },
        "etablertArFieldSpecified": {
          "type": "boolean"
        },
        "stiftetDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "aksjekapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "aksjekapitalStatusField": {
          "type": "string"
        },
        "registrertStedField": {
          "type": "string"
        },
        "registrertDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "revisorOrgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "revisorNavnField": {
          "type": "string"
        },
        "bankRegnrField": {
          "format": "int32",
          "type": "integer"
        },
        "bankNavnField": {
          "type": "string"
        },
        "bransjeDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BransjeData"
          }
        },
        "ansatteDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnsatteData"
          }
        }
      }
    },
    "Juridisk": {
      "type": "object",
      "properties": {
        "prokuraField": {
          "type": "string"
        },
        "signaturField": {
          "type": "string"
        },
        "eierStrukturField": {
          "type": "string"
        }
      }
    },
    "Verv": {
      "type": "object",
      "properties": {
        "internRefField": {
          "format": "int64",
          "type": "integer"
        },
        "fodtDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "fodtDatoFieldSpecified": {
          "type": "boolean"
        },
        "navnField": {
          "type": "string"
        },
        "telefonField": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "vervKodeField": {
          "type": "string"
        },
        "vervTekstField": {
          "type": "string"
        }
      }
    },
    "Aksjonar": {
      "type": "object",
      "properties": {
        "orgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "internRefField": {
          "format": "int64",
          "type": "integer"
        },
        "fodtDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "navnField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "eierandelField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Datterselskap": {
      "type": "object",
      "properties": {
        "orgnrField": {
          "format": "int64",
          "type": "integer"
        },
        "kodeTypeField": {
          "type": "string"
        },
        "kodeTekstField": {
          "type": "string"
        },
        "navnField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "eierandelField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "OkonomiEnk": {
      "type": "object",
      "properties": {
        "fodselsdatoEierField": {
          "format": "date-time",
          "type": "string"
        },
        "skatteArField": {
          "format": "int32",
          "type": "integer"
        },
        "formueField": {
          "format": "int64",
          "type": "integer"
        },
        "endringFormueField": {
          "format": "double",
          "type": "number"
        },
        "inntektField": {
          "format": "int64",
          "type": "integer"
        },
        "endringInntektField": {
          "format": "double",
          "type": "number"
        },
        "skattField": {
          "format": "int64",
          "type": "integer"
        },
        "skatteKlasseField": {
          "type": "string"
        },
        "skatteKlasseUtlField": {
          "type": "string"
        },
        "kommunenrField": {
          "format": "int32",
          "type": "integer"
        },
        "kommuneNavnField": {
          "type": "string"
        }
      }
    },
    "NokkeltallForetak": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "overskuddsprosentField": {
          "format": "double",
          "type": "number"
        },
        "rentedekningsgradField": {
          "format": "double",
          "type": "number"
        },
        "totalrentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "eKRentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "langLagerfinansField": {
          "format": "double",
          "type": "number"
        },
        "gjennomsnittLagerField": {
          "format": "double",
          "type": "number"
        },
        "egenkapitalAndelField": {
          "format": "double",
          "type": "number"
        },
        "tapsbufferField": {
          "format": "double",
          "type": "number"
        },
        "fremmedkapitalKostnadField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad1Field": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad2Field": {
          "format": "double",
          "type": "number"
        },
        "likviderProsentSalgField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "NokkeltallBransje": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "overskuddsprosentField": {
          "format": "double",
          "type": "number"
        },
        "rentedekningsgradField": {
          "format": "double",
          "type": "number"
        },
        "totalrentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "eKRentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "langLagerfinansField": {
          "format": "double",
          "type": "number"
        },
        "gjennomsnittLagerField": {
          "format": "double",
          "type": "number"
        },
        "egenkapitalAndelField": {
          "format": "double",
          "type": "number"
        },
        "tapsbufferField": {
          "format": "double",
          "type": "number"
        },
        "fremmedkapitalKostnadField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad1Field": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad2Field": {
          "format": "double",
          "type": "number"
        },
        "likviderProsentSalgField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "NokkeltallKonsern": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "overskuddsprosentField": {
          "format": "double",
          "type": "number"
        },
        "rentedekningsgradField": {
          "format": "double",
          "type": "number"
        },
        "totalrentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "eKRentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "langLagerfinansField": {
          "format": "double",
          "type": "number"
        },
        "gjennomsnittLagerField": {
          "format": "double",
          "type": "number"
        },
        "egenkapitalAndelField": {
          "format": "double",
          "type": "number"
        },
        "tapsbufferField": {
          "format": "double",
          "type": "number"
        },
        "fremmedkapitalKostnadField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad1Field": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad2Field": {
          "format": "double",
          "type": "number"
        },
        "likviderProsentSalgField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "BetaSammendrag": {
      "type": "object",
      "properties": {
        "antallInkassoField": {
          "format": "int32",
          "type": "integer"
        },
        "ajourDatoInkassoField": {
          "format": "date-time",
          "type": "string"
        },
        "antallPanterLosoreField": {
          "format": "int32",
          "type": "integer"
        },
        "ajourDatoLosoreField": {
          "format": "date-time",
          "type": "string"
        },
        "antallPanterEiendomField": {
          "format": "int32",
          "type": "integer"
        },
        "ajourDatoEiendomField": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BetaDetaljer": {
      "type": "object",
      "properties": {
        "registrertDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "betaGruppeKodeField": {
          "type": "string"
        },
        "betaGruppeTekstField": {
          "type": "string"
        },
        "betaTypeField": {
          "type": "string"
        },
        "betaTekstField": {
          "type": "string"
        },
        "betaBelopField": {
          "format": "int64",
          "type": "integer"
        },
        "kildeKodeField": {
          "type": "string"
        },
        "kildeTekstField": {
          "type": "string"
        },
        "kildeReferansenrField": {
          "format": "int64",
          "type": "integer"
        },
        "statusAnmerkningField": {
          "type": "string"
        },
        "statusDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "kreditorField": {
          "type": "string"
        }
      }
    },
    "Losore": {
      "type": "object",
      "properties": {
        "ajourDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "spesTekst1Field": {
          "type": "string"
        },
        "spesTekst2Field": {
          "type": "string"
        },
        "spesTekst3Field": {
          "type": "string"
        }
      }
    },
    "EiendomNorge": {
      "type": "object",
      "properties": {
        "svarEiendomNorgeField": {
          "type": "string"
        }
      }
    },
    "KonsernLink": {
      "type": "object",
      "properties": {
        "orgnrOversteMorField": {
          "format": "int32",
          "type": "integer"
        },
        "orgnrNaermesteMorField": {
          "format": "int32",
          "type": "integer"
        },
        "lopenrField": {
          "format": "int32",
          "type": "integer"
        },
        "nivaDeltagendeField": {
          "format": "int32",
          "type": "integer"
        },
        "landkodeDeltagendeField": {
          "type": "string"
        },
        "orgnrDeltagendeField": {
          "format": "int32",
          "type": "integer"
        },
        "navnDeltagendeField": {
          "type": "string"
        },
        "eierandelDeltagendeField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Scoring": {
      "type": "object",
      "properties": {
        "beslutningField": {
          "type": "string"
        },
        "arsaksDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArsaksData"
          }
        },
        "scoreField": {
          "format": "int32",
          "type": "integer"
        },
        "grenseAvslagField": {
          "format": "int32",
          "type": "integer"
        },
        "grenseGodkjentField": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OkonomiSammendragForetak": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "totalinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "resultatForSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "arsResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "sumEiendelerField": {
          "format": "int64",
          "type": "integer"
        },
        "overskuddsprosentField": {
          "format": "double",
          "type": "number"
        },
        "totalrentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "egenkapitalandelField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad1Field": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad2Field": {
          "format": "double",
          "type": "number"
        },
        "overskuddsprosentBransjeField": {
          "format": "double",
          "type": "number"
        },
        "totalrentabilitetBransjeField": {
          "format": "double",
          "type": "number"
        },
        "egenkapitalandelBransjeField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad1BransjeField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad2BransjeField": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "OkonomiSammendragKonsern": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "totalinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "resultatForSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "arsResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "sumEiendelerField": {
          "format": "int64",
          "type": "integer"
        },
        "overskuddsprosentField": {
          "format": "double",
          "type": "number"
        },
        "totalrentabilitetField": {
          "format": "double",
          "type": "number"
        },
        "egenkapitalandelField": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad1Field": {
          "format": "double",
          "type": "number"
        },
        "likviditetsgrad2Field": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "OkonomiDetaljerForetak": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "totalinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "salgsinntekterField": {
          "format": "int64",
          "type": "integer"
        },
        "annenDriftsinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "varekostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "beholdningsendringField": {
          "format": "int64",
          "type": "integer"
        },
        "lonnskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "avskrivningerField": {
          "format": "int64",
          "type": "integer"
        },
        "nedskrivningerField": {
          "format": "int64",
          "type": "integer"
        },
        "annenDriftskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "driftsResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "inntektInvDatterField": {
          "format": "int64",
          "type": "integer"
        },
        "inntektInvKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "inntektInvAnnenField": {
          "format": "int64",
          "type": "integer"
        },
        "renteinntektKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "renteinntektAnnenField": {
          "format": "int64",
          "type": "integer"
        },
        "finansinntektAnnenField": {
          "format": "int64",
          "type": "integer"
        },
        "finansinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "verdiendringMarFinOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "nedskrivningMarFinOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "nedskrivningFinAnleggsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "rentekostnadKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "annenRentekostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "annenFinanskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "finanskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "ordResultatForSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "skattOrdResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "ordResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "ekstraordInntektField": {
          "format": "int64",
          "type": "integer"
        },
        "ekstraordKostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "skattEkstraordResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "sumSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "minoritetsInteresserField": {
          "format": "int64",
          "type": "integer"
        },
        "arsResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "konsernbidragField": {
          "format": "int64",
          "type": "integer"
        },
        "utbytteField": {
          "format": "int64",
          "type": "integer"
        },
        "tilFondVurdForField": {
          "format": "int64",
          "type": "integer"
        },
        "tilAnnenEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "tapKravField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "OkonomiDetaljerKonsern": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "totalinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "salgsinntekterField": {
          "format": "int64",
          "type": "integer"
        },
        "annenDriftsinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "varekostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "beholdningsendringField": {
          "format": "int64",
          "type": "integer"
        },
        "lonnskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "avskrivningerField": {
          "format": "int64",
          "type": "integer"
        },
        "nedskrivningerField": {
          "format": "int64",
          "type": "integer"
        },
        "annenDriftskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "driftsResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "inntektInvDatterField": {
          "format": "int64",
          "type": "integer"
        },
        "inntektInvKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "inntektInvAnnenField": {
          "format": "int64",
          "type": "integer"
        },
        "renteinntektKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "renteinntektAnnenField": {
          "format": "int64",
          "type": "integer"
        },
        "finansinntektAnnenField": {
          "format": "int64",
          "type": "integer"
        },
        "finansinntektField": {
          "format": "int64",
          "type": "integer"
        },
        "verdiendringMarFinOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "nedskrivningMarFinOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "nedskrivningFinAnleggsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "rentekostnadKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "annenRentekostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "annenFinanskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "finanskostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "ordResultatForSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "skattOrdResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "ordResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "ekstraordInntektField": {
          "format": "int64",
          "type": "integer"
        },
        "ekstraordKostnadField": {
          "format": "int64",
          "type": "integer"
        },
        "skattEkstraordResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "sumSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "minoritetsInteresserField": {
          "format": "int64",
          "type": "integer"
        },
        "arsResultatField": {
          "format": "int64",
          "type": "integer"
        },
        "konsernbidragField": {
          "format": "int64",
          "type": "integer"
        },
        "utbytteField": {
          "format": "int64",
          "type": "integer"
        },
        "tilFondVurdForField": {
          "format": "int64",
          "type": "integer"
        },
        "tilAnnenEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "tapKravField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "EiendelerForetak": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "sumAnleggsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumImmatrielleEiendelerField": {
          "format": "int64",
          "type": "integer"
        },
        "forskningUtviklingField": {
          "format": "int64",
          "type": "integer"
        },
        "konsesjonerField": {
          "format": "int64",
          "type": "integer"
        },
        "utsattSkattefordelField": {
          "format": "int64",
          "type": "integer"
        },
        "goodwillField": {
          "format": "int64",
          "type": "integer"
        },
        "sumVarigeDriftsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "fastEiendomField": {
          "format": "int64",
          "type": "integer"
        },
        "maskinerAnleggField": {
          "format": "int64",
          "type": "integer"
        },
        "skipRiggFlyField": {
          "format": "int64",
          "type": "integer"
        },
        "driftsLosoreField": {
          "format": "int64",
          "type": "integer"
        },
        "sumFinansielleAnleggsmilderField": {
          "format": "int64",
          "type": "integer"
        },
        "investDatterField": {
          "format": "int64",
          "type": "integer"
        },
        "investAnnetKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "konsernfordringField": {
          "format": "int64",
          "type": "integer"
        },
        "investTilknyttetField": {
          "format": "int64",
          "type": "integer"
        },
        "lanTilknyttetField": {
          "format": "int64",
          "type": "integer"
        },
        "investAksjerField": {
          "format": "int64",
          "type": "integer"
        },
        "obligasjonerField": {
          "format": "int64",
          "type": "integer"
        },
        "pensjonsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "andreAnleggsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumVarerField": {
          "format": "int64",
          "type": "integer"
        },
        "lagerRavarerField": {
          "format": "int64",
          "type": "integer"
        },
        "lagerUferdigeVarerField": {
          "format": "int64",
          "type": "integer"
        },
        "lagerFerdigeVarerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumFordringerField": {
          "format": "int64",
          "type": "integer"
        },
        "fordringerKunderField": {
          "format": "int64",
          "type": "integer"
        },
        "fordringerAndreField": {
          "format": "int64",
          "type": "integer"
        },
        "fordringerKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "kravInnbetSelskapskapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "sumInvesteringerField": {
          "format": "int64",
          "type": "integer"
        },
        "aksjerKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "aksjerMarkedField": {
          "format": "int64",
          "type": "integer"
        },
        "obligasjonerMarkedField": {
          "format": "int64",
          "type": "integer"
        },
        "andreMarkedFinInvField": {
          "format": "int64",
          "type": "integer"
        },
        "andreFinInstField": {
          "format": "int64",
          "type": "integer"
        },
        "bankinnskuddField": {
          "format": "int64",
          "type": "integer"
        },
        "andreOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumEiendelerField": {
          "format": "int64",
          "type": "integer"
        },
        "pantstillelserField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "EiendelerKonsern": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "sumAnleggsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumImmatrielleEiendelerField": {
          "format": "int64",
          "type": "integer"
        },
        "forskningUtviklingField": {
          "format": "int64",
          "type": "integer"
        },
        "konsesjonerField": {
          "format": "int64",
          "type": "integer"
        },
        "utsattSkattefordelField": {
          "format": "int64",
          "type": "integer"
        },
        "goodwillField": {
          "format": "int64",
          "type": "integer"
        },
        "sumVarigeDriftsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "fastEiendomField": {
          "format": "int64",
          "type": "integer"
        },
        "maskinerAnleggField": {
          "format": "int64",
          "type": "integer"
        },
        "skipRiggFlyField": {
          "format": "int64",
          "type": "integer"
        },
        "driftsLosoreField": {
          "format": "int64",
          "type": "integer"
        },
        "sumFinansielleAnleggsmilderField": {
          "format": "int64",
          "type": "integer"
        },
        "investDatterField": {
          "format": "int64",
          "type": "integer"
        },
        "investAnnetKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "konsernfordringField": {
          "format": "int64",
          "type": "integer"
        },
        "investTilknyttetField": {
          "format": "int64",
          "type": "integer"
        },
        "lanTilknyttetField": {
          "format": "int64",
          "type": "integer"
        },
        "investAksjerField": {
          "format": "int64",
          "type": "integer"
        },
        "obligasjonerField": {
          "format": "int64",
          "type": "integer"
        },
        "pensjonsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "andreAnleggsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumVarerField": {
          "format": "int64",
          "type": "integer"
        },
        "lagerRavarerField": {
          "format": "int64",
          "type": "integer"
        },
        "lagerUferdigeVarerField": {
          "format": "int64",
          "type": "integer"
        },
        "lagerFerdigeVarerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumFordringerField": {
          "format": "int64",
          "type": "integer"
        },
        "fordringerKunderField": {
          "format": "int64",
          "type": "integer"
        },
        "fordringerAndreField": {
          "format": "int64",
          "type": "integer"
        },
        "fordringerKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "kravInnbetSelskapskapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "sumInvesteringerField": {
          "format": "int64",
          "type": "integer"
        },
        "aksjerKonsernField": {
          "format": "int64",
          "type": "integer"
        },
        "aksjerMarkedField": {
          "format": "int64",
          "type": "integer"
        },
        "obligasjonerMarkedField": {
          "format": "int64",
          "type": "integer"
        },
        "andreMarkedFinInvField": {
          "format": "int64",
          "type": "integer"
        },
        "andreFinInstField": {
          "format": "int64",
          "type": "integer"
        },
        "bankinnskuddField": {
          "format": "int64",
          "type": "integer"
        },
        "andreOmlopsmidlerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumEiendelerField": {
          "format": "int64",
          "type": "integer"
        },
        "pantstillelserField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "GjeldEgenkapitalForetak": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "sumEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "innskuttEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "selskapskapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "egneAksjerField": {
          "format": "int64",
          "type": "integer"
        },
        "overkursfondField": {
          "format": "int64",
          "type": "integer"
        },
        "opptjentEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "fondForVurdField": {
          "format": "int64",
          "type": "integer"
        },
        "annenEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "minoritetsinteresserField": {
          "format": "int64",
          "type": "integer"
        },
        "sumGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "avsetningForpliktelserField": {
          "format": "int64",
          "type": "integer"
        },
        "pensjonForpliktelserField": {
          "format": "int64",
          "type": "integer"
        },
        "utsattSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "andreAvsetningerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "annenLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "konvertibleLanLangField": {
          "format": "int64",
          "type": "integer"
        },
        "obligasjonsLanField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKredittLangField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKonsernLangField": {
          "format": "int64",
          "type": "integer"
        },
        "ansvarligLanekapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "ovrigLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "sumKortsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "konvertibleLanKortField": {
          "format": "int64",
          "type": "integer"
        },
        "sertifikatLanField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKredittKortField": {
          "format": "int64",
          "type": "integer"
        },
        "kassakredittField": {
          "format": "int64",
          "type": "integer"
        },
        "leverandorGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "betalbarSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "skyldOffentligAvgiftField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKonsernKortField": {
          "format": "int64",
          "type": "integer"
        },
        "utbytteField": {
          "format": "int64",
          "type": "integer"
        },
        "annenKortsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "sumGjeldEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "kassekredittlimitField": {
          "format": "int64",
          "type": "integer"
        },
        "skyldKonsernbidragField": {
          "format": "int64",
          "type": "integer"
        },
        "avdragLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "GjeldEgenkapitalKonsern": {
      "type": "object",
      "properties": {
        "regnskapsAvArField": {
          "format": "int32",
          "type": "integer"
        },
        "regnskapsAvMndField": {
          "format": "int32",
          "type": "integer"
        },
        "sumEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "innskuttEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "selskapskapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "egneAksjerField": {
          "format": "int64",
          "type": "integer"
        },
        "overkursfondField": {
          "format": "int64",
          "type": "integer"
        },
        "opptjentEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "fondForVurdField": {
          "format": "int64",
          "type": "integer"
        },
        "annenEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "minoritetsinteresserField": {
          "format": "int64",
          "type": "integer"
        },
        "sumGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "avsetningForpliktelserField": {
          "format": "int64",
          "type": "integer"
        },
        "pensjonForpliktelserField": {
          "format": "int64",
          "type": "integer"
        },
        "utsattSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "andreAvsetningerField": {
          "format": "int64",
          "type": "integer"
        },
        "sumLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "annenLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "konvertibleLanLangField": {
          "format": "int64",
          "type": "integer"
        },
        "obligasjonsLanField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKredittLangField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKonsernLangField": {
          "format": "int64",
          "type": "integer"
        },
        "ansvarligLanekapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "ovrigLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "sumKortsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "konvertibleLanKortField": {
          "format": "int64",
          "type": "integer"
        },
        "sertifikatLanField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKredittKortField": {
          "format": "int64",
          "type": "integer"
        },
        "kassakredittField": {
          "format": "int64",
          "type": "integer"
        },
        "leverandorGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "betalbarSkattField": {
          "format": "int64",
          "type": "integer"
        },
        "skyldOffentligAvgiftField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldKonsernKortField": {
          "format": "int64",
          "type": "integer"
        },
        "utbytteField": {
          "format": "int64",
          "type": "integer"
        },
        "annenKortsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        },
        "sumGjeldEgenkapitalField": {
          "format": "int64",
          "type": "integer"
        },
        "kassekredittlimitField": {
          "format": "int64",
          "type": "integer"
        },
        "skyldKonsernbidragField": {
          "format": "int64",
          "type": "integer"
        },
        "avdragLangsiktigGjeldField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "AvdelingData": {
      "type": "object",
      "properties": {
        "antallAnsatteField": {
          "format": "int32",
          "type": "integer"
        },
        "antallAnsatteFieldSpecified": {
          "type": "boolean"
        },
        "telefonField": {
          "format": "int32",
          "type": "integer"
        },
        "telefonFieldSpecified": {
          "type": "boolean"
        },
        "telefaxField": {
          "format": "int32",
          "type": "integer"
        },
        "telefaxFieldSpecified": {
          "type": "boolean"
        },
        "stiftetDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "bransjeKodeField": {
          "type": "string"
        },
        "bransjeTekstField": {
          "type": "string"
        },
        "dagligLederField": {
          "type": "string"
        },
        "hovedforetakOrgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "hovedforetakOrgnrFieldSpecified": {
          "type": "boolean"
        },
        "hovedforetakDunsnrField": {
          "format": "int32",
          "type": "integer"
        },
        "hovedforetakDunsnrFieldSpecified": {
          "type": "boolean"
        },
        "hovedforetakNavnField": {
          "type": "string"
        }
      }
    },
    "Rettighetshavere": {
      "type": "object",
      "properties": {
        "internreferanseField": {
          "format": "int64",
          "type": "integer"
        },
        "fodtDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "fodtDatoFieldSpecified": {
          "type": "boolean"
        },
        "navnField": {
          "type": "string"
        },
        "adresseField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "andelField": {
          "format": "double",
          "type": "number"
        },
        "indirekteEierField": {
          "type": "boolean"
        }
      }
    },
    "EiendomNorgeListe": {
      "type": "object",
      "properties": {
        "kommunenrField": {
          "format": "int32",
          "type": "integer"
        },
        "kommuneNavnField": {
          "type": "string"
        },
        "gardnrField": {
          "format": "int32",
          "type": "integer"
        },
        "bruksnrField": {
          "format": "int32",
          "type": "integer"
        },
        "festenrField": {
          "format": "int32",
          "type": "integer"
        },
        "seksjonsnrField": {
          "format": "int32",
          "type": "integer"
        },
        "typeField": {
          "type": "string"
        },
        "andelField": {
          "type": "string"
        }
      }
    },
    "FullmaktForetak": {
      "type": "object",
      "properties": {
        "dunsnrField": {
          "format": "int32",
          "type": "integer"
        },
        "orgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "navnField": {
          "type": "string"
        },
        "adresseField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "statusKodeField": {
          "type": "string"
        },
        "statusTekstField": {
          "type": "string"
        },
        "selskapsformField": {
          "type": "string"
        },
        "prokuraKodeField": {
          "type": "string"
        },
        "prokuraTekstField": {
          "type": "string"
        },
        "signaturKodeField": {
          "type": "string"
        },
        "signaturTekstField": {
          "type": "string"
        },
        "fullmaktPersonField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FullmaktPerson"
          }
        }
      }
    },
    "Meldinger": {
      "type": "object",
      "properties": {
        "meldingsKodeField": {
          "format": "int32",
          "type": "integer"
        },
        "meldingsTekstField": {
          "type": "string"
        }
      }
    },
    "BransjeData": {
      "type": "object",
      "properties": {
        "bransjeKodeField": {
          "format": "int32",
          "type": "integer"
        },
        "bransjeTekstField": {
          "type": "string"
        }
      }
    },
    "AnsatteData": {
      "type": "object",
      "properties": {
        "ansatteArField": {
          "format": "int32",
          "type": "integer"
        },
        "ansatteAntallField": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ArsaksData": {
      "type": "object",
      "properties": {
        "arsaksKodeField": {
          "type": "string"
        },
        "arsaksTekstField": {
          "type": "string"
        }
      }
    },
    "FullmaktPerson": {
      "type": "object",
      "properties": {
        "internreferanseField": {
          "format": "int64",
          "type": "integer"
        },
        "fodtDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "fodtDatoFieldSpecified": {
          "type": "boolean"
        },
        "navnField": {
          "type": "string"
        },
        "adresseField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "fullmaktTypeKodeField": {
          "type": "string"
        },
        "fullmaktTypeTekstField": {
          "type": "string"
        },
        "fullmaktKodeField": {
          "type": "string"
        },
        "fullmaktTekstField": {
          "type": "string"
        },
        "prioritetField": {
          "format": "int32",
          "type": "integer"
        },
        "prioritetFieldSpecified": {
          "type": "boolean"
        },
        "antallField": {
          "format": "int32",
          "type": "integer"
        },
        "antallFieldSpecified": {
          "type": "boolean"
        },
        "obligatoriskField": {
          "type": "boolean"
        },
        "obligatoriskFieldSpecified": {
          "type": "boolean"
        },
        "vervField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VervData"
          }
        }
      }
    },
    "VervData": {
      "type": "object",
      "properties": {
        "vervKodeField": {
          "type": "string"
        },
        "vervTekstField": {
          "type": "string"
        }
      }
    },
    "LeiRecord": {
      "type": "object",
      "properties": {
        "Lei": {
          "type": "string"
        },
        "Entity": {
          "$ref": "#/definitions/LeiEntity"
        },
        "Registration": {
          "$ref": "#/definitions/LeiRegistration"
        },
        "Extension": {
          "$ref": "#/definitions/LeiExtension"
        }
      }
    },
    "LeiEntity": {
      "type": "object",
      "properties": {
        "HeadquartersAddress": {
          "$ref": "#/definitions/LeiEntityAddress"
        },
        "LegalAddress": {
          "$ref": "#/definitions/LeiEntityAddress"
        },
        "LegalJurisdiction": {
          "type": "string"
        },
        "LegalName": {
          "type": "string"
        },
        "EntityStatus": {
          "type": "string"
        },
        "EntityCategory": {
          "type": "string"
        },
        "LegalForm": {
          "$ref": "#/definitions/LeiLegalForm"
        },
        "RegistrationAuthority": {
          "$ref": "#/definitions/LeiRegistrationAuthority"
        }
      }
    },
    "LeiRegistration": {
      "type": "object",
      "properties": {
        "InitialRegistrationDate": {
          "format": "date-time",
          "type": "string"
        },
        "RegistrationStatus": {
          "type": "string"
        },
        "ValidationSources": {
          "type": "string"
        },
        "LastUpdateDate": {
          "format": "date-time",
          "type": "string"
        },
        "NextRenewalDate": {
          "format": "date-time",
          "type": "string"
        },
        "ManagingLou": {
          "$ref": "#/definitions/ManagingLou"
        }
      }
    },
    "LeiExtension": {
      "type": "object",
      "properties": {
        "Normalizations": {
          "$ref": "#/definitions/LeiNormalizations"
        }
      }
    },
    "LeiEntityAddress": {
      "type": "object",
      "properties": {
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "FirstAddressLine": {
          "type": "string"
        },
        "AdditionalAddressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PostalCode": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        }
      }
    },
    "LeiLegalForm": {
      "type": "object",
      "properties": {
        "OtherLegalForm": {
          "type": "string"
        },
        "EntityLegalFormCode": {
          "type": "string"
        }
      }
    },
    "LeiRegistrationAuthority": {
      "type": "object",
      "properties": {
        "RegistrationAuthorityId": {
          "type": "string"
        },
        "RegistrationAuthorityEntityId": {
          "type": "string"
        }
      }
    },
    "ManagingLou": {
      "type": "object",
      "properties": {
        "Lei": {
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "Operational": {
          "type": "string"
        },
        "EndorsementDate": {
          "format": "date-time",
          "type": "string"
        },
        "Sponsor": {
          "type": "string"
        },
        "SponsorCountry": {
          "type": "string"
        }
      }
    },
    "LeiNormalizations": {
      "type": "object",
      "properties": {
        "LegalName": {
          "$ref": "#/definitions/LeiNormalization"
        }
      }
    },
    "LeiNormalization": {
      "type": "object",
      "properties": {
        "Cleaned": {
          "type": "string"
        },
        "Normalized": {
          "type": "string"
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "properties": {
        "next_url": {
          "type": "string"
        },
        "Start": {
          "format": "int32",
          "type": "integer"
        },
        "NumFound": {
          "format": "int32",
          "type": "integer"
        },
        "Rows": {
          "format": "int32",
          "type": "integer"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeiRecord"
          }
        }
      }
    },
    "Person.CreditCheckPersonResponse": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string"
        },
        "Report": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "Score": {
          "format": "int32",
          "type": "integer"
        },
        "ScoreDecision": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "Age": {
          "format": "int32",
          "type": "integer"
        },
        "Gender": {
          "type": "string"
        },
        "NumberOfPaymentDefaults": {
          "format": "int32",
          "type": "integer"
        },
        "PaymentDefaultsAmount": {
          "format": "double",
          "type": "number"
        },
        "IncomeAndFortune": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.Economy"
          }
        },
        "DetailedInformation": {
          "$ref": "#/definitions/Person.HentPersonResponse"
        }
      },
      "example": {
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
        "Report": "Uri for pdf report",
        "Name": "TEST TESTESEN",
        "Address": "TESTVEIEN 5",
        "City": "BERGEN",
        "PostalCode": "5551",
        "Score": 44,
        "ScoreDecision": "Approved",
        "DateOfBirth": "31.06.1990",
        "Age": 26,
        "Gender": "MANN",
        "NumberOfPaymentDefaults": 1,
        "PaymentDefaultsAmount": 5862.0,
        "IncomeAndFortune": [
          {
            "Year": 2015,
            "NetIncome": 511111.0,
            "IncomeChange": 0.0,
            "Fortune": 21345.0,
            "AssessedTax": 111111.0,
            "TaxClass": "1E",
            "Municipal": "OSLO",
            "MunicipalNumber": "301"
          },
          {
            "Year": 2014,
            "NetIncome": 511111.0,
            "IncomeChange": 360.0,
            "Fortune": 213345.0,
            "AssessedTax": 111111.0,
            "TaxClass": "1E",
            "Municipal": "OSLO",
            "MunicipalNumber": "301"
          },
          {
            "Year": 2013,
            "NetIncome": 511111.0,
            "IncomeChange": 0.0,
            "Fortune": 0.0,
            "AssessedTax": 11111.0,
            "TaxClass": "1E",
            "Municipal": "BERGEN",
            "MunicipalNumber": "222"
          }
        ],
        "DetailedInformation": {}
      }
    },
    "Person.Economy": {
      "type": "object",
      "properties": {
        "Year": {
          "format": "int32",
          "type": "integer"
        },
        "NetIncome": {
          "format": "double",
          "type": "number"
        },
        "IncomeChange": {
          "format": "double",
          "type": "number"
        },
        "Fortune": {
          "format": "double",
          "type": "number"
        },
        "AssessedTax": {
          "format": "double",
          "type": "number"
        },
        "TaxClass": {
          "type": "string"
        },
        "Municipal": {
          "type": "string"
        },
        "MunicipalNumber": {
          "type": "string"
        }
      }
    },
    "Person.HentPersonResponse": {
      "type": "object",
      "properties": {
        "identifikasjonField": {
          "$ref": "#/definitions/Person.Identifikasjon"
        },
        "navnAdresseField": {
          "$ref": "#/definitions/Person.NavnAdresse"
        },
        "scoringField": {
          "$ref": "#/definitions/Person.Scoring"
        },
        "delomraderField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.Delomrader"
          }
        },
        "betaSammendragField": {
          "$ref": "#/definitions/Person.BetaSammendrag"
        },
        "betaDetaljerField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.BetaDetaljer"
          }
        },
        "ligningField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.Ligning"
          }
        },
        "disponibelInntektField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.DisponibelInntekt"
          }
        },
        "naringsInteresserField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.NaringsInteresser"
          }
        },
        "eiendomNorgeField": {
          "$ref": "#/definitions/Person.EiendomNorge"
        },
        "eiendomListeField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.EiendomListe"
          }
        },
        "losoreField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.Losore"
          }
        },
        "tidligereNavnAdresseField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.TidligereNavnAdresse"
          }
        },
        "fullmaktForetakField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.FullmaktForetak"
          }
        },
        "meldingerField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.Meldinger"
          }
        }
      }
    },
    "Person.Identifikasjon": {
      "type": "object",
      "properties": {
        "internrefField": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Person.NavnAdresse": {
      "type": "object",
      "properties": {
        "statusField": {
          "type": "string"
        },
        "statusDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "fodselsdatoField": {
          "format": "date-time",
          "type": "string"
        },
        "navnField": {
          "type": "string"
        },
        "adresseField": {
          "type": "string"
        },
        "postnrField": {
          "type": "string"
        },
        "poststedField": {
          "type": "string"
        },
        "kommuneField": {
          "type": "string"
        },
        "fylkeField": {
          "type": "string"
        },
        "alderField": {
          "format": "int32",
          "type": "integer"
        },
        "kjonnField": {
          "type": "string"
        },
        "telefonField": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Person.Scoring": {
      "type": "object",
      "properties": {
        "beslutningField": {
          "type": "string"
        },
        "arsaksDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.ArsaksData"
          }
        },
        "scoreField": {
          "format": "int32",
          "type": "integer"
        },
        "grenseAvslagField": {
          "format": "int32",
          "type": "integer"
        },
        "grenseGodkjentField": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Person.Delomrader": {
      "type": "object",
      "properties": {
        "delomradeKodeField": {
          "type": "string"
        },
        "delomradeTekstField": {
          "type": "string"
        },
        "bedommelseKodeField": {
          "type": "string"
        },
        "bedommelseTekstField": {
          "type": "string"
        }
      }
    },
    "Person.BetaSammendrag": {
      "type": "object",
      "properties": {
        "antallInkassoField": {
          "format": "int32",
          "type": "integer"
        },
        "ajourDatoInkassoField": {
          "format": "date-time",
          "type": "string"
        },
        "antallPanterLosoreField": {
          "format": "int32",
          "type": "integer"
        },
        "ajourDatoLosoreField": {
          "format": "date-time",
          "type": "string"
        },
        "antallPanterEiendomField": {
          "format": "int32",
          "type": "integer"
        },
        "ajourDatoEiendomField": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Person.BetaDetaljer": {
      "type": "object",
      "properties": {
        "registrertDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "betaGruppeKodeField": {
          "type": "string"
        },
        "betaGruppeTekstField": {
          "type": "string"
        },
        "betaTypeField": {
          "type": "string"
        },
        "betaTekstField": {
          "type": "string"
        },
        "betaBelopField": {
          "format": "int64",
          "type": "integer"
        },
        "kildeKodeField": {
          "type": "string"
        },
        "kildeTekstField": {
          "type": "string"
        },
        "kildeReferansenrField": {
          "format": "int64",
          "type": "integer"
        },
        "statusAnmerkningField": {
          "type": "string"
        },
        "statusDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "kreditorField": {
          "type": "string"
        }
      }
    },
    "Person.Ligning": {
      "type": "object",
      "properties": {
        "skatteArField": {
          "format": "int32",
          "type": "integer"
        },
        "formueField": {
          "format": "int64",
          "type": "integer"
        },
        "endringFormueField": {
          "format": "double",
          "type": "number"
        },
        "inntektField": {
          "format": "int64",
          "type": "integer"
        },
        "endringInntektField": {
          "format": "double",
          "type": "number"
        },
        "skattField": {
          "format": "int64",
          "type": "integer"
        },
        "skatteKlasseField": {
          "type": "string"
        },
        "skatteKlasseUtlField": {
          "type": "string"
        },
        "kommunenrField": {
          "type": "string"
        },
        "kommuneNavnField": {
          "type": "string"
        },
        "bruttoInntektField": {
          "format": "int64",
          "type": "integer"
        },
        "gjeldsgrad1Field": {
          "format": "double",
          "type": "number"
        },
        "gjeldsgrad2Field": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Person.DisponibelInntekt": {
      "type": "object",
      "properties": {
        "kodeField": {
          "format": "int32",
          "type": "integer"
        },
        "beskrivelseField": {
          "type": "string"
        }
      }
    },
    "Person.NaringsInteresser": {
      "type": "object",
      "properties": {
        "orgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "statusKodeField": {
          "type": "string"
        },
        "statusTekstField": {
          "type": "string"
        },
        "statusDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "navnField": {
          "type": "string"
        },
        "selskFormField": {
          "type": "string"
        },
        "rolleField": {
          "type": "string"
        },
        "eierandelField": {
          "format": "double",
          "type": "number"
        },
        "vervKodeField": {
          "type": "string"
        },
        "vervTekstField": {
          "type": "string"
        }
      }
    },
    "Person.EiendomNorge": {
      "type": "object",
      "properties": {
        "svarEiendomNorgeField": {
          "type": "string"
        }
      }
    },
    "Person.EiendomListe": {
      "type": "object",
      "properties": {
        "kommunenrField": {
          "type": "string"
        },
        "kommuneNavnField": {
          "type": "string"
        },
        "gardnrField": {
          "format": "int32",
          "type": "integer"
        },
        "bruksnrField": {
          "format": "int32",
          "type": "integer"
        },
        "festenrField": {
          "format": "int32",
          "type": "integer"
        },
        "seksjonsnrField": {
          "format": "int32",
          "type": "integer"
        },
        "typeField": {
          "type": "string"
        },
        "andelField": {
          "type": "string"
        }
      }
    },
    "Person.Losore": {
      "type": "object",
      "properties": {
        "ajourDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "spesTekst1Field": {
          "type": "string"
        },
        "spesTekst2Field": {
          "type": "string"
        },
        "spesTekst3Field": {
          "type": "string"
        }
      }
    },
    "Person.TidligereNavnAdresse": {
      "type": "object",
      "properties": {
        "tidligereNavnAdresse1Field": {
          "type": "string"
        },
        "endringsDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "endringsTypeField": {
          "type": "string"
        },
        "tidligerePostAdresseField": {
          "type": "string"
        }
      }
    },
    "Person.FullmaktForetak": {
      "type": "object",
      "properties": {
        "dunsnrField": {
          "format": "int32",
          "type": "integer"
        },
        "orgnrField": {
          "format": "int32",
          "type": "integer"
        },
        "navnField": {
          "type": "string"
        },
        "adresseField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "statusKodeField": {
          "type": "string"
        },
        "statusTekstField": {
          "type": "string"
        },
        "selskapsformField": {
          "type": "string"
        },
        "prokuraKodeField": {
          "type": "string"
        },
        "prokuraTekstField": {
          "type": "string"
        },
        "signaturKodeField": {
          "type": "string"
        },
        "signaturTekstField": {
          "type": "string"
        },
        "fullmaktPersonField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.FullmaktPerson"
          }
        }
      }
    },
    "Person.Meldinger": {
      "type": "object",
      "properties": {
        "meldingsKodeField": {
          "format": "int32",
          "type": "integer"
        },
        "meldingsTekstField": {
          "type": "string"
        }
      }
    },
    "Person.ArsaksData": {
      "type": "object",
      "properties": {
        "arsaksKodeField": {
          "type": "string"
        },
        "arsaksTekstField": {
          "type": "string"
        }
      }
    },
    "Person.FullmaktPerson": {
      "type": "object",
      "properties": {
        "internreferanseField": {
          "format": "int64",
          "type": "integer"
        },
        "fodtDatoField": {
          "format": "date-time",
          "type": "string"
        },
        "fodtDatoFieldSpecified": {
          "type": "boolean"
        },
        "navnField": {
          "type": "string"
        },
        "adresseField": {
          "type": "string"
        },
        "postnrField": {
          "format": "int32",
          "type": "integer"
        },
        "poststedField": {
          "type": "string"
        },
        "fullmaktTypeKodeField": {
          "type": "string"
        },
        "fullmaktTypeTekstField": {
          "type": "string"
        },
        "fullmaktKodeField": {
          "type": "string"
        },
        "fullmaktTekstField": {
          "type": "string"
        },
        "prioritetField": {
          "format": "int32",
          "type": "integer"
        },
        "prioritetFieldSpecified": {
          "type": "boolean"
        },
        "antallField": {
          "format": "int32",
          "type": "integer"
        },
        "antallFieldSpecified": {
          "type": "boolean"
        },
        "obligatoriskField": {
          "type": "boolean"
        },
        "obligatoriskFieldSpecified": {
          "type": "boolean"
        },
        "vervField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person.VervData"
          }
        }
      }
    },
    "Person.VervData": {
      "type": "object",
      "properties": {
        "vervKodeField": {
          "type": "string"
        },
        "vervTekstField": {
          "type": "string"
        }
      }
    },
    "Person.PersonInformation": {
      "type": "object",
      "properties": {
        "Firstname": {
          "type": "string"
        },
        "Middlename": {
          "type": "string"
        },
        "Lastname": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "ZipCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Gender": {
          "type": "string"
        },
        "RawJson": {
          "type": "string"
        },
        "RequestId": {
          "type": "string"
        },
        "Dead": {
          "format": "date-time",
          "type": "string"
        },
        "Source": {
          "type": "string"
        }
      },
      "example": {
        "Firstname": "Kari",
        "Middlename": "",
        "Lastname": "Normann",
        "DateOfBirth": "22.08.88",
        "Address": "Testveien 123",
        "ZipCode": "5454",
        "City": "Bergen",
        "Mobile": "11111111",
        "Phone": "12345657",
        "Gender": "Female",
        "RawJson": "This json-string contains all the raw data received from matchit",
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3"
      }
    },
    "Person.OfficialPersonRegistryResponse": {
      "type": "object",
      "properties": {
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "MiddleName": {
          "type": "string"
        },
        "Fullname": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "Gender": {
          "type": "string"
        },
        "RawJson": {
          "type": "string"
        },
        "RequestId": {
          "type": "string"
        }
      },
      "example": {
        "FirstName": "EDVARD",
        "LastName": "POST",
        "MiddleName": "FOE",
        "Fullname": "POST EDVARD FOE",
        "Address": "KARL ALFRED FOES GATE 113 A",
        "Address2": "POSTBOKS 54321 SENTRUMSAKTIGJA",
        "City": "GALTERUD",
        "PostalCode": "2223",
        "Gender": "Male",
        "RawJson": "This json contains all information from the infotorg response",
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3"
      }
    },
    "SignatureRights": {
      "type": "object",
      "properties": {
        "MvaNumber": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Signatur": {
          "$ref": "#/definitions/SignatureObject"
        },
        "Prokura": {
          "$ref": "#/definitions/SignatureObject"
        },
        "Report": {
          "type": "string"
        },
        "RequestId": {
          "type": "string"
        },
        "ReportId": {
          "type": "string"
        }
      },
      "example": {
        "MvaNumber": 123456789,
        "Name": "Kopp Vedkløyveri AS",
        "Signatur": {
          "RequirementsDescription": "Styreleder pluss 2 styremedlemmer",
          "Required": {
            "List": [
              {
                "Name": "Test Person",
                "DateOfBirth": "250584"
              }
            ]
          },
          "Others": {
            "RequiredNumberOfOthers": 2,
            "List": [
              {
                "Name": "Kari Normann",
                "DateOfBirth": "080890"
              },
              {
                "Name": "Ola Normann",
                "DateOfBirth": "211090"
              },
              {
                "Name": "Test Testesen",
                "DateOfBirth": "201090"
              }
            ]
          }
        },
        "Prokura": {
          "RequirementsDescription": "Daglig leder alene",
          "Required": {
            "List": [
              {
                "Name": "Edvard Post",
                "DateOfBirth": "060657"
              }
            ]
          },
          "Others": {
            "RequiredNumberOfOthers": 0,
            "List": []
          }
        }
      }
    },
    "SignatureObject": {
      "type": "object",
      "properties": {
        "RequirementsDescription": {
          "type": "string"
        },
        "Required": {
          "$ref": "#/definitions/RequiredSignatures"
        },
        "Others": {
          "$ref": "#/definitions/OtherSignatures"
        }
      }
    },
    "RequiredSignatures": {
      "type": "object",
      "properties": {
        "List": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        }
      }
    },
    "OtherSignatures": {
      "type": "object",
      "properties": {
        "RequiredNumberOfOthers": {
          "format": "int32",
          "type": "integer"
        },
        "List": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        }
      }
    },
    "Signature": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "Role": {
          "type": "string"
        }
      }
    },
    "SignatureCheckRequest": {
      "type": "object",
      "properties": {
        "Organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationRequest"
          }
        }
      },
      "example": {
        "Organizations": [
          {
            "OrgNumber": "123456789",
            "Prokura": true,
            "Signature": false,
            "Signatures": [
              {
                "Name": "Firstname Lastname",
                "DateOfBirth": "291144"
              },
              {
                "Name": "Firstname Middlename Lastname",
                "DateOfBirth": "230176"
              }
            ]
          }
        ]
      }
    },
    "OrganizationRequest": {
      "type": "object",
      "properties": {
        "OrgNumber": {
          "type": "string"
        },
        "Prokura": {
          "type": "boolean"
        },
        "Signature": {
          "type": "boolean"
        },
        "Signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckSignature"
          }
        }
      }
    },
    "CheckSignature": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        }
      }
    },
    "SignatureStatusResponse": {
      "type": "object",
      "properties": {
        "RequestId": {
          "type": "string"
        },
        "Organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationResponse"
          }
        }
      },
      "example": {
        "RequestId": "be6b0d54-0cf2-41a2-a56d-78718aa01bb3",
        "Organizations": [
          {
            "MvaNumber": 123456789,
            "Prokura": "valid",
            "Signature": "notchecked",
            "Report": "Uri to report in pdf format"
          },
          {
            "MvaNumber": 987654321,
            "Prokura": "valid",
            "Signature": "notvalid",
            "Report": "Uri to report in pdf format"
          }
        ]
      }
    },
    "OrganizationResponse": {
      "type": "object",
      "properties": {
        "MvaNumber": {
          "format": "int32",
          "type": "integer"
        },
        "Prokura": {
          "type": "string"
        },
        "Signature": {
          "type": "string"
        },
        "Report": {
          "type": "string"
        }
      }
    },
    "Account": {
      "required": [
        "Name",
        "MvaNumber",
        "CompanyPhone",
        "CompanyEmail"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Account Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "CustomerNumber": {
          "description": "Uni micro customer number",
          "type": "string"
        },
        "Resources": {
          "$ref": "#/definitions/Resources"
        },
        "SlaTag": {
          "description": "Sla agreement",
          "type": "string"
        },
        "TestAccount": {
          "description": "Test account",
          "type": "boolean"
        },
        "Enabled": {
          "description": "Account enabled",
          "type": "boolean"
        },
        "Name": {
          "description": "Name of the account owner (company)",
          "type": "string"
        },
        "MvaNumber": {
          "description": "Mva / Organization number",
          "type": "string"
        },
        "CompanyPhone": {
          "type": "string"
        },
        "CompanyEmail": {
          "type": "string"
        },
        "CompanyUrl": {
          "type": "string"
        },
        "Contact": {
          "$ref": "#/definitions/Contact"
        },
        "Address": {
          "$ref": "#/definitions/Address"
        },
        "Dealer": {
          "$ref": "#/definitions/DealerInfo"
        },
        "Settings": {
          "$ref": "#/definitions/Settings"
        },
        "Country": {
          "type": "string"
        }
      },
      "example": {
        "Id": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "CustomerNumber": "100000",
        "Resources": {
          "LogoUrl": "",
          "CssUrl": ""
        },
        "TestAccount": false,
        "Enabled": false,
        "Name": "Stark Industries",
        "MvaNumber": "123456789",
        "CompanyPhone": "+47111111111",
        "CompanyEmail": "ironman@starkindustries.com",
        "CompanyUrl": "https://tony.starkindustries.com",
        "Contact": {
          "Name": "Tony Stark",
          "Phone": "",
          "Mobile": "+4712345678",
          "Email": "tony@starkindustries.com"
        },
        "Address": {
          "Address1": "10-8-80 Malibu Point",
          "PostalCode": "90265",
          "City": "California",
          "Country": "US"
        },
        "Dealer": {
          "Id": "312101e2-d247-4a35-a174-a03be79433b6",
          "Reference": "344455676"
        },
        "Settings": {
          "SMSSender": "Stark Industries"
        }
      },
      "x-nullable": true
    },
    "Resources": {
      "description": "Logo / Styling",
      "type": "object",
      "properties": {
        "LogoUrl": {
          "description": "The logo uploaded to this account",
          "type": "string"
        },
        "CssUrl": {
          "description": "Custom css uploaded to this account",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "Contact": {
      "description": "Company contact person",
      "required": [
        "Name",
        "Mobile",
        "Email"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Mobile": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "Address": {
      "description": "Company address",
      "type": "object",
      "properties": {
        "Address1": {
          "type": "string"
        },
        "Address2": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "DealerInfo": {
      "description": "Dealer information",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Reference": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "Settings": {
      "description": "Other account settings",
      "type": "object",
      "properties": {
        "SMSSender": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "CreateAccountRequest": {
      "required": [
        "Name",
        "MvaNumber",
        "CompanyPhone",
        "CompanyEmail"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the account owner (company)",
          "type": "string"
        },
        "MvaNumber": {
          "description": "Mva / Organization number",
          "type": "string"
        },
        "CompanyPhone": {
          "type": "string"
        },
        "CompanyEmail": {
          "type": "string"
        },
        "CompanyUrl": {
          "type": "string"
        },
        "Contact": {
          "$ref": "#/definitions/Contact"
        },
        "Address": {
          "$ref": "#/definitions/Address"
        },
        "Dealer": {
          "$ref": "#/definitions/DealerInfo"
        },
        "Settings": {
          "$ref": "#/definitions/Settings"
        },
        "Country": {
          "type": "string"
        }
      },
      "example": {
        "Name": "Stark Industries",
        "MvaNumber": "123456789",
        "CompanyPhone": "+47111111111",
        "CompanyEmail": "ironman@starkindustries.com",
        "CompanyUrl": "https://tony.starkindustries.com",
        "Contact": {
          "Name": "Tony Stark",
          "Phone": "",
          "Mobile": "+4712345678",
          "Email": "tony@starkindustries.com"
        },
        "Address": {
          "Address1": "10-8-80 Malibu Point",
          "PostalCode": "90265",
          "City": "California",
          "Country": "US"
        },
        "Dealer": {
          "Id": "312101e2-d247-4a35-a174-a03be79433b6",
          "Reference": "344455676"
        },
        "Settings": {
          "SMSSender": "Stark Industries"
        }
      },
      "x-nullable": true
    },
    "UpdateAccountRequest": {
      "required": [
        "Id",
        "Name",
        "MvaNumber",
        "CompanyPhone",
        "CompanyEmail"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Account Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "Name of the account owner (company)",
          "type": "string"
        },
        "MvaNumber": {
          "description": "Mva / Organization number",
          "type": "string"
        },
        "CompanyPhone": {
          "type": "string"
        },
        "CompanyEmail": {
          "type": "string"
        },
        "CompanyUrl": {
          "type": "string"
        },
        "Contact": {
          "$ref": "#/definitions/Contact"
        },
        "Address": {
          "$ref": "#/definitions/Address"
        },
        "Dealer": {
          "$ref": "#/definitions/DealerInfo"
        },
        "Settings": {
          "$ref": "#/definitions/Settings"
        },
        "Country": {
          "type": "string"
        }
      },
      "example": {
        "Id": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "Name": "Stark Industries",
        "MvaNumber": "123456789",
        "CompanyPhone": "+47111111111",
        "CompanyEmail": "ironman@starkindustries.com",
        "CompanyUrl": "https://tony.starkindustries.com",
        "Contact": {
          "Name": "Tony Stark",
          "Phone": "",
          "Mobile": "+4712345678",
          "Email": "tony@starkindustries.com"
        },
        "Address": {
          "Address1": "10-8-80 Malibu Point",
          "PostalCode": "90265",
          "City": "California",
          "Country": "US"
        },
        "Dealer": {
          "Id": "312101e2-d247-4a35-a174-a03be79433b6",
          "Reference": "344455676"
        },
        "Settings": {
          "SMSSender": "Stark Industries"
        }
      },
      "x-nullable": true
    },
    "AccountLogo": {
      "required": [
        "AccountId",
        "Base64EncodedLogo",
        "FileName"
      ],
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Base64EncodedLogo": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "Base64EncodedLogo": "This string has to contain a base64 encoded image",
        "FileName": "logo.png"
      },
      "x-nullable": true
    },
    "adminStyling": {
      "required": [
        "AccountId",
        "Base64EncodedCssData",
        "FileName"
      ],
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Base64EncodedCssData": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "Base64EncodedCssData": "This string has to contain base64 encoded css data",
        "FileName": "starkindustries.css"
      },
      "x-nullable": true
    },
    "AccountListItem": {
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "type": "string"
        },
        "OrgNo": {
          "type": "string"
        },
        "UniCustomerNo": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastModified": {
          "format": "date-time",
          "type": "string"
        },
        "DealerId": {
          "type": "string"
        },
        "DealerName": {
          "type": "string"
        },
        "DealerReference": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        }
      },
      "x-nullable": true
    },
    "AccountNameItem": {
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        }
      },
      "x-nullable": true
    },
    "Dealer": {
      "required": [
        "Id",
        "Name",
        "CustomerNumber"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "type": "string"
        },
        "CustomerNumber": {
          "format": "int32",
          "type": "integer"
        },
        "MvaNumber": {
          "type": "string"
        },
        "CompanyPhone": {
          "type": "string"
        },
        "CompanyEmail": {
          "type": "string"
        },
        "CompanyUrl": {
          "type": "string"
        },
        "Onboarding": {
          "$ref": "#/definitions/Onboarding"
        }
      },
      "example": {
        "Id": "0910d29f-9dd3-44fb-8e74-f16c13f3ba9c",
        "Name": "Marvel",
        "CustomerNumber": 10000001,
        "MvaNumber": "987654321",
        "CompanyPhone": "+4798765432",
        "CompanyEmail": "support@marvel.com",
        "CompanyUrl": "https://marvel.com",
        "Onboarding": {
          "Heading": "Marvel",
          "LeadParagraph": "Marvel delievers quality comics",
          "LogoUrl": "",
          "ReturnUrl": "https://marvel.com/boarded"
        }
      },
      "x-nullable": true
    },
    "Onboarding": {
      "type": "object",
      "properties": {
        "Heading": {
          "type": "string"
        },
        "LeadParagraph": {
          "type": "string"
        },
        "LogoUrl": {
          "type": "string"
        },
        "ReturnUrl": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "DealerLogo": {
      "required": [
        "DealerId",
        "Base64EncodedLogo",
        "FileName"
      ],
      "type": "object",
      "properties": {
        "DealerId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Base64EncodedLogo": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        }
      },
      "example": {
        "DealerId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "Base64EncodedLogo": "This string has to contain a base64 encoded image",
        "FileName": "logo.png"
      },
      "x-nullable": true
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "ID": {
          "description": "Transaction ID",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "The date for the transaction",
          "type": "string"
        },
        "ProductID": {
          "description": "Product ID (SIGN, IDENTIFICATION etc)",
          "type": "string"
        },
        "Description": {
          "description": "Transaction description",
          "type": "string"
        },
        "Count": {
          "format": "int32",
          "description": "Number of transactions for the selected date",
          "type": "integer"
        },
        "CustomerNumber": {
          "format": "int32",
          "description": "Your customer number in our invocing system",
          "type": "integer"
        },
        "ExternalReference": {
          "description": "Your reference to the transaction (by ExternalRef in the API call)",
          "type": "string"
        },
        "DepartmentId": {
          "description": "The Departments ID if specified",
          "type": "string"
        }
      },
      "example": {
        "ID": "5cde09af-23bb-445f-a291-dd27152e1207",
        "Date": "2016-11-29T00:00:00",
        "ProductID": "NO-BANKID-AUTH",
        "Description": "Login for: Stark, Tony with: NO_BANKID_WEB  External ref: 765a7ed2d95c4000b14d7a48eb267546",
        "Count": 1,
        "CustomerNumber": 10000,
        "ExternalReference": "765a7ed2d95c4000b14d7a48eb267546",
        "DepartmentId": "AssignmentNumber:11572"
      },
      "x-nullable": true
    },
    "OauthAPIClientResponse": {
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastChanged": {
          "format": "date-time",
          "type": "string"
        },
        "ClientSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OauthSecret"
          }
        },
        "AllowedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AccessTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
          "type": "integer"
        },
        "AbsoluteRefreshTokenLifetime": {
          "format": "int32",
          "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
          "type": "integer"
        },
        "SlidingRefreshTokenLifetime": {
          "format": "int32",
          "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
          "type": "integer"
        },
        "RefreshTokenUsage": {
          "enum": [
            "ReUse",
            "OneTimeOnly"
          ],
          "type": "string"
        },
        "UpdateAccessTokenClaimsOnRefresh": {
          "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.",
          "type": "boolean"
        },
        "RefreshTokenExpiration": {
          "enum": [
            "Sliding",
            "Absolute"
          ],
          "type": "string"
        },
        "AccessTokenType": {
          "enum": [
            "Jwt",
            "Reference"
          ],
          "type": "string"
        },
        "Claims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClaimLite"
          }
        },
        "AllowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "ClientId": "8e5f7815-adcf-4af2-8acd-dccc7b4d2479",
        "ClientName": "Stark",
        "Enabled": true,
        "Created": "2016-11-29T00:00:00",
        "LastChanged": "2016-12-22T00:00:00",
        "ClientSecrets": [
          {
            "Description": "",
            "Value": "pqr+riE275mFasdaewfrergt45gfdsedE=",
            "Type": "SharedSecret"
          }
        ],
        "AllowedScopes": [
          "account_read",
          "account_write"
        ],
        "AccessTokenLifetime": 3600,
        "AbsoluteRefreshTokenLifetime": 2592000,
        "SlidingRefreshTokenLifetime": 1296000,
        "RefreshTokenUsage": "OneTimeOnly",
        "UpdateAccessTokenClaimsOnRefresh": true,
        "RefreshTokenExpiration": "Absolute",
        "AccessTokenType": "Jwt",
        "Claims": [
          {
            "Type": "client_providerid",
            "Value": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609"
          }
        ],
        "AllowedCorsOrigins": [
          "https://www.yourapp.com"
        ]
      },
      "x-nullable": true
    },
    "OauthSecret": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Expiration": {
          "format": "date-time",
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "ClaimLite": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "OauthClientListItemResponse": {
      "type": "object",
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "ClientName": {
          "type": "string"
        },
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastChanged": {
          "format": "date-time",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "OauthClientId": {
      "required": [
        "ClientId",
        "AccountId"
      ],
      "type": "object",
      "properties": {
        "ClientId": {
          "type": "string"
        },
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "x-nullable": true
    },
    "CreateOauthAPIClientRequest": {
      "required": [
        "AccountId",
        "ClientName"
      ],
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OauthSecret"
          }
        },
        "AllowedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AccessTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
          "type": "integer"
        },
        "AbsoluteRefreshTokenLifetime": {
          "format": "int32",
          "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
          "type": "integer"
        },
        "SlidingRefreshTokenLifetime": {
          "format": "int32",
          "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
          "type": "integer"
        },
        "RefreshTokenUsage": {
          "enum": [
            "ReUse",
            "OneTimeOnly"
          ],
          "type": "string"
        },
        "UpdateAccessTokenClaimsOnRefresh": {
          "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.",
          "type": "boolean"
        },
        "RefreshTokenExpiration": {
          "enum": [
            "Sliding",
            "Absolute"
          ],
          "type": "string"
        },
        "AccessTokenType": {
          "enum": [
            "Jwt",
            "Reference"
          ],
          "type": "string"
        },
        "AllowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "ClientName": "Stark",
        "ClientSecrets": [
          {
            "Description": "",
            "Value": "pqr+riE275mFasdaewfrergt45gfdsedE=",
            "Type": "SharedSecret"
          }
        ],
        "AllowedScopes": [
          "account_read",
          "account_write"
        ],
        "AccessTokenLifetime": 3600,
        "AbsoluteRefreshTokenLifetime": 2592000,
        "SlidingRefreshTokenLifetime": 1296000,
        "RefreshTokenUsage": "OneTimeOnly",
        "UpdateAccessTokenClaimsOnRefresh": true,
        "RefreshTokenExpiration": "Absolute",
        "AccessTokenType": "Jwt",
        "AllowedCorsOrigins": [
          "https://www.yourapp.com"
        ]
      },
      "x-nullable": true
    },
    "UpdateOauthAPIClientRequest": {
      "required": [
        "AccountId",
        "ClientId",
        "ClientName"
      ],
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "ClientSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OauthSecret"
          }
        },
        "AllowedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AccessTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
          "type": "integer"
        },
        "AbsoluteRefreshTokenLifetime": {
          "format": "int32",
          "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
          "type": "integer"
        },
        "SlidingRefreshTokenLifetime": {
          "format": "int32",
          "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
          "type": "integer"
        },
        "RefreshTokenUsage": {
          "enum": [
            "ReUse",
            "OneTimeOnly"
          ],
          "type": "string"
        },
        "UpdateAccessTokenClaimsOnRefresh": {
          "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.",
          "type": "boolean"
        },
        "RefreshTokenExpiration": {
          "enum": [
            "Sliding",
            "Absolute"
          ],
          "type": "string"
        },
        "AccessTokenType": {
          "enum": [
            "Jwt",
            "Reference"
          ],
          "type": "string"
        },
        "AllowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "ClientId": "8e5f7815-adcf-4af2-8acd-dccc7b4d2479",
        "ClientName": "Stark",
        "Enabled": true,
        "ClientSecrets": [
          {
            "Description": "",
            "Value": "pqr+riE275mFasdaewfrergt45gfdsedE=",
            "Type": "SharedSecret"
          }
        ],
        "AllowedScopes": [
          "account_read",
          "account_write"
        ],
        "AccessTokenLifetime": 3600,
        "AbsoluteRefreshTokenLifetime": 2592000,
        "SlidingRefreshTokenLifetime": 1296000,
        "RefreshTokenUsage": "OneTimeOnly",
        "UpdateAccessTokenClaimsOnRefresh": true,
        "RefreshTokenExpiration": "Absolute",
        "AccessTokenType": "Jwt",
        "AllowedCorsOrigins": [
          "https://www.yourapp.com"
        ]
      },
      "x-nullable": true
    },
    "OpenIdClientResponse": {
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastChanged": {
          "format": "date-time",
          "type": "string"
        },
        "ClientSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OauthSecret"
          }
        },
        "ClientUri": {
          "type": "string"
        },
        "RequireConsent": {
          "type": "boolean"
        },
        "AllowRememberConsent": {
          "type": "boolean"
        },
        "Flow": {
          "enum": [
            "AuthorizationCode",
            "Implicit",
            "Hybrid",
            "ClientCredentials",
            "ResourceOwner",
            "Custom",
            "AuthorizationCodeWithProofKey",
            "HybridWithProofKey"
          ],
          "type": "string"
        },
        "AllowClientCredentialsOnly": {
          "type": "boolean"
        },
        "RedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PostLogoutRedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LogoutUri": {
          "description": "Specifies logout URI at client for HTTP based logout.",
          "type": "string"
        },
        "RequireSignOutPrompt": {
          "description": "Specifies if the client will always show a confirmation page for sign-out. Defaults to false.",
          "type": "boolean"
        },
        "AllowedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IdentityProviderRestrictions": {
          "description": "List of Identityproviders allowed. This requires setup on your account.",
          "type": "array",
          "items": {
            "enum": [
              "NO_BANKID_MOBILE",
              "NO_BANKID_WEB",
              "SWE_BANKID",
              "NO_BUYPASS",
              "DA_NEMID",
              "FI_TUPAS",
              "MOBILECONNECT",
              "SMS_OTP",
              "Facebook",
              "Google",
              "LinkedIn",
              "GitHub",
              "Microsoft"
            ],
            "type": "string"
          }
        },
        "IdentityTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)",
          "type": "integer"
        },
        "AccessTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
          "type": "integer"
        },
        "AbsoluteRefreshTokenLifetime": {
          "format": "int32",
          "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
          "type": "integer"
        },
        "SlidingRefreshTokenLifetime": {
          "format": "int32",
          "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
          "type": "integer"
        },
        "RefreshTokenUsage": {
          "enum": [
            "ReUse",
            "OneTimeOnly"
          ],
          "type": "string"
        },
        "UpdateAccessTokenClaimsOnRefresh": {
          "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.",
          "type": "boolean"
        },
        "RefreshTokenExpiration": {
          "enum": [
            "Sliding",
            "Absolute"
          ],
          "type": "string"
        },
        "AccessTokenType": {
          "enum": [
            "Jwt",
            "Reference"
          ],
          "type": "string"
        },
        "IncludeJwtId": {
          "description": "Gets or sets a value indicating whether JWT access tokens should include an identifier",
          "type": "boolean"
        },
        "Claims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClaimLite"
          }
        },
        "AlwaysSendClientClaims": {
          "description": "Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow.",
          "type": "boolean"
        },
        "AllowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowAccessTokensViaBrowser": {
          "type": "boolean"
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "ClientId": "8e5f7815-adcf-4af2-8acd-dccc7b4d2479",
        "ClientName": "Stark",
        "Enabled": true,
        "Created": "2016-11-29T00:00:00",
        "LastChanged": "2016-12-22T00:00:00",
        "ClientUri": "https://exampleuri.com",
        "RequireConsent": true,
        "AllowRememberConsent": true,
        "Flow": "ClientCredentials",
        "AllowClientCredentialsOnly": true,
        "RedirectUris": [
          "https://exampleuri.com"
        ],
        "PostLogoutRedirectUris": [
          "https://exampleuri.com",
          "https://exampleuri2.com"
        ],
        "LogoutUri": "https://exampleuri.com",
        "RequireSignOutPrompt": false,
        "AllowedScopes": [
          "mobileconnect",
          "openid"
        ],
        "IdentityProviderRestrictions": [
          "GitHub",
          "NO_BANKID_WEB",
          "NO_BANKID_MOBILE"
        ],
        "IdentityTokenLifetime": 5441,
        "AccessTokenLifetime": 3600,
        "AbsoluteRefreshTokenLifetime": 2592000,
        "SlidingRefreshTokenLifetime": 1296000,
        "RefreshTokenUsage": "OneTimeOnly",
        "UpdateAccessTokenClaimsOnRefresh": true,
        "RefreshTokenExpiration": "Absolute",
        "AccessTokenType": "Jwt",
        "IncludeJwtId": true,
        "Claims": [
          {
            "Type": "client_providerid",
            "Value": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609"
          }
        ],
        "AlwaysSendClientClaims": true,
        "AllowedCorsOrigins": [
          "https://www.yourapp.com"
        ],
        "AllowAccessTokensViaBrowser": true
      },
      "x-nullable": true
    },
    "CreateOpenIdClientRequest": {
      "required": [
        "AccountId",
        "ClientName"
      ],
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ClientName": {
          "type": "string"
        },
        "ClientUri": {
          "type": "string"
        },
        "RequireConsent": {
          "type": "boolean"
        },
        "AllowRememberConsent": {
          "type": "boolean"
        },
        "Flow": {
          "enum": [
            "AuthorizationCode",
            "Implicit",
            "Hybrid",
            "ClientCredentials",
            "ResourceOwner",
            "Custom",
            "AuthorizationCodeWithProofKey",
            "HybridWithProofKey"
          ],
          "type": "string"
        },
        "AllowClientCredentialsOnly": {
          "type": "boolean"
        },
        "RedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PostLogoutRedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LogoutUri": {
          "description": "Specifies logout URI at client for HTTP based logout.",
          "type": "string"
        },
        "RequireSignOutPrompt": {
          "description": "Specifies if the client will always show a confirmation page for sign-out. Defaults to false.",
          "type": "boolean"
        },
        "AllowedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IdentityProviderRestrictions": {
          "description": "Setup which id providers that should be allowed to use",
          "type": "array",
          "items": {
            "enum": [
              "NO_BANKID_MOBILE",
              "NO_BANKID_WEB",
              "SWE_BANKID",
              "NO_BUYPASS",
              "DA_NEMID",
              "FI_TUPAS",
              "MOBILECONNECT",
              "SMS_OTP",
              "Facebook",
              "Google",
              "LinkedIn",
              "GitHub",
              "Microsoft"
            ],
            "type": "string"
          }
        },
        "IdentityTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)",
          "type": "integer"
        },
        "AccessTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
          "type": "integer"
        },
        "AbsoluteRefreshTokenLifetime": {
          "format": "int32",
          "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
          "type": "integer"
        },
        "SlidingRefreshTokenLifetime": {
          "format": "int32",
          "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
          "type": "integer"
        },
        "RefreshTokenUsage": {
          "enum": [
            "ReUse",
            "OneTimeOnly"
          ],
          "type": "string"
        },
        "UpdateAccessTokenClaimsOnRefresh": {
          "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.",
          "type": "boolean"
        },
        "RefreshTokenExpiration": {
          "enum": [
            "Sliding",
            "Absolute"
          ],
          "type": "string"
        },
        "AccessTokenType": {
          "enum": [
            "Jwt",
            "Reference"
          ],
          "type": "string"
        },
        "IncludeJwtId": {
          "description": "Gets or sets a value indicating whether JWT access tokens should include an identifier",
          "type": "boolean"
        },
        "AlwaysSendClientClaims": {
          "description": "Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow.",
          "type": "boolean"
        },
        "AllowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowAccessTokensViaBrowser": {
          "type": "boolean"
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "ClientName": "Stark",
        "ClientUri": "https://exampleuri.com",
        "RequireConsent": true,
        "AllowRememberConsent": true,
        "Flow": "ClientCredentials",
        "AllowClientCredentialsOnly": true,
        "RedirectUris": [
          "https://exampleuri.com"
        ],
        "PostLogoutRedirectUris": [
          "https://exampleuri.com",
          "https://exampleuri2.com"
        ],
        "LogoutUri": "https://exampleuri.com",
        "RequireSignOutPrompt": false,
        "AllowedScopes": [
          "mobileconnect",
          "openid"
        ],
        "IdentityTokenLifetime": 5441,
        "AccessTokenLifetime": 3600,
        "AbsoluteRefreshTokenLifetime": 2592000,
        "SlidingRefreshTokenLifetime": 1296000,
        "RefreshTokenUsage": "OneTimeOnly",
        "UpdateAccessTokenClaimsOnRefresh": true,
        "RefreshTokenExpiration": "Absolute",
        "AccessTokenType": "Jwt",
        "IncludeJwtId": true,
        "AlwaysSendClientClaims": true,
        "AllowedCorsOrigins": [
          "https://www.yourapp.com"
        ],
        "AllowAccessTokensViaBrowser": true
      },
      "x-nullable": true
    },
    "UpdateOpenIdClientRequest": {
      "required": [
        "AccountId",
        "ClientId",
        "ClientName",
        "RedirectUris"
      ],
      "type": "object",
      "properties": {
        "AccountId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ClientId": {
          "type": "string"
        },
        "ClientName": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "ClientUri": {
          "type": "string"
        },
        "RequireConsent": {
          "type": "boolean"
        },
        "AllowRememberConsent": {
          "type": "boolean"
        },
        "Flow": {
          "enum": [
            "AuthorizationCode",
            "Implicit",
            "Hybrid",
            "ClientCredentials",
            "ResourceOwner",
            "Custom",
            "AuthorizationCodeWithProofKey",
            "HybridWithProofKey"
          ],
          "type": "string"
        },
        "AllowClientCredentialsOnly": {
          "type": "boolean"
        },
        "RedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PostLogoutRedirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LogoutUri": {
          "description": "Specifies logout URI at client for HTTP based logout.",
          "type": "string"
        },
        "RequireSignOutPrompt": {
          "description": "Specifies if the client will always show a confirmation page for sign-out. Defaults to false.",
          "type": "boolean"
        },
        "AllowedScopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IdentityProviderRestrictions": {
          "description": "Setup which id providers that should be allowed to use",
          "type": "array",
          "items": {
            "enum": [
              "NO_BANKID_MOBILE",
              "NO_BANKID_WEB",
              "SWE_BANKID",
              "NO_BUYPASS",
              "DA_NEMID",
              "FI_TUPAS",
              "MOBILECONNECT",
              "SMS_OTP",
              "Facebook",
              "Google",
              "LinkedIn",
              "GitHub",
              "Microsoft"
            ],
            "type": "string"
          }
        },
        "IdentityTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)",
          "type": "integer"
        },
        "AccessTokenLifetime": {
          "format": "int32",
          "description": "Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)",
          "type": "integer"
        },
        "AbsoluteRefreshTokenLifetime": {
          "format": "int32",
          "description": "Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days",
          "type": "integer"
        },
        "SlidingRefreshTokenLifetime": {
          "format": "int32",
          "description": "Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days",
          "type": "integer"
        },
        "RefreshTokenUsage": {
          "enum": [
            "ReUse",
            "OneTimeOnly"
          ],
          "type": "string"
        },
        "UpdateAccessTokenClaimsOnRefresh": {
          "description": "Gets or sets a value indicating whether the access token (and its claims) should be updated on a refresh token request.",
          "type": "boolean"
        },
        "RefreshTokenExpiration": {
          "enum": [
            "Sliding",
            "Absolute"
          ],
          "type": "string"
        },
        "AccessTokenType": {
          "enum": [
            "Jwt",
            "Reference"
          ],
          "type": "string"
        },
        "IncludeJwtId": {
          "description": "Gets or sets a value indicating whether JWT access tokens should include an identifier",
          "type": "boolean"
        },
        "AlwaysSendClientClaims": {
          "description": "Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow.",
          "type": "boolean"
        },
        "AllowedCorsOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowAccessTokensViaBrowser": {
          "type": "boolean"
        }
      },
      "example": {
        "AccountId": "6f6c7b6e-1ef3-4d61-865c-90c8a06eb609",
        "ClientId": "8e5f7815-adcf-4af2-8acd-dccc7b4d2479",
        "ClientName": "Stark",
        "Enabled": true,
        "ClientUri": "https://exampleuri.com",
        "RequireConsent": true,
        "AllowRememberConsent": true,
        "Flow": "ClientCredentials",
        "AllowClientCredentialsOnly": true,
        "RedirectUris": [
          "https://exampleuri.com"
        ],
        "PostLogoutRedirectUris": [
          "https://exampleuri.com",
          "https://exampleuri2.com"
        ],
        "LogoutUri": "https://exampleuri.com",
        "RequireSignOutPrompt": false,
        "AllowedScopes": [
          "mobileconnect",
          "openid"
        ],
        "IdentityTokenLifetime": 5441,
        "AccessTokenLifetime": 3600,
        "AbsoluteRefreshTokenLifetime": 2592000,
        "SlidingRefreshTokenLifetime": 1296000,
        "RefreshTokenUsage": "OneTimeOnly",
        "UpdateAccessTokenClaimsOnRefresh": true,
        "RefreshTokenExpiration": "Absolute",
        "AccessTokenType": "Jwt",
        "IncludeJwtId": true,
        "AlwaysSendClientClaims": true,
        "AllowedCorsOrigins": [
          "https://www.yourapp.com"
        ],
        "AllowAccessTokensViaBrowser": true
      },
      "x-nullable": true
    },
    "CreatePdfTemplate": {
      "description": "Create a new Pdf template",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the Pdf template",
          "type": "string"
        },
        "CoverPageSetting": {
          "description": "Coverpage is the page added to the document at the beginning or end that show a list of the signers. This settings hides that page or put it first or last. Default firstpage",
          "enum": [
            "FIRSTPAGE",
            "LASTPAGE",
            "HIDDEN"
          ],
          "type": "string"
        },
        "AddListOfSignaturesOnLastPageOfExistingPDF": {
          "description": "Adds a list of signer names on the last page of the PDF, only use this if you are sure that you have room for the signatures. Contact support for more information.",
          "type": "boolean"
        },
        "CoverPageHtml": {
          "description": "The html template for the coverpage, if this is set it will override the default template. See our documentation on more info on how to make your own custom template.",
          "type": "string"
        },
        "DetailsPageHtml": {
          "description": "List of html templates for the details attatchments. If this is set for one or more language, it will override the default template. See our documentation on more info on how to make your own custom template.",
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "sv": {
              "type": "string"
            },
            "da": {
              "type": "string"
            },
            "fi": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "VerifiedTemplate": {
          "description": "List of labels for the verified label on the footer on each page. If this is set it will override the default text. See our documentation on more info on how to customize.",
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "sv": {
              "type": "string"
            },
            "da": {
              "type": "string"
            },
            "fi": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "Labels": {
          "description": "List of labels for the templates, this are used in the html templates. If this is set it will override the default labels. See our documentation on more info on how to customize.",
          "type": "object",
          "properties": {
            "en": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "no": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "sv": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "da": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "fi": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            }
          },
          "x-nullable": true
        },
        "IncludeLogo": {
          "description": "Include your logo in the Pdf template",
          "type": "boolean"
        },
        "TimeZone": {
          "description": "The time zone that is used for displaying signing time in the PADES (See: https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values for valid values) Defaults to W. Europe Standard Time",
          "type": "string"
        },
        "LogoSourceUrl": {
          "description": "Url to the logo that you want to use in your template",
          "type": "string"
        }
      },
      "example": {
        "Name": "My default template",
        "CoverPageSetting": "FIRSTPAGE",
        "AddListOfSignaturesOnLastPageOfExistingPDF": false,
        "CoverPageHtml": "Html code for the coverpage base64 encoded",
        "DetailsPageHtml": {
          "da": "Html code for the detailspage in Danish base64 encoded",
          "en": "Html code for the detailspage in English base64 encoded",
          "no": "Html code for the detailspage in Norwegian base64 encoded",
          "sv": "Html code for the detailspage in Swedish base64 encoded",
          "fi": "Html code for the detailspage in Finish base64 encoded"
        },
        "VerifiedTemplate": {
          "da": "Verified template in Danish",
          "en": "Verified template in English",
          "no": "Verfied template in Norwegian",
          "sv": "Verfied template inSwedish",
          "fi": "Verfied template in Finish"
        },
        "Labels": {
          "da": {
            "label_key": "Label text to override or add"
          }
        },
        "IncludeLogo": false
      },
      "x-nullable": true
    },
    "PdfTemplate": {
      "required": [
        "Id",
        "Name"
      ],
      "type": "object",
      "properties": {
        "CoverPageSetting": {
          "description": "Coverpage is the page added to the document at the beginning or end that show a list of the signers. This settings hides that page or put it first or last. Default firstpage",
          "enum": [
            "FIRSTPAGE",
            "LASTPAGE",
            "HIDDEN"
          ],
          "type": "string"
        },
        "AddListOfSignaturesOnLastPageOfExistingPDF": {
          "description": "Coverpage is the page added to the document at the beginning or end that show a list of the signers. This settings hides that page or put it first or last. Default firstpage",
          "type": "boolean"
        },
        "CoverPageHtml": {
          "description": "The html template for the coverpage, if this is set it will override the default template. See our documentation on more info on how to make your own custom template.",
          "type": "string"
        },
        "DetailsPageHtml": {
          "description": "List of html templates for the details attatchments. If this is set for one or more language, it will override the default template. See our documentation on more info on how to make your own custom template.",
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "sv": {
              "type": "string"
            },
            "da": {
              "type": "string"
            },
            "fi": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "VerifiedTemplate": {
          "description": "List of labels for the verified label on the footer on each page. If this is set it will override the default text. See our documentation on more info on how to customize.",
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "sv": {
              "type": "string"
            },
            "da": {
              "type": "string"
            },
            "fi": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "Labels": {
          "description": "List of labels for the templates, this are used in the html templates. If this is set it will override the default labels. See our documentation on more info on how to customize.",
          "type": "object",
          "properties": {
            "en": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "no": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "sv": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "da": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "fi": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            }
          },
          "x-nullable": true
        },
        "IncludeLogo": {
          "description": "Include your logo in the Pdf template",
          "type": "boolean"
        },
        "TimeZone": {
          "description": "The time zone that is used for displaying signing time in the PADES (See: https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values for valid values) Defaults to W. Europe Standard Time",
          "type": "string"
        },
        "LogoSourceUrl": {
          "description": "Url to the logo that you want to use in your template",
          "type": "string"
        },
        "Id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "The name of the Pdf template",
          "type": "string"
        },
        "LastEdited": {
          "format": "date-time",
          "description": "Timestamp when the template is last edited",
          "type": "string"
        }
      },
      "example": {
        "CoverPageSetting": "FIRSTPAGE",
        "AddListOfSignaturesOnLastPageOfExistingPDF": false,
        "CoverPageHtml": "Html code for the coverpage base64 encoded",
        "DetailsPageHtml": {
          "da": "Html code for the detailspage in Danish base64 encoded",
          "en": "Html code for the detailspage in English base64 encoded",
          "no": "Html code for the detailspage in Norwegian base64 encoded",
          "sv": "Html code for the detailspage in Swedish base64 encoded",
          "fi": "Html code for the detailspage in Finish base64 encoded"
        },
        "VerifiedTemplate": {
          "da": "Verified template in Danish",
          "en": "Verified template in English",
          "no": "Verfied template in Norwegian",
          "sv": "Verfied template inSwedish",
          "fi": "Verfied template in Finish"
        },
        "Labels": {
          "da": {
            "label_key": "Label text to override or add"
          }
        },
        "IncludeLogo": false,
        "Id": "bbabcaf2-00b5-488e-9ee3-3534cc39a961",
        "Name": "My default template",
        "LastEdited": "2018-11-12T07:47:16.4162818+00:00"
      },
      "x-nullable": true
    },
    "PdfTemplateListItem": {
      "required": [
        "Id",
        "Name"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "The name of the Pdf template",
          "type": "string"
        },
        "LastEdited": {
          "format": "date-time",
          "description": "Timestamp when the template is last edited",
          "type": "string"
        }
      },
      "example": {
        "Id": "e42d722c-5c7f-4910-855b-e94bbfb80b55",
        "Name": "My default template",
        "LastEdited": "2018-11-12T07:47:16.4162818+00:00"
      },
      "x-nullable": true
    },
    "UpdatePdfTemplate": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the Pdf template",
          "type": "string"
        },
        "CoverPageSetting": {
          "description": "Coverpage is the page added to the document at the beginning or end that show a list of the signers. This settings hides that page or put it first or last. Default firstpage",
          "enum": [
            "FIRSTPAGE",
            "LASTPAGE",
            "HIDDEN"
          ],
          "type": "string"
        },
        "AddListOfSignaturesOnLastPageOfExistingPDF": {
          "description": "Adds a list of signer names on the last page of the PDF, only use this if you are sure that you have room for the signatures. Contact support for more information.",
          "type": "boolean"
        },
        "CoverPageHtml": {
          "description": "The html template for the coverpage, if this is set it will override the default template. See our documentation on more info on how to make your own custom template.",
          "type": "string"
        },
        "DetailsPageHtml": {
          "description": "List of html templates for the details attatchments. If this is set for one or more language, it will override the default template. See our documentation on more info on how to make your own custom template.",
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "sv": {
              "type": "string"
            },
            "da": {
              "type": "string"
            },
            "fi": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "VerifiedTemplate": {
          "description": "List of labels for the verified label on the footer on each page. If this is set it will override the default text. See our documentation on more info on how to customize.",
          "type": "object",
          "properties": {
            "en": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "sv": {
              "type": "string"
            },
            "da": {
              "type": "string"
            },
            "fi": {
              "type": "string"
            }
          },
          "x-nullable": true
        },
        "Labels": {
          "description": "List of labels for the templates, this are used in the html templates. If this is set it will override the default labels. See our documentation on more info on how to customize.",
          "type": "object",
          "properties": {
            "en": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "no": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "sv": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "da": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            },
            "fi": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": true
            }
          },
          "x-nullable": true
        },
        "IncludeLogo": {
          "description": "Include your logo in the Pdf template",
          "type": "boolean"
        },
        "TimeZone": {
          "description": "The time zone that is used for displaying signing time in the PADES (See: https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values for valid values) Defaults to W. Europe Standard Time",
          "type": "string"
        },
        "LogoSourceUrl": {
          "description": "Url to the logo that you want to use in your template",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "TemplateWithIdPreview": {
      "required": [
        "PrimaryLanguage"
      ],
      "type": "object",
      "properties": {
        "PrimaryLanguage": {
          "description": "Primary language to use in the preview (required)",
          "enum": [
            "en",
            "no",
            "sv",
            "da",
            "fi"
          ],
          "type": "string"
        },
        "SecondaryLanguage": {
          "description": "Secondary language to use in the prewview (optional)",
          "enum": [
            "en",
            "no",
            "sv",
            "da",
            "fi"
          ],
          "type": "string"
        },
        "XmlSignature": {
          "description": "Xml package signature in base64 encoding",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "TemplatePreview": {
      "required": [
        "PdfTemplate",
        "PrimaryLanguage"
      ],
      "type": "object",
      "properties": {
        "PdfTemplate": {
          "$ref": "#/definitions/PdfTemplate",
          "description": "The PDF template to preview"
        },
        "PrimaryLanguage": {
          "description": "Primary language to use in the preview (required)",
          "enum": [
            "en",
            "no",
            "sv",
            "da",
            "fi"
          ],
          "type": "string"
        },
        "SecondaryLanguage": {
          "description": "Secondary language to use in the prewview (optional)",
          "enum": [
            "en",
            "no",
            "sv",
            "da",
            "fi"
          ],
          "type": "string"
        },
        "XmlSignature": {
          "description": "Xml package signature in base64 encoding",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "ValidateJwtDto": {
      "required": [
        "jwt"
      ],
      "type": "object",
      "properties": {
        "jwt": {
          "description": "The JWT to validate.",
          "type": "string"
        }
      }
    },
    "JwtValidationResultDto": {
      "type": "object",
      "properties": {
        "valid": {
          "description": "Whether the JWT is valid.",
          "type": "boolean"
        },
        "expires": {
          "format": "date-time",
          "description": "The expiration time on or after which the JWT will not be accepted for processing.",
          "type": "string"
        },
        "payload": {
          "description": "The JWT payload.",
          "type": "object"
        },
        "error": {
          "description": "Error message explaining reason for a failed validation.",
          "type": "string"
        }
      }
    },
    "LanguageSetDTO": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "LanguageSetUpdateDTO": {
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "LanguageDTO": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "LanguageSetCreateDTO": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 50,
          "minLength": 1,
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "TranslationDTO": {
      "type": "object",
      "properties": {
        "subjectId": {
          "format": "int32",
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "TranslationUpdateDTO": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "maxLength": 2500,
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "merchantSignRequest": {
      "required": [
        "dataToSign",
        "dataFormat",
        "externalReference"
      ],
      "type": "object",
      "properties": {
        "dataToSign": {
          "description": "Base 64 encoded data",
          "type": "string"
        },
        "xslt": {
          "description": "Base 64 encoded xslt (optional)",
          "type": "string"
        },
        "dataFormat": {
          "description": "Format of data (i.e xml)",
          "enum": [
            "xml",
            "pdf",
            "txt"
          ],
          "type": "string"
        },
        "externalReference": {
          "description": "The service reference for the signing. Will be used for auditlog, and invoicing",
          "type": "string"
        },
        "signingFormat": {
          "description": "Optional, if not set the default setting for the account will be used",
          "enum": [
            "use_provider_setting",
            "no_bankid_seid_sdo",
            "no_bankid_pades",
            "no_buypass_seid_sdo",
            "da_nemid_xmldsig",
            "sv_bankid_native_pkcs7"
          ],
          "type": "string"
        }
      },
      "example": {
        "dataToSign": "RGV0dGUgZXIgZW4gdGVrc3Qgc29tIGthbiBzaWduZXJlcw==",
        "dataFormat": "txt",
        "externalReference": "Some reference",
        "signingFormat": "no_bankid_seid_sdo"
      }
    },
    "SignResponse": {
      "type": "object",
      "properties": {
        "signedData": {
          "description": "base 64 encoded signed data",
          "type": "string"
        },
        "auditLogReference": {
          "format": "uuid",
          "description": "Reference Id to audit log",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "signingFormat": {
          "description": "Signing format",
          "enum": [
            "use_provider_setting",
            "no_bankid_seid_sdo",
            "no_bankid_pades",
            "no_buypass_seid_sdo",
            "da_nemid_xmldsig",
            "sv_bankid_native_pkcs7"
          ],
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/merchantError",
          "description": "Error message"
        },
        "signCertificateBase64String": {
          "description": "Signed with certificate",
          "type": "string"
        },
        "transactionId": {
          "format": "uuid",
          "description": "Id to look up the transaction at a later time",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "signedDocumentId": {
          "format": "uuid",
          "description": "Id to retrieve signed file (pades)",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      }
    },
    "merchantError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string"
        }
      }
    },
    "MerchantSignTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Transaction Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "accountId": {
          "format": "uuid",
          "description": "Your account Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "auditLogReference": {
          "format": "uuid",
          "description": "Audit log Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "externalReference": {
          "description": "External Reference",
          "type": "string"
        },
        "oauthClientId": {
          "description": "The oauth client used in this transaction",
          "type": "string"
        },
        "ipAddress": {
          "description": "Ip address",
          "type": "string"
        },
        "xslt": {
          "description": "Xslt sha256 hash",
          "type": "string"
        },
        "dataToSign": {
          "description": "Data to sign sha256 hash",
          "type": "string"
        },
        "result": {
          "description": "Signed data sha256 hash",
          "type": "string"
        },
        "certificate": {
          "description": "Certificate",
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "description": "Log save time",
          "type": "string"
        },
        "signedDocumentId": {
          "format": "uuid",
          "description": "For pades retrieval",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "padesCreated": {
          "type": "boolean"
        },
        "padesRetrieved": {
          "type": "boolean"
        },
        "padesDeleted": {
          "type": "boolean"
        }
      }
    },
    "ValidateSDORequest": {
      "required": [
        "sdoData",
        "externalReference"
      ],
      "type": "object",
      "properties": {
        "sdoData": {
          "description": "Base 64 encoded SDO (Signed document)",
          "type": "string"
        },
        "externalReference": {
          "description": "The service reference for the signing. Will be used for auditlog, and invoicing",
          "type": "string"
        },
        "dataToValidate": {
          "description": "Check that the original data matches the sdo data (optional, base64 encoded)",
          "type": "string"
        },
        "signersToValidate": {
          "description": "Add signers to validate (optional)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signers"
          }
        }
      },
      "example": {
        "sdoData": "Base 64 encoded sdo data (required)",
        "externalReference": "Your reference",
        "dataToValidate": "base 64 encoded data to validate (optional)",
        "signersToValidate": [
          {
            "identificator": "12345678911",
            "identificatorType": "SSN"
          }
        ]
      },
      "x-nullable": true
    },
    "Signers": {
      "type": "object",
      "properties": {
        "identificator": {
          "type": "string"
        },
        "identificatorType": {
          "enum": [
            "Unknown",
            "BankIDUniqueId",
            "SSN",
            "OrganizationNumber"
          ],
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "ValidateSDOResponse": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "valid": {
          "description": "Is the SDO valid",
          "type": "boolean"
        },
        "seal": {
          "$ref": "#/definitions/Seal",
          "description": "Is the Seal of the SDO valid"
        },
        "signers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidatedSigners"
          }
        },
        "summary": {
          "type": "string"
        },
        "validationError": {
          "$ref": "#/definitions/ValidationError"
        },
        "auditId": {
          "format": "uuid",
          "description": "The AuditId vil only be set for users with an account on the API.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "x-nullable": true
    },
    "Seal": {
      "type": "object",
      "properties": {
        "sealedBy": {
          "type": "string"
        },
        "sealedTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "certificate": {
          "$ref": "#/definitions/Certificate"
        },
        "sealValid": {
          "type": "boolean"
        }
      },
      "x-nullable": true
    },
    "ValidatedSigners": {
      "type": "object",
      "properties": {
        "identificator": {
          "type": "string"
        },
        "identificatorType": {
          "enum": [
            "Unknown",
            "BankIDUniqueId",
            "SSN",
            "OrganizationNumber"
          ],
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "description": "Null if no errors is registered",
          "type": "string"
        },
        "errorMessage": {
          "description": "Null if no errors is registered",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "issuerName": {
          "type": "string"
        },
        "subjectName": {
          "type": "string"
        },
        "validFromDate": {
          "format": "date-time",
          "type": "string"
        },
        "validToDate": {
          "format": "date-time",
          "type": "string"
        },
        "versionNumber": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "keyAlgorithm": {
          "type": "string"
        },
        "keySize": {
          "type": "string"
        },
        "uniqueId": {
          "type": "string"
        },
        "originator": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string"
        },
        "policyOid": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "signingCertficate": {
          "type": "string"
        },
        "x509Certificate": {
          "$ref": "#/definitions/X509Certificate"
        },
        "keyUsage": {
          "type": "string"
        },
        "emailAddress": {
          "type": "object",
          "x-nullable": true
        },
        "signingTime": {
          "format": "date-time",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "certificateType": {
          "enum": [
            "HSM_MERCHANT_CERTIFICATE",
            "MOBILE_PERSONAL_CERTIFICATE",
            "NETCENTRIC_EMPLOYEE_CERTIFICATE",
            "NETCENTRIC_PERSONAL_CERTIFICATE",
            "NETCENTRIC_QUALIFIED_EMPLOYEE_CERTIFICATE",
            "NETCENTRIC_QUALIFIED_PERSONAL_CERTIFICATE",
            "SOFT_MERCHANT_CERTIFICATE",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "X509Certificate": {
      "type": "object",
      "properties": {
        "rawData": {
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "ParseSDORequest": {
      "required": [
        "sdoData",
        "externalReference"
      ],
      "type": "object",
      "properties": {
        "sdoData": {
          "description": "Base 64 encoded SDO (Signed document)",
          "type": "string"
        },
        "externalReference": {
          "description": "The service reference for the signing. Will be used for auditlog, and invoicing",
          "type": "string"
        },
        "fetchSSN": {
          "description": "Fetch social security number (Requires valid scope)",
          "type": "boolean"
        }
      },
      "example": {
        "sdoData": "Base 64 encoded sdo data (required)",
        "externalReference": "Your reference",
        "fetchSSN": true
      },
      "x-nullable": true
    },
    "ParseSDOResponse": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "auditId": {
          "format": "uuid",
          "description": "Reference to audit log",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "signersValid": {
          "description": "Is the signatures valid",
          "type": "boolean"
        },
        "seal": {
          "$ref": "#/definitions/Seal",
          "description": "Is the sealing of the SDO valid"
        },
        "signers": {
          "description": "Signers list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SDOSigners"
          }
        },
        "summary": {
          "description": "Summary",
          "type": "string"
        },
        "validationError": {
          "$ref": "#/definitions/ValidationError",
          "description": "Error messages"
        },
        "signedData": {
          "description": "Original data from document (base64 string)",
          "type": "string"
        }
      },
      "x-nullable": true
    },
    "SDOSigners": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/Certificate"
        },
        "name": {
          "type": "string"
        },
        "dateOfBirth": {
          "format": "date-time",
          "type": "string"
        },
        "pid": {
          "type": "string"
        },
        "ssn": {
          "type": "string"
        },
        "signedTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "ocsp": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        }
      },
      "x-nullable": true
    }
  },
  "tags": [
    {
      "name": "Identification Endpoint",
      "description": "This endpoint enables authentication/identification through multiple identity providers such as Norwegian BankID, Swedish BankID and NemID.\n## Last update \n Last build date for this endpoint: 20.08.2018"
    },
    {
      "name": "Signature Endpoint",
      "description": "Sign contracts, declarations, forms and other documents using digital signatures.\r\n\n## Last update \n Last build date for this endpoint: 27.11.2018"
    },
    {
      "name": "Notification Endpoint",
      "description": "This endpoint lets you manage events that are raised when something happens in your account.\r\n"
    },
    {
      "name": "Information Services Endpoint",
      "description": "This endpoint offers a lot of useful extra information including credit checks, signature / prokura checks and information regarding persons and companies.\r\n\n## Last update \n Last build date for this endpoint: 27.11.2018"
    },
    {
      "name": "Admin Endpoint",
      "description": "This endpoint lets you  manage your account details, logo, styling and OpenID / OAuth2 clients. If you are a dealer you can also manage the accounts registered to this dealer.\r\n\n## Last update \n Last build date for this endpoint: 27.11.2018"
    },
    {
      "name": "JWT Endpoint"
    },
    {
      "name": "Text Endpoint",
      "description": "This endpoint lets you customize the texts used by various Idfy services."
    },
    {
      "name": "MerchantSign Endpoint",
      "description": "This endpoint lets you sign documents with a merchant signature.\n## Last update \n Last build date for this endpoint: 04.06.2018"
    },
    {
      "name": "Validation Endpoint",
      "description": "This endpoint enables you to validate signatures from the following electronic IDs (eID) providers:\r\n - Norwegian BankID (SDO)\n## Last update \n Last build date for this endpoint: 08.03.2018"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Identification",
      "tags": [
        "Identification Endpoint",
        "Identification Session",
        "Log",
        "Norwegian BankID"
      ]
    },
    {
      "name": "Signature",
      "tags": [
        "Signature Endpoint",
        "Attachments",
        "Documents",
        "Files",
        "Jwt",
        "Notifications",
        "Signers",
        "Status",
        "Themes"
      ]
    },
    {
      "name": "Notification",
      "tags": [
        "Notification Endpoint",
        "Events",
        "Webhooks"
      ]
    },
    {
      "name": "Information Services",
      "tags": [
        "Information Services Endpoint",
        "Aml",
        "Business",
        "BusinessRegistry",
        "GeoData",
        "Lei",
        "MobileInfo",
        "Person",
        "Report",
        "SignatureRolesCheck",
        "Status"
      ]
    },
    {
      "name": "Admin",
      "tags": [
        "Admin Endpoint",
        "Account",
        "Dealer",
        "Invoice",
        "OAuthAPIClient",
        "OpenID",
        "Status",
        "Template"
      ]
    },
    {
      "name": "JWT",
      "tags": [
        "JWT Endpoint",
        "Jwt"
      ]
    },
    {
      "name": "Text",
      "tags": [
        "Text Endpoint",
        "Language Sets",
        "Languages",
        "Translations"
      ]
    },
    {
      "name": "MerchantSign",
      "tags": [
        "MerchantSign Endpoint",
        "Signature"
      ]
    },
    {
      "name": "Validation",
      "tags": [
        "Validation Endpoint",
        "Norwegian BankID"
      ]
    }
  ],
  "swagger": "2.0",
  "info": {
    "version": "1",
    "description": "# Introduction\nThe Idfy API is a RESTful API that use the OAuth 2.0 protocol for authorization. All request and response bodies are formatted in JSON.\n\n# Getting started\n\n## Get an account\nTo use the API you need an account at Idfy. You can get a free test account by signing up through our [onboarding site](https://onboard.idfy.io).\n\n## Support\nWe’re here to help! Get in touch with support at support@idfy.io and we’ll get back to you as soon as we can.\n\n# Authentication\nThis API uses OAuth2 for authentication. OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. Be sure to use `client_credentials` as grant type when connecting to this API. \n\n## Obtaining an access token\n\nAn access token can be obtained by making a request to the OAuth2 token endpoint.\n\nThe request must include the following parameters:\n\n| Parameter | Value |\n|----------|----------|\n| `grant_type` | The type of grant used to authenticate the request. In this case: `client_credentials`. |\n| `scope` | Space-delimited list of requested scope permissions. |\n\nExample:\n\n```\nPOST https://api.idfy.io/oauth/connect/token\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0\n \ngrant_type=client_credentials\nscope=document_read\n```\n\n**Note**: This request must authenticate using HTTP basic authentication with your *Client Id* as the username and *Client Secret* as the password. The format is the base-64 encoded string `client_id:client_secret`.  \n\nIf your credentials are valid, the server will respond with a JSON body containing the access token and its expiration time:\n```\n{\n    \"access_token\": \"xxxxx.yyyyy.zzzzz\",\n    \"expires_in\": 3600,\n    \"token_type\": \"Bearer\"\n}\n```\n\nYou can now store and use the access token to make authenticated request by passing it as an authentication header:\n\n`Authorization: Bearer xxxxx.yyyyy.zzzzz`\n\nYou can read more about OAuth2 [here](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2).\n\n# REST API\n\n## HTTP status codes\n* `200 OK`: The request was successful.\n* `201 Created`: A new resource was successfully created.\n* `204 No content`: The request was successful but returns no body.\n* `400 Bad request`: The request was invalid, often due to missing a required parameter.\n* `401 Unauthorized`: Authentication failed due to invalid credentials.\n* `402 Payment Required`: The endpoint is not accessible in your current subscription. Contact sales@idfy.io.\n* `403 Forbidden`: Authorization failed due to insufficient scope/access.\n* `404 Not found`: The specified resource does not exist.\n* `422 Unprocessable Entity`: The server understood the request, but was unable to process it due to a business or logical error (For example creating an XML signature with Swedish BankID which is not supported).\n* `429 Too Many Requests`: The request was blocked due to rate limiting.\n* `500 Internal Server Error`: An internal server error occured.\n* `503 Service Unavailable`: A third party service that this endpoint depends on caused an error or is unavailable.\n\n## HTTP verbs\n* `GET`: Retrieves a resource or lists resources.\n* `POST`: Creates or exceutes a commandand on a resource.\n* `PUT`: Replaces a resource.\n* `PATCH`: Partially updates a resoruce.\n* `DELETE`: Deletes a resoure.\n\n## Formats\nThe Idfy API only supports JSON format. All request must use the `Content-type` header set to `application/json`. The JSON will use camelCasing. All request must use the UTF-8 encoding, and all responsens will be in UTF-8.\nAll file download wills be a standard HTTP download result.\n\n## Idempotent Requests\nThe APIs supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a new document fails due to a network connection error, you can retry the request with the same ExternalId  to guarantee that only a single document/identification is created.\n\n## Compatibility\nThe Idfy API do change from time to time, but all changes will follow strict rules in order to keep the API's backward compatible. All new fields will be optional, and if large changes are required a new endpoint will be created. If an endpoint is being deprecated, all customers will be given notice well in advance.\n\n## Pagination (linked lists)\nWhen using paging the list will be wrapped in a linked list object. The data contains the list-data in the result. There will also be navigation links for next, first, last and previous page. The total amount of results (size) will also be inlcuded.\nExample:\n```json\n{\n   \"offset\": 0,\n   \"limit\": 2,\n   \"size\": 45,\n   \"links\": {\n     \"next\": \"https://api.idfy.io/signature/documents/summary?limit=2&offset=2\",\n     \"first\": \"https://api.idfy.io/signature/documents/summary?limit=2\",\n     \"last\": \"\",\n     \"previous\": \"\"\n   },\n   \"data\": [\n      {\n         \"id\": \"2519011552909132317BrJ6VqOrcBYfwmgQ2eypM5XP7DEbCm8\",\n         \"name\": \"Bruce Wayne\",\n         \"status\": \"SUCCESS\",\n         \"clientIp\": \"192.168.1.1\",\n         \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\",\n         \"identityProviderType\": \"NO_BANKID_WEB\",\n         \"language\": \"NO\",\n         \"externalid\": \"gtWEH8euBHeSWPTcjwB0Bg5o1mjsH106wmjTDMxoFnadzvNSsnSSY0zbJTpy\",\n         \"timestamp\": \"2017-07-19T18:29:53.7550972Z\",\n         \"iframe\": false,\n         \"socialSecurityNumber\": false\n      },\n      {\n         \"id\": \"2519011552909132317BrJ6VqOrcBYfwmgQ2eypM5XP7DEbCm8\",\n         \"name\": \"Joker\",\n         \"status\": \"ERROR\",\n         \"clientIp\": \"192.168.1.1\",\n         \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\",\n         \"identityProviderType\": \"FI_TUPAS\",\n         \"language\": \"NO\",\n         \"externalid\": \"gtWEH8euBHeSWPTcjwB0Bg5o1mjsH106wmjTDMxoFnadzvNSsnSSY0zbJTpy\",\n         \"errorcode\": \"TIMEOUT\",\n         \"timestamp\": \"2017-07-19T18:29:53.7550972Z\",\n         \"iframe\": false,\n         \"socialSecurityNumber\": false\n      }\n  ]\n}\n```\n\n## HTTP response headers\nAll API request have some standard HTTP headers:\n* `X-Idfy-Environment`: (test or prod) this header tells you if you are talking to the test or the production environment.\n* `X-Idfy-AccountId`: The Idfy accountID for the request.\n* `RequestId`: Each API request has an associated request identifier. You will also be able to use this to search in the logs in the Idfy dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n# Status page\nVisit our [status page](https://developer.idfy.io/status) if you want to know the status of our services or subscribe to notifications.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "title": "Idfy API Reference",
    "contact": {
      "name": "Idfy Norge AS",
      "url": "https://www.idfy.io",
      "email": "support@idfy.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "https://developer.idfy.io/terms",
    "x-codegen-settings": {
      "nullify404": false,
      "generateAsyncCode": true,
      "useMethodPrefix": false,
      "useModelPostfix": false,
      "useControllerPostfix": true,
      "useEnumPostfix": false,
      "useConstructorsForConfig": true,
      "csharpDefaultNamespace": "Idfy",
      "javaDefaultPackageName": "io.Idfy.RestClient",
      "phpComposerPackageName": "idfy/restclient",
      "appendContentHeaders": true,
      "brandLabel": "Idfy",
      "userAgent": "ApiMatic-RestClient-2018-11-27 Sdk-Langauge:{language}",
      "enableAdditionalModelProperties": true,
      "projectName": "Idfy",
      "generateInterfaces": true,
      "validateRequiredParameters": true,
      "enableLogging": true,
      "useCommonSDKLibrary": true
    },
    "x-server-configuration": {
      "default-environment": "production",
      "default-server": "default",
      "environments": [
        {
          "name": "production",
          "servers": [
            {
              "name": "default",
              "url": "https://api.idfy.io"
            },
            {
              "name": "access token server",
              "url": "https://api.idfy.io/oauth/connect/token"
            }
          ]
        },
        {
          "name": "production-norway",
          "servers": [
            {
              "name": "default",
              "url": "https://api.idfy.no"
            },
            {
              "name": "access token server",
              "url": "https://api.idfy.io/oauth/connect/token"
            }
          ]
        }
      ]
    }
  },
  "host": "api.idfy.io",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "description": "OAuth2 flow: Application Grant/Client Credentials (production)",
      "flow": "application",
      "tokenUrl": "https://api.idfy.io/oauth/connect/token",
      "scopes": {
        "addons": "Grants access to information endpoint.",
        "account_read": "Grants read-only access to admin endpoint.",
        "account_write": "Grants write access to admin endpoint.",
        "oauth_write": "Grants read/write access to manage OAuth clients",
        "openid_write": "Grants read/write access to manage OpenID clients",
        "account-create": "Account create",
        "identify": "Grants read/write access to identification endpoint.",
        "document_read": "Grants read-only access to documents.",
        "document_write": "Grants write access to documents.",
        "document_file": "Grants access to download documents.",
        "form_write": "Grants write access to forms.",
        "form_read": "Grants read-only access to forms.",
        "form_file": "Grants access to download forms.",
        "event": "Grants full access to notification endpoint.",
        "invoice": "Invoice",
        "analytics": "Analytics",
        "audit_root": "Grants full access to audit endpoint.",
        "audit_read": "Grants read-only access to audit endpoint.",
        "audit_write": "Grants write access to audit endpoint.",
        "merchantsign": "Grants full access to merchant signature endpoint.",
        "validation": "Grants full access to validation endpoint.",
        "validation_ssn": "Grants full access to validation endpoint with social security number.",
        "text_read": "Grants read-only access to text endpoint.",
        "text_write": "Grants write access to text endpoint."
      },
      "x-oauth2-clientid-example": "t50406ae2701149be8d72063a4ac005d0",
      "x-oauth2-clientsecret-example": "b3bf4003f34acc146a8270cb991fa2afc3be4a72df2aae0b5db3067120ec23a6"
    }
  }
}